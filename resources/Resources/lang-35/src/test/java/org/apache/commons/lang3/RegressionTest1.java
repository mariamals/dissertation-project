package org.apache.commons.lang3;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        long[] longArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray6 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, 'a');
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray0, (java.lang.Object[]) charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, 10, (int) (byte) 10);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray16, '4', (int) (byte) 100);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (byte) 10);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.clone(floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, (float) 10L, 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        float[][] floatArray0 = null;
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        float[][] floatArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (java.lang.Object) intArray8);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) (byte) 0, 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNull(floatArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str11 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        boolean[] booleanArray0 = null;
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray9, false);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray9);
        boolean[] booleanArray13 = new boolean[] {};
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, false, 0);
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray21, false);
        boolean[] booleanArray24 = new boolean[] {};
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false, 0);
        java.lang.Boolean[] booleanArray32 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray32, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray34);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray24, booleanArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray36);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray36);
        java.lang.Boolean[] booleanArray43 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray43, false);
        boolean[] booleanArray46 = new boolean[] {};
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray46, false, 0);
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray54, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray56);
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray46, booleanArray56);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray45, booleanArray58);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray36, booleanArray45);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray45);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray61);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray61, false);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray61);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.lang.Object[] objArray0 = null;
        byte[] byteArray2 = new byte[] { (byte) 0 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 1, (int) (short) -1);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) -1, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, 0, (int) (byte) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) (byte) 1, (int) '#');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        short[] shortArray5 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.clone(shortArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray6, (short) (byte) 0, (int) '4');
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray7, true, (int) 'a');
        boolean[] booleanArray11 = null;
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray14, true, (int) ' ');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.lang.Float[] floatArray1 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray3 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray4 = new java.lang.Float[][] { floatArray1, floatArray3 };
        java.lang.Float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, floatArray5);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray5);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray7, 10.0f, (int) (short) 100);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray0, (double) 3);
        org.junit.Assert.assertNull(doubleArray2);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "");
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray19, 10, 3);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray19);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray29);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray29, (int) (short) 10);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.add(intArray29, (-1));
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35, -1]");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, true, (int) (byte) 10);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray19);
        boolean[] booleanArray23 = null;
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        long[] longArray0 = null;
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        org.junit.Assert.assertNull(longArray1);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray8, (short) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray14);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[35.0, -1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray16);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) '#', (double) (short) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        long[] longArray0 = null;
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, 0, 3);
        org.junit.Assert.assertNull(longArray3);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray6, ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, ' ');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a##4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a##4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, #, #, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) -1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray25, (long) 100);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.add(longArray25, (long) 2);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray34 = org.apache.commons.lang3.ArrayUtils.add(longArray25, (int) '#', 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[1, 1, 2]");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray1, (long) '#');
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray5 = org.apache.commons.lang3.ArrayUtils.remove(longArray3, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray0, false);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, 0, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray13 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray12);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray22);
        java.lang.Boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray25, false, 0);
        java.io.Serializable[][] serializableArray29 = org.apache.commons.lang3.ArrayUtils.removeElement((java.io.Serializable[][]) byteArray13, (java.lang.Object) false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(serializableArray29);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, 100.0d, 10, (double) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.lang.Double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 5);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray2, (int) '4', (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.lang.String str2 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) false, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "false" + "'", str2, "false");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray0, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (float) 7);
        org.junit.Assert.assertNull(floatArray2);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10, (short) -1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[0, 0, -1, 10, -1, 10]");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 1L);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.clone(floatArray11);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 7, (float) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        java.lang.Boolean[] booleanArray9 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        char[] charArray15 = new char[] { '4', '#', 'a' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.subarray(charArray15, 0, (int) (byte) 1);
        char[] charArray24 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray24);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray18, charArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray9, (java.lang.Object) charArray18, 0);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray18, 'a');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.add(charArray32, (int) (short) 1, 'a');
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray32);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, true]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, a]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        char[] charArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        double[] doubleArray0 = null;
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray0);
        org.junit.Assert.assertNull(doubleArray1);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        char[][][] charArray0 = new char[][][] {};
        char[][][] charArray1 = new char[][][] {};
        char[][][][] charArray2 = new char[][][][] { charArray0, charArray1 };
        char[] charArray8 = new char[] { '4', '4', '4', 'a' };
        char[] charArray13 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray14 = new char[][] { charArray8, charArray13 };
        char[] charArray19 = new char[] { '4', '4', '4', 'a' };
        char[] charArray24 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray25 = new char[][] { charArray19, charArray24 };
        char[] charArray30 = new char[] { '4', '4', '4', 'a' };
        char[] charArray35 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray36 = new char[][] { charArray30, charArray35 };
        char[][][] charArray37 = new char[][][] { charArray14, charArray25, charArray36 };
        char[][][] charArray38 = org.apache.commons.lang3.ArrayUtils.toArray(charArray37);
        // The following exception was thrown during execution in test generation
        try {
            char[][][][] charArray39 = org.apache.commons.lang3.ArrayUtils.add(charArray2, (int) ' ', charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.lang.Object obj0 = null;
        java.lang.String str1 = org.apache.commons.lang3.ArrayUtils.toString(obj0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.lang.Byte[] byteArray3 = new java.lang.Byte[] { (byte) 100, (byte) 1, (byte) 1 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) -1);
        java.lang.Object obj6 = null;
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray3, obj6, (int) (short) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(byteArray12, (byte) 10);
        byte[] byteArray15 = null;
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray12, byteArray15);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        float[] floatArray5 = new float[] { 1, (-1), (byte) 0, '#', (-1) };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) 3);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[1.0, -1.0, 0.0, 35.0, -1.0]");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) (byte) 10);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray3, (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray3, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 0, (int) (byte) 100);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 1);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, true, (int) (byte) 10);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray19);
        boolean[] booleanArray23 = null;
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        double[] doubleArray2 = new double[] { 10.0d, (byte) 1 };
        double[] doubleArray5 = new double[] { 10.0d, (byte) 1 };
        double[][] doubleArray6 = new double[][] { doubleArray2, doubleArray5 };
        double[] doubleArray9 = new double[] { 10.0d, (byte) 1 };
        double[] doubleArray12 = new double[] { 10.0d, (byte) 1 };
        double[][] doubleArray13 = new double[][] { doubleArray9, doubleArray12 };
        double[][][] doubleArray14 = new double[][][] { doubleArray6, doubleArray13 };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) (byte) 10, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, false);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.add(booleanArray7, 0, true);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, true, (-1));
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 0.0d, 100.0d, 0.0d, 1.0d, (-1.0d) };
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 0.0d, 100.0d, 0.0d, 1.0d, (-1.0d) };
        java.lang.Double[][] doubleArray12 = new java.lang.Double[][] { doubleArray5, doubleArray11 };
        java.lang.Double[][] doubleArray13 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        char[] charArray19 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(charArray19, '4');
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable[][] serializableArray25 = org.apache.commons.lang3.ArrayUtils.add((java.io.Serializable[][]) doubleArray13, (java.io.Serializable[]) charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: [Ljava.lang.Character;");
        } catch (java.lang.ArrayStoreException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a, #, #, 4, #]");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.lang.Object[] objArray0 = null;
        java.lang.Object obj1 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (int) (byte) 0, (short) 10);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray0, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[10]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray11, 0.0f, (int) ' ');
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) (short) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        char[] charArray0 = null;
        char[] charArray4 = new char[] { '4', '#', 'a' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.subarray(charArray4, 0, (int) (byte) 1);
        char[] charArray13 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray13);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray15, '#', (int) 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray15);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray15);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray15);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray15, ' ');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        short[] shortArray5 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.clone(shortArray5);
        short[] shortArray8 = new short[] { (byte) 10 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray6, shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray8, 100, (int) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        double[] doubleArray3 = new double[] { 100.0d };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        double[] doubleArray8 = new double[] { 3, 4 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f, 0, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray8);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray0, (double) 3);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray17, 0, 0);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray20, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray20, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray14 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray15, (-1));
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray15);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, 0, 10);
        int[] intArray29 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray29);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray29, (int) (byte) 0, (int) (byte) 1);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.addAll(intArray7, intArray29);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray34, (int) (byte) 10, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1, 10, 10, 1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        short[] shortArray0 = new short[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) 0, (int) (byte) 0);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray0);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        double[] doubleArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10.0f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        short[] shortArray15 = new short[] { (byte) 1, (short) 0 };
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray15, (short) 0);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray12, shortArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 1, 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray12);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        byte[] byteArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray0, (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.lang.Integer[] intArray0 = new java.lang.Integer[] {};
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) '#');
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (byte) 10);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.add(intArray5, 4);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray7, (int) (byte) 0, (int) ' ');
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[4]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray3 = new double[] { 100.0d };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        double[] doubleArray8 = new double[] { 3, 4 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f, 0, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray0, doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Byte[] byteArray13 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) (short) 0, 0);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray15, byteArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray10, (java.lang.Object) byteArray25);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, (double) (byte) 0);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        long[] longArray17 = null;
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray17, 100L);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray20);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.subarray(longArray10, 5, 0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray26 = org.apache.commons.lang3.ArrayUtils.remove(longArray10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[100]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[1, 100]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray11);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        java.lang.String str15 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray11);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        float[][] floatArray0 = null;
        float[] floatArray6 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray12 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray18 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray24 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray30 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray31 = new float[][] { floatArray6, floatArray12, floatArray18, floatArray24, floatArray30 };
        float[][] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray31);
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        java.lang.Integer[] intArray47 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray47);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray48, (-1));
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray48);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray48);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray0, (java.lang.Object) intArray40);
        java.lang.Integer[] intArray60 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray60);
        java.lang.Integer[] intArray62 = org.apache.commons.lang3.ArrayUtils.toObject(intArray61);
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray62);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray63);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.remove(intArray6, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = org.apache.commons.lang3.ArrayUtils.remove(intArray12, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, 0, 1, 35]");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray6);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, 4, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true, false]");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.lang.reflect.Type[][] typeArray0 = null;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(typeArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, 'a');
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray25);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray26);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray31 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4]");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.lang.Object obj0 = null;
        java.lang.String str2 = org.apache.commons.lang3.ArrayUtils.toString(obj0, "{4}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{4}" + "'", str2, "{4}");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11, (short) (byte) 100);
        java.lang.String str14 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray11);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1,100,-1,0,100,1}" + "'", str14, "{-1,100,-1,0,100,1}");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        int[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray0, (int) (byte) 10);
        org.junit.Assert.assertNull(intArray2);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 100.0f, (int) '#', (double) (-1));
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 0.0f);
        double[] doubleArray29 = null;
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray26, doubleArray29);
        double[] doubleArray32 = new double[] { 100.0d };
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) 10.0f);
        double[] doubleArray37 = new double[] { 3, 4 };
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray32, doubleArray37);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, (double) 10.0f, 0, 0.0d);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray37);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, 10.0d, 3, 0.0d);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray37, (double) (-1.0f));
        double[] doubleArray51 = new double[] { 100.0d };
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray51, (double) 10.0f);
        double[] doubleArray56 = new double[] { 3, 4 };
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray51, doubleArray56);
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray49, doubleArray56);
        double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray59, (int) '#', 0);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray59, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray56, doubleArray59);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray56);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray30, doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[3.0, 4.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.lang.Byte[][] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        java.lang.Byte[][] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, byteArray2);
        java.util.Map<java.lang.Object, java.lang.Object> objMap4 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNull(objMap4);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = null;
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray5);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray4, 0, (int) (byte) 10);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray4, 0, (long) 5);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[5]");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray34);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray6 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.clone(shortArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray7, 4);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray7, (short) 100, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray7, (int) (short) -1, (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Class<?>[] wildcardClassArray1 = org.apache.commons.lang3.ArrayUtils.clone(wildcardClassArray0);
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, false);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray1, (java.lang.Object) booleanArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.AnnotatedElement[] annotatedElementArray13 = org.apache.commons.lang3.ArrayUtils.remove((java.lang.reflect.AnnotatedElement[]) wildcardClassArray1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(wildcardClassArray1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) 5);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) 10L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray7);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.remove(floatArray7, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0]");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.lang.Float[] floatArray1 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray3 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray5 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray7 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray9 = new java.lang.Float[] { 1.0f };
        java.lang.Float[][] floatArray10 = new java.lang.Float[][] { floatArray1, floatArray3, floatArray5, floatArray7, floatArray9 };
        java.lang.Float[] floatArray12 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray16 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray18 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray20 = new java.lang.Float[] { 1.0f };
        java.lang.Float[][] floatArray21 = new java.lang.Float[][] { floatArray12, floatArray14, floatArray16, floatArray18, floatArray20 };
        java.lang.Float[] floatArray23 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray25 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray27 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray31 = new java.lang.Float[] { 1.0f };
        java.lang.Float[][] floatArray32 = new java.lang.Float[][] { floatArray23, floatArray25, floatArray27, floatArray29, floatArray31 };
        java.lang.Float[] floatArray34 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray36 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray38 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray40 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray42 = new java.lang.Float[] { 1.0f };
        java.lang.Float[][] floatArray43 = new java.lang.Float[][] { floatArray34, floatArray36, floatArray38, floatArray40, floatArray42 };
        java.lang.Float[] floatArray45 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray47 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray49 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray51 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray53 = new java.lang.Float[] { 1.0f };
        java.lang.Float[][] floatArray54 = new java.lang.Float[][] { floatArray45, floatArray47, floatArray49, floatArray51, floatArray53 };
        java.lang.Float[] floatArray56 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray58 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray60 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray62 = new java.lang.Float[] { 1.0f };
        java.lang.Float[] floatArray64 = new java.lang.Float[] { 1.0f };
        java.lang.Float[][] floatArray65 = new java.lang.Float[][] { floatArray56, floatArray58, floatArray60, floatArray62, floatArray64 };
        java.lang.Float[][][] floatArray66 = new java.lang.Float[][][] { floatArray10, floatArray21, floatArray32, floatArray43, floatArray54, floatArray65 };
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray66);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray3 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray3);
        short[] shortArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) shortArray5, 0);
        int[] intArray15 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) 0, (int) (byte) 1);
        int[] intArray26 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.clone(intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray15, intArray26);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.subarray(intArray15, (int) (byte) 1, (int) (byte) 100);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) intArray32);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) (short) 1, 1);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray36, 5);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray7);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = org.apache.commons.lang3.ArrayUtils.remove(intArray7, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, -1, -1]");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, 7, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray2);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) (byte) 10);
        short[] shortArray16 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray16);
        short[] shortArray18 = null;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray16, shortArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray16, (short) -1);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray16, 0, 0);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray16, (short) 0);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        java.lang.Short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray28);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.add(shortArray28, (short) (byte) 100);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray31);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[100, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray6 = null;
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray5, longArray6);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray7, 10, 4);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) (short) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray7, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray4, 1);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray6, 100, 6);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, 0.0f);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 2);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.remove(floatArray2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray1 = new boolean[] {};
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, false, 0);
        java.lang.Boolean[] booleanArray9 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray12 = new boolean[] {};
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false, 0);
        java.lang.Boolean[] booleanArray20 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray22);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray24);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray24);
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray24, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray24);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray24, false, (int) (byte) 100);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray24);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) '4', (int) (short) 10);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, 100.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) (byte) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        short[] shortArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(shortArray0, (short) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray11);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray16 = org.apache.commons.lang3.ArrayUtils.add(longArray11, (int) '#', (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) (byte) 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.remove(intArray7, 4);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray11, (int) (byte) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray11, 2, (int) 'a');
        int[] intArray23 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray23);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray23, (int) (byte) 0, (int) (byte) 1);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray23, (int) (byte) -1);
        int[] intArray36 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray36);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.add(intArray36, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str42 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray36, "");
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.subarray(intArray36, 10, 3);
        int[] intArray46 = org.apache.commons.lang3.ArrayUtils.addAll(intArray23, intArray36);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray46, (int) (byte) 10);
        java.lang.Integer[] intArray49 = org.apache.commons.lang3.ArrayUtils.toObject(intArray46);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray16, intArray46);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 97, 1, 10, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{1,10,-1,0,1,35}" + "'", str42, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray39, (int) '#', 0);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray50 = new double[] { 'a', 10, 1.0d };
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray50, (double) (short) 0, (double) 10.0f);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray50, 0.0d);
        double[] doubleArray59 = new double[] { 'a', 10, 1.0d };
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray59, (double) (short) 0, (double) 10.0f);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray59, 0.0d);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray50, doubleArray59);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray65);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray65, 0.0d);
        double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray65, (int) ' ', 10);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray39, doubleArray71);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray75 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray73, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[3.0, 4.0]");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) '4', (int) '#');
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        double[] doubleArray0 = null;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) 0, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray9);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) (byte) -1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        double[] doubleArray3 = new double[] { 7, (short) -1, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 1, (int) '4', (double) 7);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[7.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray6, (double) (-1.0f));
        double[] doubleArray20 = new double[] { 100.0d };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) 10.0f);
        double[] doubleArray25 = new double[] { 3, 4 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray20, doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray28, (int) '#', 0);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray28);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray37, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[3.0, 4.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[3.0, 4.0]");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray11, 2, (int) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray11);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, true);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray30, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (short) (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) (byte) 100, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.add(shortArray8, 7, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        boolean[] booleanArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true, 5);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        double[] doubleArray0 = null;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, 0, 100);
        org.junit.Assert.assertNull(doubleArray3);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (short) (byte) 1);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        int[] intArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, 7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, (int) (byte) 10, (int) (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) 1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray0);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray11 = org.apache.commons.lang3.ArrayUtils.remove(longArray0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        int[][][][] intArray0 = null;
        int[][][][] intArray1 = org.apache.commons.lang3.ArrayUtils.clone(intArray0);
        org.junit.Assert.assertNull(intArray1);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) -1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray25, (long) 100);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray25, (long) 3);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray1);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (byte) -1, (double) '#');
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 1.0f);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray11);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[35.0, -1.0, 100.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        short[] shortArray9 = new short[] { (byte) 1, (short) 0 };
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray4, (java.lang.Object) (short) 0);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, true);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray21, true, (int) (byte) 10);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        java.lang.Short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.add(shortArray12, 7, (short) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray13);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray9, 0, (int) (short) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, (double) 100, (int) (byte) -1, (double) 2);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, 100.0d, (int) '4');
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, 0.0d, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, true, (int) (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, true, (int) (byte) 100);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        java.lang.String str9 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray2);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (int) (byte) 1, (short) -1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 0, (int) '#');
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{100,1}" + "'", str9, "{100,1}");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[100, -1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray12, ' ');
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a##4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a##4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, #, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) (byte) 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.remove(intArray7, 4);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray12, 4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 1, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, (float) (byte) -1);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray9, 0.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, 0.0f);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray9);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray9);
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, 0.0f);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(floatArray20, (float) (byte) 1);
        float[] floatArray30 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray30);
        float[] floatArray32 = new float[] {};
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.add(floatArray32, 0.0f);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(floatArray32, (float) (byte) 1);
        float[] floatArray42 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray32, floatArray42);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, (float) 0, 0);
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray32, (int) (short) 100, (int) '#');
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray49);
        float[] floatArray51 = new float[] {};
        float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.add(floatArray51, 0.0f);
        float[] floatArray54 = new float[] {};
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.add(floatArray54, 0.0f);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray54, (float) (byte) -1);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray51, floatArray54);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray49, floatArray54);
        float[] floatArray61 = new float[] {};
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.add(floatArray61, 0.0f);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray63);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray19, floatArray54);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray54);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray54);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[0.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.lang.Float[] floatArray2 = new java.lang.Float[] { 0.0f, 1.0f };
        java.lang.Float[][] floatArray3 = new java.lang.Float[][] { floatArray2 };
        java.lang.Float[][][] floatArray4 = new java.lang.Float[][][] { floatArray3 };
        java.lang.Float[] floatArray7 = new java.lang.Float[] { 0.0f, 1.0f };
        java.lang.Float[][] floatArray8 = new java.lang.Float[][] { floatArray7 };
        java.lang.Float[][][] floatArray9 = new java.lang.Float[][][] { floatArray8 };
        java.lang.Float[] floatArray12 = new java.lang.Float[] { 0.0f, 1.0f };
        java.lang.Float[][] floatArray13 = new java.lang.Float[][] { floatArray12 };
        java.lang.Float[][][] floatArray14 = new java.lang.Float[][][] { floatArray13 };
        java.lang.Float[] floatArray17 = new java.lang.Float[] { 0.0f, 1.0f };
        java.lang.Float[][] floatArray18 = new java.lang.Float[][] { floatArray17 };
        java.lang.Float[][][] floatArray19 = new java.lang.Float[][][] { floatArray18 };
        java.lang.Float[] floatArray22 = new java.lang.Float[] { 0.0f, 1.0f };
        java.lang.Float[][] floatArray23 = new java.lang.Float[][] { floatArray22 };
        java.lang.Float[][][] floatArray24 = new java.lang.Float[][][] { floatArray23 };
        java.lang.Float[] floatArray27 = new java.lang.Float[] { 0.0f, 1.0f };
        java.lang.Float[][] floatArray28 = new java.lang.Float[][] { floatArray27 };
        java.lang.Float[][][] floatArray29 = new java.lang.Float[][][] { floatArray28 };
        java.lang.Float[][][][] floatArray30 = new java.lang.Float[][][][] { floatArray4, floatArray9, floatArray14, floatArray19, floatArray24, floatArray29 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Float[][][][] floatArray32 = org.apache.commons.lang3.ArrayUtils.remove(floatArray30, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(intArray7, (int) (short) 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) 'a');
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (byte) 0, (-1));
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray15, 7);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (float) 0);
        org.junit.Assert.assertNull(floatArray2);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray1, (float) (byte) 1);
        float[] floatArray11 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray11);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray11, (int) (short) 1, (int) '#');
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.clone(floatArray11);
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, 0.0f);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(floatArray17, (float) (byte) 1);
        float[] floatArray27 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray27);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray27, (int) (short) 1, (int) '#');
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.clone(floatArray27);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray32);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 10);
        float[] floatArray36 = null;
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray36);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray37, 0.0f);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray39);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        int[] intArray3 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray6, "");
        java.lang.Integer[] intArray15 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray18);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray18, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{52,100,10}" + "'", str8, "{52,100,10}");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[52, 100, 10, 0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 1, 10, 10, 1, 0]");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        double[] doubleArray11 = new double[] { 'a', 10, 1.0d };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) 0, (double) 10.0f);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, 0.0d);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) int16);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray6);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 1, 0, 0]");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, (int) (short) 1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, 100, 0);
        java.lang.Class<?> wildcardClass11 = floatArray10.getClass();
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        short[] shortArray5 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.clone(shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray6, (short) (byte) 100);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (short) 1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray6);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray6, (short) (byte) 100, 0);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, -1, -1, 100, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
        int[] intArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        int int8 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) charArray6);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray6);
        char[] charArray25 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray25);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.add(charArray25, (int) (short) 0, '4');
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray29, '4');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.add(charArray29, 1, 'a');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray34);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.subarray(charArray34, (int) (short) 1, (int) (byte) 10);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.clone(charArray38);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray38);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[a, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#4##aaa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#4##aaa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, 4, #, #, a, a, a, #, #, 4, #]");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.lang.Boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        org.junit.Assert.assertNull(booleanArray2);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray20 = org.apache.commons.lang3.ArrayUtils.add(charArray12, (int) (short) -1, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #, a, #, #, 4, #]");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (short) 0, 0);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (byte) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray21, (byte) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, (int) '4');
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 0, (-1));
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray7, byteArray23);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray38, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.add(byteArray43, (byte) 100);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray43);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.add(byteArray46, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        java.lang.Long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) (byte) -1, 0);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray0);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.lang.Object[] objArray0 = null;
        int[] intArray4 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) intArray6);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[52, 100, 10]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        short[] shortArray0 = null;
        short[] shortArray5 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(shortArray5, (short) 10);
        short[] shortArray12 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(shortArray12, (short) 10);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray12);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.add(shortArray5, (short) (byte) 1);
        short[] shortArray23 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) (byte) 0, 0);
        short[] shortArray29 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray23, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray17, shortArray31);
        java.lang.Short[] shortArray39 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39, (short) 100);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray41, (short) 1);
        java.lang.Short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray41);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray44);
        short[] shortArray48 = new short[] { (byte) 1, (short) 0 };
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray48, (short) (byte) 10);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray48, (short) 0);
        short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.add(shortArray52, (short) (byte) 1);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray45, shortArray52);
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray45, (short) 100, 3);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray17, shortArray45);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray0, shortArray45);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[-1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1]");
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[-1, 1, 0, 100, 1, -1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int[] intArray23 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray23);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray23, (int) (byte) 0, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.clone(intArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(intArray35, (int) (short) 0);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.add(intArray35, (int) 'a');
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.clone(intArray35);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.addAll(intArray23, intArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray23, (int) (byte) 100);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray16, (java.lang.Object) int43);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray16);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray16);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        short[] shortArray11 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        short[] shortArray13 = null;
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray11, shortArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray11, (short) -1);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.clone(shortArray11);
        java.lang.String str18 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray11);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray11);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{100,1}" + "'", str18, "{100,1}");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 100, -1, 0, 100, 1, 100, 1]");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[4.0, 3.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        int[][][][] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[][][][] intArray2 = org.apache.commons.lang3.ArrayUtils.remove(intArray0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray1 = new boolean[] {};
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, false, 0);
        java.lang.Boolean[] booleanArray9 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray12 = new boolean[] {};
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false, 0);
        java.lang.Boolean[] booleanArray20 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray22);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray24);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray24);
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray24, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray24);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray24, false, (int) (byte) 100);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray24);
        boolean[] booleanArray47 = null;
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray16 = org.apache.commons.lang3.ArrayUtils.remove(charArray14, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        char[] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray0, (int) ' ', 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '#');
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray5, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray8);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray8, (byte) 100);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(intArray7, (int) (short) 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) 'a');
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, 0, 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 4);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) (byte) -1, (int) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.clone(byteArray6);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, 9, (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.add(booleanArray12, (int) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        char[] charArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10, (short) -1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (short) -1, (double) (-1L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        byte[] byteArray0 = null;
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray0, 2, (int) (short) 100);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) 6);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray13);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        char[] charArray0 = null;
        char[] charArray6 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray6, (int) (short) 0, '4');
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray10, ' ', (-1));
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray10);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNull(charArray15);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.add(longArray1, (long) 10);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap8 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray7);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, 10L);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 0L, 2);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, 10L);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.addAll(longArray1, longArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[10]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(objMap8);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.lang.Object[] objArray0 = null;
        java.lang.Class<?>[] wildcardClassArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Class<?>[] wildcardClassArray2 = org.apache.commons.lang3.ArrayUtils.clone(wildcardClassArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray0, (java.lang.Object[]) wildcardClassArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.lang.Character[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, ' ');
        org.junit.Assert.assertNull(charArray2);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.add(byteArray1, 10, (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray34);
        boolean[] booleanArray38 = new boolean[] {};
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray38, false, 0);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray38, true);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray34, booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray8);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) 4, (-1));
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, (int) (byte) 10, (int) (short) 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) (short) -1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.lang.Object[] objArray0 = null;
        java.lang.Object obj1 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, obj1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.lang.Byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 0);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) (byte) 0, 3);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        short[] shortArray5 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.clone(shortArray5);
        short[] shortArray8 = new short[] { (byte) 10 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray6, shortArray8);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray8, 10, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        double[] doubleArray0 = null;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, 2, (int) (short) 1);
        org.junit.Assert.assertNull(doubleArray3);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        char[] charArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, ' ', 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        java.lang.Class<?> wildcardClass15 = charArray6.getClass();
        double[] doubleArray17 = new double[] { 100.0d };
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) 10.0f);
        double[] doubleArray22 = new double[] { 3, 4 };
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray17, (double) 0.0f);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, 0.0d, 1, (double) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray17);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) wildcardClass15, (java.lang.Object) doubleArray17);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) 0L, (double) 0L);
        double[] doubleArray36 = new double[] { 100.0d };
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray36, (double) 10.0f);
        double[] doubleArray41 = new double[] { 3, 4 };
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray36, doubleArray41);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray36, (double) 0.0f);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray36, 0.0d, 1, (double) 1L);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray36, 0.0d, (int) (short) 0, 100.0d);
        double[] doubleArray54 = new double[] { 100.0d };
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray54, (double) 10.0f);
        double[] doubleArray59 = new double[] { 3, 4 };
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray54, doubleArray59);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray54, (double) 0.0f);
        double[] doubleArray66 = new double[] { 'a', 10, 1.0d };
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray66, (double) (short) 0, (double) 10.0f);
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray66, 0.0d);
        double[] doubleArray75 = new double[] { 'a', 10, 1.0d };
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray75, (double) (short) 0, (double) 10.0f);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray75, 0.0d);
        double[] doubleArray81 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray66, doubleArray75);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray62, doubleArray81);
        double[] doubleArray83 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray36, doubleArray62);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray36);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) 10, 4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        short[] shortArray0 = null;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 100, 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        long[] longArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray0, (long) 10, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, 100, (int) (short) -1);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, 5, (short) (byte) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 100);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, (long) (short) -1);
        java.lang.Long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toObject(longArray19);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(longArray20);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        byte[] byteArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(byteArray0, (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray1);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (byte) -1, (double) '#');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) '#', 5);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, 'a');
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.add(charArray25, 0, ' ');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray31 = org.apache.commons.lang3.ArrayUtils.add(charArray28, (int) '#', ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " 4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " 4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , 4]");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) 1, (int) (byte) 100);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray23, (-1));
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.lang.Boolean[] booleanArray0 = null;
        boolean[] booleanArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0);
        org.junit.Assert.assertNull(booleanArray1);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        float[] floatArray0 = null;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray8, false);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, true);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) '#', 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray8);
        double[] doubleArray11 = new double[] { 100.0d };
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 10.0f);
        double[] doubleArray16 = new double[] { 3, 4 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray16);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 10.0f, 0, 0.0d);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray8, doubleArray16);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray8, (double) 3);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray25, 0, 0);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray28, (double) (byte) 10);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray30);
        double[] doubleArray33 = new double[] { 100.0d };
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) 10.0f);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] {};
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray33, doubleArray37);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, 0.0d, (double) 100.0f);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray33);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray42, 0);
        java.lang.Class<?> wildcardClass45 = doubleArray42.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.lang.Long[][][] longArray0 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray1 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray2 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray3 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray4 = new java.lang.Long[][][] {};
        java.lang.Long[][][][] longArray5 = new java.lang.Long[][][][] { longArray0, longArray1, longArray2, longArray3, longArray4 };
        java.lang.Long[][][][] longArray7 = org.apache.commons.lang3.ArrayUtils.remove(longArray5, 3);
        java.lang.String str9 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray5, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{{},{},{},{},{}}" + "'", str9, "{{},{},{},{},{}}");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, '#');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, ' ');
        char[] charArray20 = new char[] { '4', '#', 'a' };
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.subarray(charArray20, 0, (int) (byte) 1);
        char[] charArray29 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray29);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray29);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray31, '#', (int) 'a');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray31);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray31);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray31);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(charArray31, '4');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.addAll(charArray31, charArray43);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray43);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a, #, 4, #]");
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.clone(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.remove(byteArray6, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, 0, 100]");
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 0);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray14);
        float[] floatArray21 = new float[] { (byte) 0, 0.0f, (byte) -1, 100.0f, 10 };
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(floatArray21, 100.0f);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray21, 7, (int) ' ');
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray15, (java.lang.Object) 7);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 0.0, -1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        double[] doubleArray0 = null;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, 10, (int) (byte) 0);
        org.junit.Assert.assertNull(doubleArray3);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) '#', 0);
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray14);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) 10.0f, (int) '4', 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray1);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray1, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray6 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, 'a');
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray0, (java.lang.Object[]) charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) charArray6);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4## 4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4## 4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, #, #,  , 4]");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray13, (long) (short) -1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray15, 0L);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        int[] intArray0 = null;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 100);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 1);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, 2, 7);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 1, 1]");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        int[] intArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray6, (int) (byte) 100, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.lang.Object obj0 = null;
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 100);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (byte) 0, 100);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEquals(obj0, (java.lang.Object) byteArray7);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 1, -1, 1, 1, 0]");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray6 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray7 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray8 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray9 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray10 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray11 = new java.lang.Integer[][] { intArray5, intArray6, intArray7, intArray8, intArray9, intArray10 };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray18, intArray25 };
        java.lang.Integer[][] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray11, intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray4, (java.lang.Object) intArray26);
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) 10);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) ' ');
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) 2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        double[] doubleArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (-1L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray8 = new java.lang.Integer[][] { intArray3, intArray7 };
        java.lang.Integer[] intArray12 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray16 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray17 = new java.lang.Integer[][] { intArray12, intArray16 };
        java.lang.Integer[] intArray21 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray21, intArray25 };
        java.lang.Integer[][][] intArray27 = new java.lang.Integer[][][] { intArray8, intArray17, intArray26 };
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray34, (byte) 100);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 1);
        java.lang.Integer[][][] intArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray27, (java.lang.Object) byteArray34);
        java.lang.Integer[] intArray40 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray41 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray42 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray43 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray44 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray45 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray46 = new java.lang.Integer[][] { intArray40, intArray41, intArray42, intArray43, intArray44, intArray45 };
        java.lang.Integer[] intArray53 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray60 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray61 = new java.lang.Integer[][] { intArray53, intArray60 };
        java.lang.Integer[][] intArray62 = org.apache.commons.lang3.ArrayUtils.addAll(intArray46, intArray61);
        java.lang.Integer[][][] intArray63 = org.apache.commons.lang3.ArrayUtils.add(intArray39, intArray46);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) '#', 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray8);
        double[] doubleArray11 = new double[] { 100.0d };
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 10.0f);
        double[] doubleArray16 = new double[] { 3, 4 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray16);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 10.0f, 0, 0.0d);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray8, doubleArray16);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray8, (double) 3);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray25, 0, 0);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray28, (double) (byte) 10);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray30);
        double[] doubleArray33 = new double[] { 100.0d };
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) 10.0f);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] {};
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray33, doubleArray37);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, 0.0d, (double) 100.0f);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray33);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray42, 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray42, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        int[] intArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray0, 7, 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.remove(floatArray10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.lang.Long[] longArray3 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray7 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray11 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray15 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray19 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray20 = new java.lang.Long[][] { longArray3, longArray7, longArray11, longArray15, longArray19 };
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray20, longArray21);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray23, (long) (short) 0);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray23, (long) (short) 1);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray23, (long) 0);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, 10, 4);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) 'a', (int) '#');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        int[] intArray0 = null;
        int[] intArray7 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (byte) 0, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray18, (int) '4');
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray0, intArray18);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray0, (long) (short) 100, (int) (byte) 1);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) 2);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) 3);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray6 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray7 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray8 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray9 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray10 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray11 = new java.lang.Integer[][] { intArray5, intArray6, intArray7, intArray8, intArray9, intArray10 };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray18, intArray25 };
        java.lang.Integer[][] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray11, intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray4, (java.lang.Object) intArray26);
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray4);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray31, 0L);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray35 = org.apache.commons.lang3.ArrayUtils.remove(longArray33, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, (int) (byte) 10, (int) (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) 1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray10 = org.apache.commons.lang3.ArrayUtils.remove(longArray0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.lang.Byte[][] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        java.lang.Byte[][] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        int[] intArray0 = null;
        int[] intArray7 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (byte) 0, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray18);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, (int) (short) -1, (int) (byte) -1);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray23);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray23, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray18, ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray23);
        char[] charArray30 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.clone(charArray30);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.add(charArray30, (int) (short) 0, '4');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.add(charArray30, 2, '#');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray37);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray41 = org.apache.commons.lang3.ArrayUtils.add(charArray37, (int) (byte) -1, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, (int) (short) 0);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, (int) (byte) 100, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.remove(shortArray15, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[]");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray14);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (int) (short) 100, (float) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        java.lang.Object[] objArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray30, (java.lang.Object) byteArray38);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray6, (java.lang.Object[]) byteArray42);
        int[][] intArray46 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (-1), 3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap47 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) intArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '[I@61e565d7', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray46);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 1, 0);
        java.lang.Class<?> wildcardClass13 = shortArray2.getClass();
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, 'a', (int) (short) -1);
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray17 = org.apache.commons.lang3.ArrayUtils.remove(charArray9, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charArray15);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, true, (int) (byte) 10);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray19);
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28, true);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray30, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.add(booleanArray30, 0, true);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray30);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray36, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[true, true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[true, false, false, false, false]");
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, 100.0d, (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.lang.Long[][][][][] longArray0 = null;
        java.lang.Long[][][][][] longArray1 = org.apache.commons.lang3.ArrayUtils.toArray(longArray0);
        org.junit.Assert.assertNull(longArray1);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 7);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, (int) (short) 1, 3);
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        int[] intArray26 = new int[] { 'a', (byte) 0 };
        int[] intArray29 = new int[] { 'a', (byte) 0 };
        int[][] intArray30 = new int[][] { intArray26, intArray29 };
        int[] intArray37 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray44 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray51 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray52 = new int[][] { intArray37, intArray44, intArray51 };
        int[][] intArray53 = org.apache.commons.lang3.ArrayUtils.addAll(intArray30, intArray52);
        java.lang.Object[] objArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray56 = new byte[] { (byte) 100 };
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray56, (int) '4', (int) (byte) 10);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray56, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray62);
        int int64 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray62);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray54, (java.lang.Object) byteArray62);
        java.lang.Byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray62);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray30, (java.lang.Object[]) byteArray66);
        int[][] intArray70 = org.apache.commons.lang3.ArrayUtils.subarray(intArray30, (-1), 3);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray23, (java.lang.Object[]) intArray70);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        long[] longArray0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.add(longArray2, 0, (long) (byte) 1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray7, 0L, (int) (byte) 0);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.addAll(longArray5, longArray7);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.add(longArray11, (int) (short) 0, (long) (short) 0);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, 1L);
        long[] longArray18 = null;
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.add(longArray18, 100L);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.clone(longArray20);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.addAll(longArray11, longArray21);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.subarray(longArray11, 5, 0);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray11);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[100]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[100]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, 100]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[1]");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        int[] intArray0 = null;
        int[] intArray2 = new int[] { 10 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray2, (int) '4');
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(intArray2, (int) (byte) 100);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray0, intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[10]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray12, (float) 10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) 'a', 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.lang.Comparable<java.lang.String>[][][] strComparableArray0 = null;
        java.lang.Comparable<java.lang.String>[][][] strComparableArray1 = org.apache.commons.lang3.ArrayUtils.toArray(strComparableArray0);
        org.junit.Assert.assertNull(strComparableArray1);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.lang.Float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (-1.0f));
        org.junit.Assert.assertNull(floatArray2);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        short[] shortArray15 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0, 0);
        short[] shortArray24 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray8, (java.lang.Object) shortArray27);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8, 2);
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray32, intArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray40, 7);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.lang.Float[] floatArray1 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray3 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray4 = new java.lang.Float[][] { floatArray1, floatArray3 };
        java.lang.Float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray6);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) boolean8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray12, 0L);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.add(longArray12, (long) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) longArray12, 10);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray20, 0L);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.clone(longArray20);
        java.lang.Integer[] intArray24 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray25 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray26 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray27 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray28 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray29 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray30 = new java.lang.Integer[][] { intArray24, intArray25, intArray26, intArray27, intArray28, intArray29 };
        java.lang.Integer[] intArray37 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray44 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray45 = new java.lang.Integer[][] { intArray37, intArray44 };
        java.lang.Integer[][] intArray46 = org.apache.commons.lang3.ArrayUtils.addAll(intArray30, intArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray23, (java.lang.Object) intArray45);
        java.lang.Long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toObject(longArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray23);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray23);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) longArray23);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray23, 100L, 8);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) 1, (int) (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, 0, 7);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d, 4, (double) 1);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) (short) 1);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray24, (double) 100L, 10, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.add(doubleArray24, (int) '4', (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[97.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 100, (short) -1, (short) 100 };
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3, (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.add(shortArray5, 10, (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, -1, 100]");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.lang.Integer[][][][] intArray0 = null;
        char[] charArray6 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray7, '#');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, ' ');
        java.lang.Integer[][][][] intArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray0, (java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNull(intArray13);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray5, 'a', 9);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 8, (int) ' ', (double) 9);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false, false, false, false]");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap9 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, 'true', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, false, false, false, false]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.lang.Object[] objArray0 = null;
        java.lang.Double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) 1L);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 2, (int) (byte) 10, 0.0d);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray14 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray15, (-1));
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray15);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, 0, 10);
        int[] intArray29 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray29);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray29, (int) (byte) 0, (int) (byte) 1);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.addAll(intArray7, intArray29);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray36 = org.apache.commons.lang3.ArrayUtils.remove(intArray34, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1, 10, 10, 1, 1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false, 4);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, (int) (short) 1, 3);
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        int[] intArray24 = null;
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray24);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(intArray6, 0);
        java.lang.Integer[] intArray28 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(intArray28);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 100.0f, (int) '#', (double) (-1));
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 0.0f);
        double[] doubleArray29 = null;
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray26, doubleArray29);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, 10.0d, (double) 9);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        long[] longArray15 = new long[] {};
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.clone(longArray15);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray16, 0, (long) (byte) 1);
        long[] longArray20 = new long[] {};
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.clone(longArray20);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray21, 0L, (int) (byte) 0);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray19, longArray21);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.add(longArray25, (int) (short) 0, (long) (short) 0);
        long[] longArray29 = new long[] {};
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray29);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.add(longArray30, 0, (long) (byte) 1);
        long[] longArray34 = new long[] {};
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.clone(longArray34);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray35, 0L, (int) (byte) 0);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray33, longArray35);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.addAll(longArray25, longArray39);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.addAll(longArray14, longArray40);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray41, 0L, 9);
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.add(longArray41, 0, (long) 3);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[1]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[3, 1, 1, 1]");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) -1);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) -1);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) -1, 3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 10.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.lang.Float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (short) 10);
        org.junit.Assert.assertNull(floatArray2);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        double[][] doubleArray0 = new double[][] {};
        double[][][] doubleArray1 = new double[][][] { doubleArray0 };
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        double[] doubleArray6 = new double[] {};
        double[] doubleArray7 = new double[] {};
        double[][] doubleArray8 = new double[][] { doubleArray3, doubleArray4, doubleArray5, doubleArray6, doubleArray7 };
        double[] doubleArray10 = new double[] {};
        double[] doubleArray12 = new double[] { 100.0d };
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) 10.0f);
        double[] doubleArray17 = new double[] { 3, 4 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray12, doubleArray17);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) 10.0f, 0, 0.0d);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray10, doubleArray17);
        double[][] doubleArray25 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 0, doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double[][][] doubleArray26 = org.apache.commons.lang3.ArrayUtils.add(doubleArray1, 5, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray6, (double) (-1.0f));
        double[] doubleArray20 = new double[] { 100.0d };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) 10.0f);
        double[] doubleArray25 = new double[] { 3, 4 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray20, doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray28, (int) '#', 0);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray28);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray37, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[3.0, 4.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[3.0, 4.0]");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, (int) (short) 0);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, (int) (byte) 100, (int) (short) 1);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray18, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.clone(byteArray3);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray22 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0, 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (short) 100, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(floatArray29, (float) 5);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        double[] doubleArray3 = new double[] { 100.0d };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        double[] doubleArray8 = new double[] { 3, 4 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f, 0, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray8);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, 10.0d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) (short) 10, 0);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray13, (double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray8);
        float[] floatArray16 = new float[] { (short) 0, (-1), (byte) 10, 10.0f };
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray16, 5, (int) (short) 0);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray19);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, -1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray39, (int) '#', 0);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray50 = new double[] { 'a', 10, 1.0d };
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray50, (double) (short) 0, (double) 10.0f);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray50, 0.0d);
        double[] doubleArray59 = new double[] { 'a', 10, 1.0d };
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray59, (double) (short) 0, (double) 10.0f);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray59, 0.0d);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray50, doubleArray59);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray65);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray65, 0.0d);
        double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray65, (int) ' ', 10);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray39, doubleArray71);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray71);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray73, (double) 100, 10);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[4.0, 3.0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray7, (byte) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(byteArray17, (byte) 100);
        java.lang.Byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) '#', '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        long[] longArray15 = null;
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray14, longArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray14, (long) ' ', (int) (short) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 10);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray5, (byte) 10, (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.lang.Object[] objArray0 = null;
        short[] shortArray2 = new short[] { (short) -1 };
        short[] shortArray4 = new short[] { (short) -1 };
        short[] shortArray6 = new short[] { (short) -1 };
        short[] shortArray8 = new short[] { (short) -1 };
        short[] shortArray10 = new short[] { (short) -1 };
        short[][] shortArray11 = new short[][] { shortArray2, shortArray4, shortArray6, shortArray8, shortArray10 };
        short[][] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 4);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) 4);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[-1]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[-1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[-1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (byte) 10);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[1]");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) (byte) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 0);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(shortArray15);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.add(longArray1, (long) 10);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap8 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray7);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, 10L);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 0L, 2);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, 10L);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.addAll(longArray1, longArray10);
        long[] longArray17 = new long[] {};
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray17);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.add(longArray18, 0, (long) (byte) 1);
        long[] longArray22 = new long[] {};
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.clone(longArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray23, 0L, (int) (byte) 0);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray23);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.add(longArray27, (int) (short) 0, (long) (short) 0);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray27);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray27, 1L);
        long[] longArray34 = null;
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.add(longArray34, 100L);
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.addAll(longArray27, longArray37);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, 5, 0);
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.addAll(longArray1, longArray41);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray45 = org.apache.commons.lang3.ArrayUtils.add(longArray41, 6, (long) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[10]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(objMap8);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[100]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[100]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[1, 100]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        long[] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray3 = org.apache.commons.lang3.ArrayUtils.add(longArray0, (int) (short) 10, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) ' ', (int) (short) -1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 0, (int) (byte) 0);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (short) 0, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (byte) 10);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.clone(byteArray28);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray30);
        byte[] byteArray32 = null;
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray30, byteArray32);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        java.lang.Object[] objArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray30, (java.lang.Object) byteArray38);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray6, (java.lang.Object[]) byteArray42);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray42, (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray0);
        java.lang.Byte[] byteArray4 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray4);
        java.lang.String[] strArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray9 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        short[] shortArray11 = null;
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray6, (java.lang.Object) shortArray11, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray4, (java.lang.Object) strArray6);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray1, (java.lang.Object[]) byteArray4);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 1]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        java.lang.Byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray11);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, 1, (byte) 0);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, (int) (short) 0, 0);
        byte[] byteArray28 = null;
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray24, byteArray28);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray36, (int) (short) 0, 0);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.add(byteArray39, (byte) 10);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.clone(byteArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray28, byteArray42);
        byte[] byteArray45 = null;
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray42, byteArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray11, byteArray42);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray11);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.lang.Integer[] intArray0 = new java.lang.Integer[] {};
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) '#');
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (byte) 10);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) '#');
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (byte) 10);
        int[] intArray16 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, 10, 4);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray17, (int) (byte) 0, (int) (short) 100);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.addAll(intArray9, intArray17);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray17);
        java.lang.Integer[] intArray26 = org.apache.commons.lang3.ArrayUtils.toObject(intArray17);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray26);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray0);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray12, 100.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray0, (long) (short) 100, (int) (byte) 1);
        java.lang.Long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 100L, 4);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray6 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.clone(shortArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray7, 4);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray7, (short) 100, (int) '#');
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.add(shortArray7, (short) 100);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[10, -1, -1, 100, -1, 100]");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int[] intArray20 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray20, (int) (byte) 0, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.clone(intArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray32, (int) (short) 0);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) 'a');
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray13, (java.lang.Object) intArray38);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, (float) 0L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray2, 0);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.add(booleanArray2, 0, false);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, false);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray0, (int) (byte) 0, 4);
        org.junit.Assert.assertNull(booleanArray3);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) (short) 1, (int) '4');
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray16, (int) (byte) 100, (-1));
        boolean[] booleanArray26 = new boolean[] { false, false, false, true, true, true };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray19, booleanArray26);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray26, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, false, false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, true, true, true]");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11, (short) (byte) 100);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray11, (java.lang.Object[]) longArray16);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) 3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Byte[] byteArray13 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) (short) 0, 0);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray15, byteArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray10, (java.lang.Object) byteArray25);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, (double) (byte) 0);
        java.lang.String str30 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int[] intArray20 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray20, (int) (byte) 0, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.clone(intArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray32, (int) (short) 0);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) 'a');
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray13, (java.lang.Object) intArray38);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray40, 0.0f);
        float[] floatArray43 = new float[] {};
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray43, 0.0f);
        float[] floatArray46 = new float[] {};
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, 0.0f);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray46, (float) (byte) -1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray43, floatArray46);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray43);
        float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray40, floatArray43);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, 10.0f);
        java.lang.String str57 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) boolean55, "{-1,100,-1,0,100,1}");
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[0.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "false" + "'", str57, "false");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, false);
        boolean[] booleanArray10 = null;
        java.lang.Boolean[] booleanArray15 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, false);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray19, false);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray19);
        boolean[] booleanArray23 = new boolean[] {};
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, false, 0);
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean[] booleanArray34 = new boolean[] {};
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray34, false, 0);
        java.lang.Boolean[] booleanArray42 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray42, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray44);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray34, booleanArray44);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray33, booleanArray46);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray46);
        java.lang.Boolean[] booleanArray53 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray53, false);
        boolean[] booleanArray56 = new boolean[] {};
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray56, false, 0);
        java.lang.Boolean[] booleanArray64 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray64, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray66);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray56, booleanArray66);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray55, booleanArray68);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray46, booleanArray55);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray55);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray71);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray71);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(longArray11, (long) 2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        int[] intArray6 = new int[] { 'a', 3, ' ', (short) 100, (short) 0, (short) 10 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.add(intArray6, 4);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = org.apache.commons.lang3.ArrayUtils.remove(intArray8, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[97, 3, 32, 100, 0, 10]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[97, 3, 32, 100, 0, 10, 4]");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(floatArray17, (float) (short) -1);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray17, (float) (short) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) (byte) 10);
        short[] shortArray8 = new short[] { (byte) 1, (short) 0 };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) (byte) 10);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) 0);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray8);
        short[] shortArray19 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) (byte) 0, 0);
        short[] shortArray28 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.clone(shortArray28);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray31);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.remove(shortArray31, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[10, -1, -1, 100, -1, 100, 0, -1, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.lang.Object[] objArray0 = null;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray2, (byte) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) byteArray2);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray2, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        float[][][] floatArray0 = null;
        float[][] floatArray1 = new float[][] {};
        float[][] floatArray2 = new float[][] {};
        float[][] floatArray3 = new float[][] {};
        float[][] floatArray4 = new float[][] {};
        float[][] floatArray5 = new float[][] {};
        float[][] floatArray6 = new float[][] {};
        float[][][] floatArray7 = new float[][][] { floatArray1, floatArray2, floatArray3, floatArray4, floatArray5, floatArray6 };
        float[][][] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray7);
        float[][][] floatArray9 = org.apache.commons.lang3.ArrayUtils.toArray(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNull(floatArray9);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.remove(longArray4, 0);
        long[] longArray7 = new long[] {};
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, 0L);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray12 = null;
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.addAll(longArray11, longArray12);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.subarray(longArray11, 0, (int) (byte) 10);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray11);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray6, (long) '4');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (float) 'a');
        org.junit.Assert.assertNull(floatArray2);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        java.lang.Byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Object obj6 = null;
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray5, obj6, 6);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) '#');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, 0.0f, 2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (short) 0, 0);
        byte[] byteArray24 = null;
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray24);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray13, byteArray24);
        java.lang.Byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray24);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10]");
        org.junit.Assert.assertNull(byteArray27);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.lang.Object[] objArray0 = null;
        char[] charArray6 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray13 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(charArray13, '4');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray13);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.add(charArray13, ' ');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) charArray20, (int) (short) -1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a##4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a##4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a, #, #, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) 9, 10, (double) (short) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        int[] intArray2 = new int[] { (short) 10, 2 };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray2, 1, (int) (short) 10);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.subarray(intArray2, (int) '#', (int) (short) 100);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray2);
        int[] intArray16 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(intArray17, (int) (short) 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray17, (int) 'a');
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray29 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray29);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray29, (int) (byte) 0, (int) (byte) 1);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.remove(intArray29, (int) (short) 1);
        java.lang.String str37 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray29, "hi!");
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray29);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.addAll(intArray2, intArray39);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.clone(intArray40);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[10, 2]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, 2]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{1,10,-1,0,1,35}" + "'", str37, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 2, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 2, 1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 10L);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, 0L, 2);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray3);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray3, (long) 3);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray3, (long) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(longArray11);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[35]");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, 4, #, #, a, 4]");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Object[] objArray7 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[]) byteArray2);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 1]");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, ' ', (int) '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29, (double) 2);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[3.0, 4.0]");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) (byte) 1);
        short[] shortArray22 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray22, (short) (byte) 0, 0);
        short[] shortArray28 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray28);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray28);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray30);
        java.lang.Short[] shortArray38 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) 100);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) 1);
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray40);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43);
        short[] shortArray47 = new short[] { (byte) 1, (short) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray47, (short) (byte) 10);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray47, (short) 0);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.add(shortArray51, (short) (byte) 1);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray44, shortArray51);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) 100, 3);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray44);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(shortArray44, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[-1, 1, 0, 100, 1, -1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray17);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = org.apache.commons.lang3.ArrayUtils.add(intArray17, (int) '#', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        char[] charArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(charArray0, 'a');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        long[] longArray0 = null;
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, 0, (int) (byte) 0);
        org.junit.Assert.assertNull(longArray3);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        java.lang.Short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray12, (short) 0, 3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray33 = new boolean[] {};
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, 0);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray43);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray32);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray32, 5, 0);
        boolean[] booleanArray51 = new boolean[] {};
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray51, false, 0);
        java.lang.Boolean[] booleanArray59 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray59, false);
        boolean[] booleanArray62 = new boolean[] {};
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray62, false, 0);
        java.lang.Boolean[] booleanArray70 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray70, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray72);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray62, booleanArray72);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray61, booleanArray74);
        boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray51, booleanArray74);
        java.lang.Boolean[] booleanArray81 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray83 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray81, false);
        boolean[] booleanArray84 = new boolean[] {};
        int int87 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray84, false, 0);
        java.lang.Boolean[] booleanArray92 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray94 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray92, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray94);
        boolean[] booleanArray96 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray84, booleanArray94);
        boolean boolean97 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray83, booleanArray96);
        boolean boolean98 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray74, booleanArray83);
        boolean[] booleanArray99 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray50, booleanArray83);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray76), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray83), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray84), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertNotNull(booleanArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray94), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray96), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(booleanArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray99), "[false, false, false, true]");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 4);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) 0, (int) (byte) 10, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray11, 1, ' ');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(charArray11, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a ##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a ##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a,  , #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) '#', 0);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray3, (-1.0d));
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) '4');
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), 0);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray1, (float) (byte) 1);
        float[] floatArray11 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray11);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray1);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (short) -1, (int) (short) 0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray11, (float) 1L);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) (byte) 100);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray7, (float) 2, (int) (byte) -1);
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        float[] floatArray14 = new float[] {};
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray14, 0.0f);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(floatArray14, (float) (byte) 1);
        float[] floatArray24 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray24);
        float[] floatArray26 = new float[] {};
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.add(floatArray26, 0.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(floatArray26, (float) (byte) 1);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray26);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(floatArray31, (float) (short) -1);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray13, (java.lang.Object) floatArray31, 9);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 100.0f, (int) (short) -1, (double) 1L);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        int[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray0, (int) (short) 1);
        org.junit.Assert.assertNull(intArray2);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, 100, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.lang.Long[] longArray4 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) 4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) 4);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100, 10, 0, 1]");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray10, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        float[] floatArray3 = new float[] {};
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 0.0f);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) -1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray3);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, 10.0f, 5);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        char[] charArray0 = null;
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.subarray(charArray0, (int) '4', (int) 'a');
        org.junit.Assert.assertNull(charArray3);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) 5);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray13, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) '4', (int) (short) 10);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 0.0f);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) (byte) -1);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, 0.0f);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.clone(floatArray15);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray15);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray15);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, (float) 3);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray15);
        float[] floatArray28 = new float[] {};
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray28, 0.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(floatArray28, (float) (byte) 1);
        float[] floatArray38 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray28, floatArray38);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray38, (int) (short) 1, (int) '#');
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray42, 0.0f, 0);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray42);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray46, (float) 5, (int) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, 10]");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 0, 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.remove(byteArray7, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray1);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray1, (double) ' ', (double) 8);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = org.apache.commons.lang3.ArrayUtils.clone(typeArray0);
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray8);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray9, true, (int) 'a');
        boolean[] booleanArray13 = null;
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, true);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray9, booleanArray13);
        boolean[] booleanArray17 = new boolean[] {};
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray17, false, 0);
        java.lang.Boolean[] booleanArray25 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray25, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray27);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray17, booleanArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray29);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray29, true);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray9, booleanArray29);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) typeArray1, (java.lang.Object) booleanArray29);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[true, false, true, false, false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray13, (byte) 100);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.lang.Object[] objArray0 = null;
        char[] charArray6 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray6, (int) (short) 0, '4');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray6, 2, '#');
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, ' ', (int) (byte) -1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) ' ', (int) (byte) -1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.add(longArray1, (long) 10);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap8 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray7);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, 10L);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 0L, 2);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, 10L);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.addAll(longArray1, longArray10);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(longArray1, (long) 9);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[10]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(objMap8);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) 1, (-1));
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray33 = new boolean[] {};
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, 0);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray43);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray32);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray32, 5, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray50, false, (int) 'a');
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.add(booleanArray50, false);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray3 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray3);
        short[] shortArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) shortArray5, 0);
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray11, (java.lang.Object) 1L);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) byteArray15, (int) (byte) 1);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) 100);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) 1);
        java.lang.Short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray26);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray29);
        short[] shortArray33 = new short[] { (byte) 1, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray33, (short) (byte) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray33, (short) 0);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.add(shortArray37, (short) (byte) 1);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray30, shortArray37);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) 100, 3);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray0, (java.lang.Object) int43);
        java.lang.CharSequence[] charSequenceArray47 = org.apache.commons.lang3.ArrayUtils.add((java.lang.CharSequence[]) strArray0, (int) (byte) 0, (java.lang.CharSequence) "{a,#,#,4,#}");
        java.lang.Class<?> wildcardClass48 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray11, 1, ' ');
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, 'a', 0);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray20 = org.apache.commons.lang3.ArrayUtils.add(charArray14, 100, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a ##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a ##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a,  , #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray8, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) (short) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        byte[] byteArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) 1, (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        float[] floatArray3 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray7 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray11 = new float[] { (-1L), 7, 1.0f };
        float[][] floatArray12 = new float[][] { floatArray3, floatArray7, floatArray11 };
        float[] floatArray16 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray20 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray24 = new float[] { (-1L), 7, 1.0f };
        float[][] floatArray25 = new float[][] { floatArray16, floatArray20, floatArray24 };
        float[] floatArray29 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray33 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray37 = new float[] { (-1L), 7, 1.0f };
        float[][] floatArray38 = new float[][] { floatArray29, floatArray33, floatArray37 };
        float[][][] floatArray39 = new float[][][] { floatArray12, floatArray25, floatArray38 };
        float[] floatArray43 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray47 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray51 = new float[] { (-1L), 7, 1.0f };
        float[][] floatArray52 = new float[][] { floatArray43, floatArray47, floatArray51 };
        float[] floatArray56 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray60 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray64 = new float[] { (-1L), 7, 1.0f };
        float[][] floatArray65 = new float[][] { floatArray56, floatArray60, floatArray64 };
        float[] floatArray69 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray73 = new float[] { (-1L), 7, 1.0f };
        float[] floatArray77 = new float[] { (-1L), 7, 1.0f };
        float[][] floatArray78 = new float[][] { floatArray69, floatArray73, floatArray77 };
        float[][][] floatArray79 = new float[][][] { floatArray52, floatArray65, floatArray78 };
        float[][][][] floatArray80 = new float[][][][] { floatArray39, floatArray79 };
        float[][][][] floatArray81 = org.apache.commons.lang3.ArrayUtils.toArray(floatArray80);
        float[] floatArray87 = new float[] { (-1.0f), ' ', (byte) 0, (short) 1 };
        float[][] floatArray88 = new float[][] { floatArray87 };
        float[] floatArray93 = new float[] { (-1.0f), ' ', (byte) 0, (short) 1 };
        float[][] floatArray94 = new float[][] { floatArray93 };
        float[][][] floatArray95 = new float[][][] { floatArray88, floatArray94 };
        // The following exception was thrown during execution in test generation
        try {
            float[][][][] floatArray96 = org.apache.commons.lang3.ArrayUtils.add(floatArray81, 7, floatArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[-1.0, 7.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[-1.0, 32.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray88);
        org.junit.Assert.assertNotNull(floatArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray93), "[-1.0, 32.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray94);
        org.junit.Assert.assertNotNull(floatArray95);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray9, 0, (int) (short) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, (double) 100, (int) (byte) -1, (double) 2);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, 1.0d, 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray9, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.lang.Byte[] byteArray3 = new java.lang.Byte[] { (byte) 100, (byte) 1, (byte) 1 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) -1);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray5);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, '#', (int) '4');
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, 4, #, #, a]");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        double[] doubleArray3 = new double[] { 100.0d };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        double[] doubleArray8 = new double[] { 3, 4 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f, 0, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray8);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray0, (double) 5);
        double[] doubleArray21 = new double[] { 'a', 10, 1.0d };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray21, (double) (short) 0, (double) 10.0f);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, 0.0d, (double) (byte) 10);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, (double) 1);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray17, doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray21, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 10);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) (byte) 100, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray25, (double) 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray25, (double) (byte) 1, (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray2);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        char[] charArray23 = new char[] { '4', '#', 'a' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray23, 0, (int) (byte) 1);
        char[] charArray32 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray32);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray26, charArray32);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray26, '#');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray17, (java.lang.Object) charArray26, 0);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.subarray(charArray26, 100, (int) (short) -1);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray14, (java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, true]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray33 = new boolean[] {};
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, 0);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray43);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray32);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray32, 5, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray50, false, (int) (byte) 0);
        java.lang.Boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray50);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(booleanArray54);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        int[] intArray3 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray6, "");
        java.lang.Integer[] intArray15 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray19);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = org.apache.commons.lang3.ArrayUtils.remove(intArray19, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{52,100,10}" + "'", str8, "{52,100,10}");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, 10, 1, 0, 0, 10, 100, 52]");
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        long[] longArray17 = null;
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray17, 100L);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray20);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray21, (long) (-1), (int) (short) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[100]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[1, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.lang.Byte[] byteArray3 = new java.lang.Byte[] { (byte) 100, (byte) 1, (byte) 1 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) -1);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray22 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0, 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (short) 100, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray29);
        float[] floatArray31 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 0.0f);
        float[] floatArray34 = new float[] {};
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray34, 0.0f);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, (float) (byte) -1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray34);
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, 0.0f);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray34, floatArray43);
        java.lang.Float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray34);
        float[] floatArray46 = new float[] {};
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, 0.0f);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(floatArray46, (float) (byte) 1);
        float[] floatArray56 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray46, floatArray56);
        float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray56, (int) (short) 1, (int) '#');
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.clone(floatArray56);
        float[] floatArray62 = new float[] {};
        float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.add(floatArray62, 0.0f);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.contains(floatArray62, (float) (byte) 1);
        float[] floatArray72 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray73 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray62, floatArray72);
        float[] floatArray76 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray72, (int) (short) 1, (int) '#');
        float[] floatArray77 = org.apache.commons.lang3.ArrayUtils.clone(floatArray72);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray56, floatArray77);
        float[] floatArray80 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray56, (float) 10);
        float[] floatArray81 = null;
        float[] floatArray82 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray56, floatArray81);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.contains(floatArray56, (float) '#');
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray34, floatArray56);
        int int87 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray56, 1.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.remove(intArray6, (int) (short) 1);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.add(intArray12, (int) (short) 0);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, 0, 10);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, -1, 0, 1, 35, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray2 = null;
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray2);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray1, (int) '4', '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29, (double) 2);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 10);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray18, (double) (-1));
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray24, (double) (short) 10, (int) (byte) 10, 0.0d);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray24, 4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0, 97.0, 1.0, 97.0, -1.0]");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) -1);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (short) 0, 0);
        byte[] byteArray20 = null;
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray16, byteArray20);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray22, (int) '#', 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray16, (java.lang.Object) doubleArray25);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray16, (byte) 100);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray28, 0, (int) (short) 10);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray28, (byte) 0);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray33);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.clone(byteArray34);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 0, 100, -1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100, 0, 100, -1, 10, 0, 10, 0, 0, 100, 0]");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        float[][] floatArray0 = null;
        float[] floatArray6 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray12 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray18 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray24 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray30 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray31 = new float[][] { floatArray6, floatArray12, floatArray18, floatArray24, floatArray30 };
        float[][] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray31);
        java.lang.Object obj33 = null;
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray31, obj33, (int) (byte) -1);
        float[][] floatArray36 = org.apache.commons.lang3.ArrayUtils.clone(floatArray31);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(floatArray36);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        byte[] byteArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray0, (byte) -1, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.lang.Double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 100.0f);
        org.junit.Assert.assertNull(doubleArray2);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (double) 100);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, 1.0d, 100, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray18, ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray23);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, '#', (int) (byte) 10);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        char[] charArray0 = null;
        char[] charArray1 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) 10);
        float[] floatArray35 = null;
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray36, 0.0f);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray36, 0.0f, (-1));
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(floatArray36, (float) (-1));
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        double[] doubleArray11 = new double[] { 'a', 10, 1.0d };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) 0, (double) 10.0f);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, 0.0d);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) int16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray18, 2);
        int[] intArray27 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.clone(intArray27);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.add(intArray27, (int) (byte) 0, (int) (byte) 1);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray27, 0);
        int[] intArray40 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.clone(intArray40);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.add(intArray40, (int) (byte) 0, (int) (byte) 1);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray40, (int) (byte) -1);
        int[] intArray53 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.clone(intArray53);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.add(intArray53, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str59 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray53, "");
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.subarray(intArray53, 10, 3);
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.addAll(intArray40, intArray53);
        int[] intArray64 = org.apache.commons.lang3.ArrayUtils.clone(intArray53);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray64);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray33, 0);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray20, intArray33);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, -1, 0, 1, 35, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{1,10,-1,0,1,35}" + "'", str59, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 10, -1, 0, 1, 35, 0, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 10, -1, 1, 35, 0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray34);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, false);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray2);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) (byte) 10);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray13, (short) 100, 2);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        double[] doubleArray9 = null;
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray6, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray10, 7, (double) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[3.0, 4.0]");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray13, (short) (byte) -1);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.remove(shortArray15, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[100, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray1, (float) (byte) 1);
        float[] floatArray11 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray12, (float) 'a');
        int[] intArray21 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.clone(intArray21);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray21, (int) (byte) 0, (int) (byte) 1);
        int[] intArray32 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(intArray33, (int) (short) 0);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.add(intArray33, (int) 'a');
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.clone(intArray33);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.addAll(intArray21, intArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray14, (java.lang.Object) intArray39);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.clone(floatArray14);
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, (float) (byte) 0);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) floatArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(floatArray43, (float) (-1));
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 0.0, 100.0, -1.0, 35.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 10L);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, 0L, 2);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray3);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray3, (long) 2, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray3);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(longArray3, (long) 5);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray39, (int) '#', 0);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray50 = new double[] { 'a', 10, 1.0d };
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray50, (double) (short) 0, (double) 10.0f);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray50, 0.0d);
        double[] doubleArray59 = new double[] { 'a', 10, 1.0d };
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray59, (double) (short) 0, (double) 10.0f);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray59, 0.0d);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray50, doubleArray59);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray65);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray65, 0.0d);
        double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray65, (int) ' ', 10);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray39, doubleArray71);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray71);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray31, (-1.0d));
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) ' ', (double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 100);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray10, (byte) 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray1, (float) (byte) 1);
        float[] floatArray11 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray11);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray1);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (float) (short) 100);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNull(floatArray16);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, false);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray15, true);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        java.lang.Object[] objArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray30, (java.lang.Object) byteArray38);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray6, (java.lang.Object[]) byteArray42);
        int[][] intArray46 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (-1), 3);
        int[] intArray53 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.clone(intArray53);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.add(intArray53, (int) (byte) 0, (int) (byte) 1);
        int[] intArray64 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.clone(intArray64);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray53, intArray64);
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.subarray(intArray53, (int) (short) -1, (int) (byte) -1);
        int int71 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray69, (int) (short) -1);
        int[] intArray73 = org.apache.commons.lang3.ArrayUtils.add(intArray69, (int) 'a');
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) 'a', (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[97]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 10);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) (byte) 100, 0);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray25, 3, (int) (byte) 10);
        int int29 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray25);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) 10);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        char[] charArray4 = new char[] { '4', '4', '4', 'a' };
        char[] charArray9 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray10 = new char[][] { charArray4, charArray9 };
        char[] charArray15 = new char[] { '4', '4', '4', 'a' };
        char[] charArray20 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray21 = new char[][] { charArray15, charArray20 };
        char[] charArray26 = new char[] { '4', '4', '4', 'a' };
        char[] charArray31 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray32 = new char[][] { charArray26, charArray31 };
        char[][][] charArray33 = new char[][][] { charArray10, charArray21, charArray32 };
        char[][][] charArray34 = org.apache.commons.lang3.ArrayUtils.toArray(charArray33);
        // The following exception was thrown during execution in test generation
        try {
            char[][][] charArray36 = org.apache.commons.lang3.ArrayUtils.remove(charArray33, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray34);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 5);
        float[] floatArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 5);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 10, (int) '4');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 0, (-1));
        java.lang.String[] strArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray23 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        short[] shortArray25 = null;
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray20, (java.lang.Object) shortArray25, 0);
        java.lang.Byte[] byteArray31 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray31, (java.lang.Object) 1L);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray20, (java.lang.Object) byteArray35, (int) (byte) 1);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray35, (byte) 100);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray13, byteArray35);
        java.lang.Object[] objArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray43 = new byte[] { (byte) 100 };
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray43, (int) '4', (int) (byte) 10);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray43, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray49);
        int int51 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray49);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray41, (java.lang.Object) byteArray49);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray49, (byte) 10);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray40, byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.remove(byteArray49, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 1, 0, 1]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 0, 1]");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) -1, (int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray3 = org.apache.commons.lang3.ArrayUtils.add(intArray0, (int) (byte) 100, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        short[] shortArray15 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0, 0);
        short[] shortArray24 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray8, (java.lang.Object) shortArray27);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8, 2);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray32, 10);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray13, (long) (short) -1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.subarray(longArray15, (int) 'a', 4);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, (long) (byte) 10, 7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, 0, 5);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray22, (double) (byte) 10, (int) (byte) 100);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray22, (double) 9, 10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 10.0, 1.0, 97.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a');
        char[] charArray3 = null;
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray4, 'a', (int) 'a');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        long[] longArray3 = null;
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.add(longArray3, 100L);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray5, (-1L));
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (long) (byte) 0);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray11, 1L, (int) (short) 0);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray0, (java.lang.Object) (short) 0, (-1));
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[100, 0]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        boolean[] booleanArray0 = new boolean[] {};
        boolean[] booleanArray1 = new boolean[] {};
        boolean[] booleanArray2 = new boolean[] {};
        boolean[] booleanArray3 = new boolean[] {};
        boolean[] booleanArray4 = new boolean[] {};
        boolean[][] booleanArray5 = new boolean[][] { booleanArray0, booleanArray1, booleanArray2, booleanArray3, booleanArray4 };
        boolean[] booleanArray6 = new boolean[] {};
        boolean[] booleanArray7 = new boolean[] {};
        boolean[] booleanArray8 = new boolean[] {};
        boolean[] booleanArray9 = new boolean[] {};
        boolean[] booleanArray10 = new boolean[] {};
        boolean[][] booleanArray11 = new boolean[][] { booleanArray6, booleanArray7, booleanArray8, booleanArray9, booleanArray10 };
        boolean[] booleanArray12 = new boolean[] {};
        boolean[] booleanArray13 = new boolean[] {};
        boolean[] booleanArray14 = new boolean[] {};
        boolean[] booleanArray15 = new boolean[] {};
        boolean[] booleanArray16 = new boolean[] {};
        boolean[][] booleanArray17 = new boolean[][] { booleanArray12, booleanArray13, booleanArray14, booleanArray15, booleanArray16 };
        boolean[][][] booleanArray18 = new boolean[][][] { booleanArray5, booleanArray11, booleanArray17 };
        boolean[][][] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toArray(booleanArray18);
        boolean[] booleanArray25 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray31 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray37 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray38 = new boolean[][] { booleanArray25, booleanArray31, booleanArray37 };
        java.lang.Integer[] intArray45 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray45);
        double[] doubleArray50 = new double[] { 'a', 10, 1.0d };
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray50, (double) (short) 0, (double) 10.0f);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray50, 0.0d);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray45, (java.lang.Object) int55);
        boolean[][] booleanArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray38, (java.lang.Object) intArray45);
        boolean[][][] booleanArray58 = org.apache.commons.lang3.ArrayUtils.add(booleanArray19, booleanArray38);
        boolean[][][] booleanArray61 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray19, (int) (short) 100, 1);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray61);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        java.lang.Long[] longArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray30);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray30, 10L);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) 10L, 0);
        float[] floatArray36 = new float[] {};
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.add(floatArray36, 0.0f);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(floatArray36, (float) (byte) 1);
        float[] floatArray46 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray36, floatArray46);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray46, (int) (short) 1, (int) '#');
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray6, (java.lang.Object) floatArray50);
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray54, false);
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray56, 1);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray56, 4, 2);
        int[][] intArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray6, (java.lang.Object) 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[false]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[]");
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) 10);
        float[] floatArray35 = null;
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.add(floatArray36, (int) '4', (float) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, 100L);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray2, (-1L));
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray5, (long) (byte) 0);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray5);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[100]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[100]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.lang.CharSequence[][] charSequenceArray0 = null;
        java.lang.CharSequence[][] charSequenceArray1 = null;
        java.lang.CharSequence[][] charSequenceArray2 = org.apache.commons.lang3.ArrayUtils.addAll(charSequenceArray0, charSequenceArray1);
        org.junit.Assert.assertNull(charSequenceArray2);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, 100, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 10L);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, 0L, 2);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray3, 10L);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) 8);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, (int) '#', (-1));
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (-1.0f));
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false, 0);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray0, 3, (int) (short) 1);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false);
        boolean[] booleanArray14 = new boolean[] {};
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, false, 0);
        java.lang.Boolean[] booleanArray22 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray22, false);
        boolean[] booleanArray25 = new boolean[] {};
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, false, 0);
        java.lang.Boolean[] booleanArray33 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray33, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray35);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray25, booleanArray35);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray37);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray37);
        java.lang.Boolean[] booleanArray44 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray44, false);
        boolean[] booleanArray47 = new boolean[] {};
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray47, false, 0);
        java.lang.Boolean[] booleanArray55 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray55, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray57);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray47, booleanArray57);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray46, booleanArray59);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray37, booleanArray46);
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray46, 5, 0);
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, false, (int) 'a');
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.add(booleanArray64, false);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray64);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray70, true, (int) ' ');
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false]");
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        double[] doubleArray12 = null;
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) 4, (double) 6);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.lang.Comparable<java.lang.String>[][] strComparableArray0 = null;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        java.lang.Comparable<java.lang.String>[][] strComparableArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(strComparableArray0, (java.lang.Object) byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNull(strComparableArray10);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray8);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray11, (int) '#', (int) (short) 0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray40 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray40, (int) (short) 0, '4');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 2, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray14, charArray47);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, 'a');
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#');
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray53, 'a');
        char[] charArray56 = null;
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.addAll(charArray53, charArray56);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray53);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray61 = org.apache.commons.lang3.ArrayUtils.add(charArray58, 9, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, 4, #, #, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, 4, #, #, a, 4]");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray8);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = null;
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray5);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray4, 0, (int) (byte) 10);
        java.lang.Long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (int) (short) 0, (long) (byte) 10);
        java.lang.String str15 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) (byte) 10, "");
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray0);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (float) 3);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) (byte) -1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray14, 10L);
        java.lang.Integer[] intArray23 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23);
        double[] doubleArray28 = new double[] { 'a', 10, 1.0d };
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) 0, (double) 10.0f);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, 0.0d);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray23, (java.lang.Object) int33);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray23);
        java.lang.String[] strArray36 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray42 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, 'a');
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray36, (java.lang.Object[]) charArray42);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, ' ');
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray23, (java.lang.Object) charArray48, (int) (byte) 10);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) 10L, (java.lang.Object) (byte) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        long[] longArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) 6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        byte[] byteArray0 = null;
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray0, 2, 2);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int[] intArray23 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray23);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray23, (int) (byte) 0, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.clone(intArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(intArray35, (int) (short) 0);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.add(intArray35, (int) 'a');
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.clone(intArray35);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.addAll(intArray23, intArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray23, (int) (byte) 100);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray16, (java.lang.Object) int43);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray16);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray52, (int) (short) 0, 0);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray55, (byte) -1);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray45, byteArray55);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.lang.Double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray13 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray20 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray27 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray34 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray41 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[][] longArray42 = new java.lang.Long[][] { longArray6, longArray13, longArray20, longArray27, longArray34, longArray41 };
        java.lang.Long[][] longArray45 = org.apache.commons.lang3.ArrayUtils.subarray(longArray42, 1, (int) (short) 100);
        java.lang.Object[][] objArray46 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[][]) longArray42);
        java.lang.Long[] longArray53 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray60 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray67 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray74 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray81 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[] longArray88 = new java.lang.Long[] { 1L, 10L, 10L, 0L, (-1L), (-1L) };
        java.lang.Long[][] longArray89 = new java.lang.Long[][] { longArray53, longArray60, longArray67, longArray74, longArray81, longArray88 };
        java.lang.Long[][] longArray92 = org.apache.commons.lang3.ArrayUtils.subarray(longArray89, 1, (int) (short) 100);
        java.util.Map<java.lang.Object, java.lang.Object> objMap93 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray89);
        java.lang.Long[][] longArray94 = org.apache.commons.lang3.ArrayUtils.addAll(longArray42, longArray89);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertNotNull(longArray89);
        org.junit.Assert.assertNotNull(longArray92);
        org.junit.Assert.assertNotNull(objMap93);
        org.junit.Assert.assertNotNull(longArray94);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        char[] charArray13 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(charArray13, '4');
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.toObject(charArray13);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.toObject(charArray18);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21, ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray21);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, true);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, true]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray11, 0);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, true]");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        short[] shortArray9 = new short[] { (byte) 1, (short) 0 };
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray4, (java.lang.Object) (short) 0);
        java.lang.Boolean[] booleanArray23 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray23, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray4, (java.lang.Object[]) booleanArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap27 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, 'false', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        boolean[] booleanArray5 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray11 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray18 = new boolean[][] { booleanArray5, booleanArray11, booleanArray17 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        double[] doubleArray30 = new double[] { 'a', 10, 1.0d };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) 0, (double) 10.0f);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, 0.0d);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray25, (java.lang.Object) int35);
        boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, (java.lang.Object) intArray25);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25, (int) (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray39);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, 10, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 1L);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray8, false);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray8, (int) (short) 1, false);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray8, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.add(booleanArray8, 5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false]");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray1, (long) '#');
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.subarray(longArray1, (int) (byte) -1, (int) 'a');
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray1, (long) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        short[] shortArray15 = new short[] { (byte) 1, (short) 0 };
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray15, (short) 0);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray12, shortArray19);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (int) (short) 100, (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, 0, 5);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray22, (int) '#', (int) 'a');
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray25, 0.0d, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 10.0, 1.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) (byte) 10);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray3, (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.add(shortArray3, (int) '#', (short) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        int[] intArray36 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray36);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.add(intArray36, (int) (byte) 0, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(intArray48, (int) (short) 0);
        int[] intArray52 = org.apache.commons.lang3.ArrayUtils.add(intArray48, (int) 'a');
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.clone(intArray48);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.addAll(intArray36, intArray53);
        int[][] intArray55 = org.apache.commons.lang3.ArrayUtils.add(intArray28, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap56 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '[I@4450fcd', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray55);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray13 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray12);
        java.lang.Byte[][] byteArray14 = null;
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray15);
        java.lang.Byte[][] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, byteArray16);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray16, (byte) 10);
        java.lang.Byte[][] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray13, byteArray16);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray16, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.remove(intArray6, (int) (short) 1);
        java.lang.String str14 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray6, "hi!");
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, 8, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{1,10,-1,0,1,35}" + "'", str14, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(floatArray31, (float) (byte) 100);
        float[] floatArray40 = new float[] { 1, (-1), (byte) 0, '#', (-1) };
        java.lang.Float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray40);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.clone(floatArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray31);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[35.0, -1.0, 100.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) boolean7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 0);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray22 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0, 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (short) 100, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray29);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.remove(floatArray29, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        short[] shortArray9 = new short[] { (byte) 1, (short) 0 };
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray4, (java.lang.Object) (short) 0);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, true);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray21, 7, 7);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray24, 4, 1);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.lang.Byte[][] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        java.lang.Byte[][] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) -1, (int) (short) 0);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray6, 5);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.add(intArray6, 3, (int) (byte) 1);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray18);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray18, 9);
        int[] intArray28 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.clone(intArray28);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.add(intArray28, (int) (byte) 0, (int) (byte) 1);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.subarray(intArray28, (int) (byte) -1, (int) (short) 0);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.add(intArray28, (int) (short) 1);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.add(intArray37, (int) '4');
        int[] intArray46 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.clone(intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.add(intArray46, (int) (byte) 0, (int) (byte) 1);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray46, (int) (byte) -1);
        int[] intArray59 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.clone(intArray59);
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.add(intArray59, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str65 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray59, "");
        int[] intArray68 = org.apache.commons.lang3.ArrayUtils.subarray(intArray59, 10, 3);
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.addAll(intArray46, intArray59);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray69);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray37, intArray69);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray37);
        int[] intArray73 = org.apache.commons.lang3.ArrayUtils.addAll(intArray18, intArray37);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 35, 1, 0, -1, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35, 1, 52]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{1,10,-1,0,1,35}" + "'", str65, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 10, -1, 1, 0, 1, 35, 1, 35, 1, 0, -1, 10, 1]");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray0);
        java.lang.Byte[] byteArray4 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray4);
        java.lang.String[] strArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray9 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        short[] shortArray11 = null;
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray6, (java.lang.Object) shortArray11, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray4, (java.lang.Object) strArray6);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray1, (java.lang.Object[]) byteArray4);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray4, (byte) 100);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray19, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 1]");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(intArray18, (int) (short) 0);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.add(intArray18, (int) 'a');
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray23);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray23);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray0, (long) (short) 100, (int) (byte) 1);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 'a');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray14 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.clone(shortArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 10);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (byte) 100, (int) '4');
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray26 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        short[] shortArray28 = null;
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) -1);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.remove(shortArray26, (int) (byte) 1);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.add(shortArray26, (short) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.remove(shortArray35, 1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray17, shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (short) 0, 0);
        java.lang.Short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) -1);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, 'a');
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray0);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.lang.Integer[] intArray1 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 5 };
        java.lang.Integer[][] intArray8 = new java.lang.Integer[][] { intArray1, intArray3, intArray5, intArray7 };
        java.lang.Integer[] intArray10 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray12 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray14 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray16 = new java.lang.Integer[] { 5 };
        java.lang.Integer[][] intArray17 = new java.lang.Integer[][] { intArray10, intArray12, intArray14, intArray16 };
        java.lang.Integer[] intArray19 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray21 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray23 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 5 };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray19, intArray21, intArray23, intArray25 };
        java.lang.Integer[] intArray28 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray30 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray32 = new java.lang.Integer[] { 5 };
        java.lang.Integer[] intArray34 = new java.lang.Integer[] { 5 };
        java.lang.Integer[][] intArray35 = new java.lang.Integer[][] { intArray28, intArray30, intArray32, intArray34 };
        java.lang.Integer[][][] intArray36 = new java.lang.Integer[][][] { intArray8, intArray17, intArray26, intArray35 };
        java.lang.Integer[][][][] intArray37 = new java.lang.Integer[][][][] { intArray36 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer[][][][] intArray39 = org.apache.commons.lang3.ArrayUtils.remove(intArray37, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray14, ' ');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.remove(longArray4, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray4);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray4, 0L, 7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        int[] intArray5 = new int[] { 7, (byte) -1, 5, 100, (byte) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray5, 0);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.add(intArray5, 8);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray5, 6, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[7, -1, 5, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[7, -1, 5, 100, 0, 8]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray16);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.lang.Character[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '#');
        org.junit.Assert.assertNull(charArray2);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] {};
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, (double) 2);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray3, (java.lang.Object[]) doubleArray5);
        int[] intArray12 = new int[] { 1, (-1), (short) -1 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0, (int) (byte) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray5, (java.lang.Object) intArray15);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, 0.0d);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray13, (long) (short) -1);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (short) -1, (java.lang.Object) (short) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.clone(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.remove(byteArray3, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 0, 100]");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, 0.0f);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(floatArray14, (-1.0f));
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[35.0, -1.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray10, '4');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray10);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray5);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray3 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray3);
        short[] shortArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) shortArray5, 0);
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray11, (java.lang.Object) 1L);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) byteArray15, (int) (byte) 1);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) 100);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) 1);
        java.lang.Short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray26);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray29);
        short[] shortArray33 = new short[] { (byte) 1, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray33, (short) (byte) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray33, (short) 0);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.add(shortArray37, (short) (byte) 1);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray30, shortArray37);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) 100, 3);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray0, (java.lang.Object) int43);
        java.lang.Class<?>[] wildcardClassArray45 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.AnnotatedElement[] annotatedElementArray48 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.reflect.AnnotatedElement[]) wildcardClassArray45, (int) (short) 1, (int) (byte) 10);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.reflect.Type[]) wildcardClassArray45);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) typeArray49, (int) (short) 1);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] {};
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) 2);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray52);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) (short) 10);
        double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) (short) 1);
        java.util.Map<java.lang.Object, java.lang.Object> objMap60 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray52);
        java.lang.Byte[] byteArray63 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray63);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray63, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray67);
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray63, (java.lang.Object) byteArray68, 5);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray68, (byte) 0, 10);
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray52, (java.lang.Object) byteArray68, (int) 'a');
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) typeArray49, (java.lang.Object[]) doubleArray52);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray45);
        org.junit.Assert.assertNotNull(annotatedElementArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(objMap60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray17, (java.lang.Object) doubleArray18, 0);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray18, (double) 9);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray14 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray15, (-1));
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray15);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, 0, 10);
        int[] intArray29 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray29);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray29, (int) (byte) 0, (int) (byte) 1);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.addAll(intArray7, intArray29);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray29);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[35, 1, 0, -1, 10, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 1, 10, 10, 1, 1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray10, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #, a]");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray10, '4');
        char[] charArray18 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.add(charArray18, (int) (short) 0, '4');
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 2, '#');
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray25, '#');
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray10, charArray27);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a###4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a###4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, #, 4, #, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        long[] longArray3 = new long[] { 2, '#', 1L };
        long[] longArray7 = new long[] { 2, '#', 1L };
        long[] longArray11 = new long[] { 2, '#', 1L };
        long[][] longArray12 = new long[][] { longArray3, longArray7, longArray11 };
        long[] longArray16 = new long[] { 2, '#', 1L };
        long[] longArray20 = new long[] { 2, '#', 1L };
        long[] longArray24 = new long[] { 2, '#', 1L };
        long[][] longArray25 = new long[][] { longArray16, longArray20, longArray24 };
        long[] longArray29 = new long[] { 2, '#', 1L };
        long[] longArray33 = new long[] { 2, '#', 1L };
        long[] longArray37 = new long[] { 2, '#', 1L };
        long[][] longArray38 = new long[][] { longArray29, longArray33, longArray37 };
        long[] longArray42 = new long[] { 2, '#', 1L };
        long[] longArray46 = new long[] { 2, '#', 1L };
        long[] longArray50 = new long[] { 2, '#', 1L };
        long[][] longArray51 = new long[][] { longArray42, longArray46, longArray50 };
        long[] longArray55 = new long[] { 2, '#', 1L };
        long[] longArray59 = new long[] { 2, '#', 1L };
        long[] longArray63 = new long[] { 2, '#', 1L };
        long[][] longArray64 = new long[][] { longArray55, longArray59, longArray63 };
        long[][][] longArray65 = new long[][][] { longArray12, longArray25, longArray38, longArray51, longArray64 };
        long[] longArray70 = new long[] { 3, 8, (-1) };
        long[] longArray74 = new long[] { 3, 8, (-1) };
        long[] longArray78 = new long[] { 3, 8, (-1) };
        long[] longArray82 = new long[] { 3, 8, (-1) };
        long[] longArray86 = new long[] { 3, 8, (-1) };
        long[][] longArray87 = new long[][] { longArray70, longArray74, longArray78, longArray82, longArray86 };
        // The following exception was thrown during execution in test generation
        try {
            long[][][] longArray88 = org.apache.commons.lang3.ArrayUtils.add(longArray65, (int) '#', longArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[2, 35, 1]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[3, 8, -1]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[3, 8, -1]");
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[3, 8, -1]");
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[3, 8, -1]");
        org.junit.Assert.assertNotNull(longArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray86), "[3, 8, -1]");
        org.junit.Assert.assertNotNull(longArray87);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (byte) 10);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.clone(floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray4, (float) (byte) 0, 7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.lang.Long[] longArray3 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray7 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray11 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray15 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray19 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray20 = new java.lang.Long[][] { longArray3, longArray7, longArray11, longArray15, longArray19 };
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray20, longArray21);
        float[] floatArray23 = new float[] {};
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, 0.0f);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(floatArray23, (float) (byte) 1);
        float[] floatArray33 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.clone(floatArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray22, (java.lang.Object) floatArray35, (int) (short) 10);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.add(floatArray35, 0, (float) 2);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray40, (float) (byte) 100);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[2.0, 0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.lang.Object obj0 = null;
        int[] intArray7 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray7, (int) (short) 1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEquals(obj0, (java.lang.Object) intArray7);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.lang.Long[][][] longArray0 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray1 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray2 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray3 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray4 = new java.lang.Long[][][] {};
        java.lang.Long[][][][] longArray5 = new java.lang.Long[][][][] { longArray0, longArray1, longArray2, longArray3, longArray4 };
        java.lang.Long[][][][] longArray7 = org.apache.commons.lang3.ArrayUtils.remove(longArray5, 3);
        java.lang.Long[][][][] longArray10 = org.apache.commons.lang3.ArrayUtils.subarray(longArray5, (int) (short) 1, (int) ' ');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray10);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 0);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray1);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (byte) -1, (double) '#');
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) (byte) 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (short) 100, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        float[] floatArray5 = new float[] { 1, (-1), (byte) 0, '#', (-1) };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) (short) -1);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray8, (float) 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        short[] shortArray0 = new short[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) 0, (int) (byte) 0);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (int) ' ', (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (float) (byte) 0);
        org.junit.Assert.assertNull(floatArray2);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.lang.Character[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, '4');
        org.junit.Assert.assertNull(charArray2);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        long[] longArray8 = new long[] {};
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray9, 0L);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (long) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray9, 0L);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray9, (long) (short) 1);
        java.lang.Object[] objArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) '4', (int) (byte) 10);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray26);
        int int28 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray18, (java.lang.Object) byteArray26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { byteArray7, int17, objArray18 };
        long[] longArray31 = new long[] {};
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.clone(longArray31);
        java.lang.Long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toObject(longArray31);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(longArray31, (long) (byte) 1);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray18, (java.lang.Object) longArray31, (int) (short) -1);
        long[] longArray38 = new long[] {};
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.clone(longArray38);
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.add(longArray39, 0, (long) (byte) 1);
        long[] longArray43 = new long[] {};
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.clone(longArray43);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray44, 0L, (int) (byte) 0);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.addAll(longArray42, longArray44);
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.add(longArray48, (int) (short) 0, (long) (short) 0);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.clone(longArray48);
        long[] longArray53 = new long[] {};
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.clone(longArray53);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.add(longArray54, 0, (long) (byte) 1);
        long[] longArray58 = new long[] {};
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray59, 0L, (int) (byte) 0);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.addAll(longArray57, longArray59);
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.add(longArray63, (int) (short) 0, (long) (short) 0);
        long[] longArray67 = new long[] {};
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.clone(longArray67);
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.add(longArray68, 0, (long) (byte) 1);
        long[] longArray72 = new long[] {};
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.clone(longArray72);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray73, 0L, (int) (byte) 0);
        long[] longArray77 = org.apache.commons.lang3.ArrayUtils.addAll(longArray71, longArray73);
        long[] longArray78 = org.apache.commons.lang3.ArrayUtils.addAll(longArray63, longArray77);
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.addAll(longArray52, longArray78);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray31, longArray78);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[[], -1, []]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[1]");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[]");
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[1]");
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[]");
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[1]");
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[1, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray8);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.remove(floatArray11, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 10, (int) '4');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 0, (-1));
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray13, (byte) -1);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray21, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 1, -1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(intArray7, (int) (short) 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) 'a');
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (byte) 0, (-1));
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) ' ');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray7);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray8);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (short) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray11, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        float[] floatArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray11, 1, ' ');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray11, 1, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a ##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a ##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a,  , #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, #, 4, #]");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (int) (short) 1, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, (int) '#', (-1));
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.remove(floatArray2, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, 0.0f);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, 0.0f);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) (byte) -1);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, 0.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, 0.0f);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray10);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) floatArray20);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, ' ');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray22 = org.apache.commons.lang3.ArrayUtils.add(charArray19, 3, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4]");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, (int) (short) 1, 3);
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray24, 0, 0);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray24, (int) (short) 1, (int) 'a');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        double[] doubleArray10 = null;
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray9, (int) (short) 1, '4');
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, (int) (byte) 10, (int) (short) 0);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray4, (long) 0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray8 = org.apache.commons.lang3.ArrayUtils.remove(longArray4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, 100, (int) (short) -1);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray11);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray29, '4');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray33 = org.apache.commons.lang3.ArrayUtils.remove(charArray31, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4]");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray1, (byte) 1, (int) (short) -1);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray1, (byte) 0);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray8, (int) '4', (int) (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray1, byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) floatArray0);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) ' ');
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray6 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray7 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray8 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray9 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray10 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray11 = new java.lang.Integer[][] { intArray5, intArray6, intArray7, intArray8, intArray9, intArray10 };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray18, intArray25 };
        java.lang.Integer[][] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray11, intArray26);
        java.lang.Integer[][] intArray29 = org.apache.commons.lang3.ArrayUtils.remove(intArray26, 0);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray0, (java.lang.Object) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray2 = null;
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray1);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        boolean[] booleanArray7 = new boolean[] {};
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, false, 0);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray7, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray7);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 1L, 1.0f, 2, (short) 1 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray0, doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 2.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }
}

