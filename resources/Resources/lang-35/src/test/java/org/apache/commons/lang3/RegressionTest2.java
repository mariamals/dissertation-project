package org.apache.commons.lang3;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, '#');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, '#');
        char[] charArray22 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray23, '#');
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray23);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray23, ' ');
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray23);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray23, '#');
        char[] charArray37 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray37);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.addAll(charArray31, charArray37);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray37);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray16, charArray41);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, 4, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a#4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a#4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) (byte) 100);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray7, (float) 2, (int) (byte) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) 4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray6, 0);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray19, (int) (byte) -1);
        int[] intArray32 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str38 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray32, "");
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.subarray(intArray32, 10, 3);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.addAll(intArray19, intArray32);
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray43);
        java.lang.Integer[] intArray45 = org.apache.commons.lang3.ArrayUtils.toObject(intArray43);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{1,10,-1,0,1,35}" + "'", str38, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 0, 1, 35, 0, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray45);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "");
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray19, 10, 3);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray19);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray29, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray13, (long) (short) -1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray15);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        char[] charArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, ' ', (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        java.lang.Object[] objArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray30, (java.lang.Object) byteArray38);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray6, (java.lang.Object[]) byteArray42);
        int[][] intArray46 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (short) 100, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray46);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray34);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, false);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray23, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray23);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, false, (int) (byte) 100);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray46, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, false, true, false, true]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, false);
        org.junit.Assert.assertNull(booleanArray2);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray17, (byte) 0, 5);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (int) (short) 0, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0]");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Object[] objArray7 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[]) byteArray2);
        java.lang.Byte[] byteArray10 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray10, (java.lang.Object) 1L);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray10);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray10, (byte) 10);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap18 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray17);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, 10L);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray10, (java.lang.Object[]) longArray17);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray23);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(objMap18);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 0]");
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        float[] floatArray4 = new float[] { (short) 0, (-1), (byte) 10, 10.0f };
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, 5, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (int) ' ', (float) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, -1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        int[] intArray1 = new int[] { 10 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, (int) '4');
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (byte) 100);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 3, 10);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray9, 7);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = org.apache.commons.lang3.ArrayUtils.remove(intArray9, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '4');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray9, 1, 'a');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '4', 3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray0);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) (short) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) ' ', 1, (double) (short) -1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (short) -1, (int) (short) 1, (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray1);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (byte) -1, (double) '#');
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 1.0f);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (byte) -1, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray2);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0, (int) ' ');
        short[] shortArray20 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray20);
        short[] shortArray22 = null;
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray20, shortArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray20, (short) -1);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.remove(shortArray20, (int) (byte) 1);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) -1);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray29);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) 10);
        float[] floatArray35 = null;
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) '#');
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, 0.0f);
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, 0.0f);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(floatArray41, (float) (byte) 1);
        float[] floatArray51 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray41, floatArray51);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray52, (float) 'a');
        int[] intArray61 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.clone(intArray61);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.add(intArray61, (int) (byte) 0, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray73 = org.apache.commons.lang3.ArrayUtils.clone(intArray72);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.contains(intArray73, (int) (short) 0);
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.add(intArray73, (int) 'a');
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.clone(intArray73);
        int[] intArray79 = org.apache.commons.lang3.ArrayUtils.addAll(intArray61, intArray78);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray54, (java.lang.Object) intArray79);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray54);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 9, (int) (byte) -1, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 100);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray1, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        java.lang.Long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        int[] intArray15 = new int[] { 1, (-1), (short) -1 };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.add(intArray15, 0, (int) (byte) 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.subarray(intArray15, (int) '4', (int) '#');
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 10, (int) (short) 100);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray11, (java.lang.Object) intArray21);
        int[] intArray32 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) (byte) 0, (int) (byte) 1);
        int[] intArray43 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.clone(intArray43);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray32, intArray43);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.subarray(intArray32, (int) (short) -1, (int) (byte) -1);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray21, intArray48);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.lang.Integer[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (byte) 1);
        org.junit.Assert.assertNull(intArray2);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray14 = new double[] { 'a', 10, 1.0d };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray14, (double) (short) 0, (double) 10.0f);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 0.0d);
        double[] doubleArray23 = new double[] { 'a', 10, 1.0d };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray23, (double) (short) 0, (double) 10.0f);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray23, 0.0d);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray23);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray23, (double) (short) -1);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray10, (java.lang.Object) (short) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[97.0, 10.0, 1.0]");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray28, (float) ' ', (int) (short) 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray28);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray28, 0, 6);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray3);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        float[][] floatArray0 = null;
        float[] floatArray6 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray12 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray18 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray24 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray30 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray31 = new float[][] { floatArray6, floatArray12, floatArray18, floatArray24, floatArray30 };
        float[][] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray31);
        float[][] floatArray33 = org.apache.commons.lang3.ArrayUtils.clone(floatArray31);
        java.lang.Byte[] byteArray36 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray36, (java.lang.Object) 1L);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray36);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray36, (byte) 10);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap44 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray43);
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray43, 10L);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray36, (java.lang.Object[]) longArray43);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray43);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray33, (java.lang.Object) longArray43, (int) ' ');
        java.lang.String str52 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) ' ', "{1}");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(objMap44);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + " " + "'", str52, " ");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        java.lang.Class<?> wildcardClass15 = charArray6.getClass();
        double[] doubleArray17 = new double[] { 100.0d };
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) 10.0f);
        double[] doubleArray22 = new double[] { 3, 4 };
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray17, (double) 0.0f);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, 0.0d, 1, (double) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray17);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) wildcardClass15, (java.lang.Object) doubleArray17);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        double[] doubleArray3 = new double[] { 7, (short) -1, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 1, (int) '4', (double) 7);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 8, (int) '#', 1.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[7.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, 100, (int) (short) -1);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, '#');
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, '#', 3);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        java.lang.Character[] charArray33 = org.apache.commons.lang3.ArrayUtils.toObject(charArray32);
        java.lang.String str34 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray33);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray33, '4');
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{4}" + "'", str34, "{4}");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4]");
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 10);
        char[] charArray11 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray11);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray12, ' ');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (byte) 10, (java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 1]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.lang.Object obj0 = null;
        java.lang.String str2 = org.apache.commons.lang3.ArrayUtils.toString(obj0, "-1");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) 0L, 5);
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, (float) '4');
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) 100);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 1);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray16);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray16, 0, (short) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[10, -1, 100, -1, 0, 100, 1]");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) (short) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray12);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray28, (float) ' ', (int) (short) 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray28);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray28, (float) (byte) 10, 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.remove(byteArray8, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray14, 'a');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray6 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray7 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray8 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray9 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray10 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray11 = new java.lang.Integer[][] { intArray5, intArray6, intArray7, intArray8, intArray9, intArray10 };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray18, intArray25 };
        java.lang.Integer[][] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray11, intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray4, (java.lang.Object) intArray26);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray31 = org.apache.commons.lang3.ArrayUtils.add(longArray4, 3, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        short[] shortArray9 = new short[] { (byte) 1, (short) 0 };
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray4, (java.lang.Object) (short) 0);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, true);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, true]");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] {};
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13, (double) 2);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) 1L, 10);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray16);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 10.0f, 0, (double) 5);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        byte[] byteArray0 = new byte[] {};
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.remove(byteArray0, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.String[] strArray6 = new java.lang.String[] { "{}", "0", " ", "{}", "hi!", "1" };
        java.lang.Comparable[][] comparableArray8 = new java.lang.Comparable[1][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray9 = (java.lang.Comparable<java.lang.String>[][]) comparableArray8;
        strComparableArray9[0] = strArray6;
        java.lang.String[] strArray18 = new java.lang.String[] { "{}", "0", " ", "{}", "hi!", "1" };
        java.lang.Comparable[][] comparableArray20 = new java.lang.Comparable[1][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray21 = (java.lang.Comparable<java.lang.String>[][]) comparableArray20;
        strComparableArray21[0] = strArray18;
        java.lang.Comparable[][][] comparableArray25 = new java.lang.Comparable[2][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray26 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray25;
        strComparableArray26[0] = strComparableArray9;
        strComparableArray26[1] = strComparableArray21;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String>[][][] strComparableArray32 = org.apache.commons.lang3.ArrayUtils.remove(strComparableArray26, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(comparableArray8);
        org.junit.Assert.assertNotNull(strComparableArray9);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(comparableArray20);
        org.junit.Assert.assertNotNull(strComparableArray21);
        org.junit.Assert.assertNotNull(comparableArray25);
        org.junit.Assert.assertNotNull(strComparableArray26);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.lang.Object[] objArray0 = null;
        double[] doubleArray2 = new double[] { 100.0d };
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 10.0f);
        double[] doubleArray7 = new double[] { 3, 4 };
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        char[] charArray15 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray15, (int) (short) 0, '4');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, '4');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.add(charArray19, 1, 'a');
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray24);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray7, (java.lang.Object) charArray24);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray7);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray30, (double) 2);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray30);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray0, (java.lang.Object[]) doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray11);
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toObject(longArray11);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.subarray(longArray11, (int) (byte) 0, (int) (short) 100);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(longArray11, (long) '#');
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray21 = org.apache.commons.lang3.ArrayUtils.remove(longArray11, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        java.lang.Class<?> wildcardClass11 = booleanArray8.getClass();
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        short[] shortArray15 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0, 0);
        short[] shortArray24 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray8, (java.lang.Object) shortArray27);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8, 2);
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray41);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray41, (int) (byte) 0);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray8, (java.lang.Object) (byte) 0, 5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray0);
        java.util.Map<java.lang.Object, java.lang.Object> objMap5 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(objMap5);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.lang.Integer[] intArray0 = new java.lang.Integer[] {};
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) '#');
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (byte) 10);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) '#');
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (byte) 10);
        int[] intArray16 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, 10, 4);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray17, (int) (byte) 0, (int) (short) 100);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.addAll(intArray9, intArray17);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray17);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = org.apache.commons.lang3.ArrayUtils.remove(intArray4, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 100);
        org.junit.Assert.assertNull(longArray2);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) -1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray25, (long) 100);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray25, (int) (byte) 100, (int) '#');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        double[] doubleArray11 = new double[] { 'a', 10, 1.0d };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) 0, (double) 10.0f);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, 0.0d);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) int16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray18, 2);
        double[] doubleArray24 = new double[] { 'a', 10, 1.0d };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray24, (double) (short) 0, (double) 10.0f);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, 0.0d);
        double[] doubleArray33 = new double[] { 'a', 10, 1.0d };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, (double) (short) 0, (double) 10.0f);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray33, 0.0d);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray24, doubleArray33);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray39);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray39, (double) 10);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray39);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray39, (int) (byte) 100, 0);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray18, (java.lang.Object) (byte) 100);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        boolean[][] booleanArray0 = new boolean[][] {};
        boolean[][] booleanArray1 = new boolean[][] {};
        boolean[][][] booleanArray2 = new boolean[][][] { booleanArray0, booleanArray1 };
        boolean[][] booleanArray3 = new boolean[][] {};
        boolean[][] booleanArray4 = new boolean[][] {};
        boolean[][][] booleanArray5 = new boolean[][][] { booleanArray3, booleanArray4 };
        boolean[][] booleanArray6 = new boolean[][] {};
        boolean[][] booleanArray7 = new boolean[][] {};
        boolean[][][] booleanArray8 = new boolean[][][] { booleanArray6, booleanArray7 };
        boolean[][] booleanArray9 = new boolean[][] {};
        boolean[][] booleanArray10 = new boolean[][] {};
        boolean[][][] booleanArray11 = new boolean[][][] { booleanArray9, booleanArray10 };
        boolean[][][][] booleanArray12 = new boolean[][][][] { booleanArray2, booleanArray5, booleanArray8, booleanArray11 };
        boolean[][][][][] booleanArray13 = new boolean[][][][][] { booleanArray12 };
        boolean[][][][][] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) '#', 100);
        java.lang.Object[] objArray18 = null;
        char[][][][] charArray19 = new char[][][][] {};
        char[][][][] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray19);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray18, (java.lang.Object) charArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable[][][][] serializableArray22 = org.apache.commons.lang3.ArrayUtils.add((java.io.Serializable[][][][]) booleanArray16, (int) '4', (java.io.Serializable[][][]) charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        long[] longArray0 = null;
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, 0, (int) '4');
        org.junit.Assert.assertNull(longArray3);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.remove(shortArray0, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 4);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray0);
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray0);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(byteArray0, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, 0.0d);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 0, 10);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) '4', (int) (byte) 10);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray20);
        int int22 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray20);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (byte) 100);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray27);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.clone(byteArray28);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.add(byteArray29, 0, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 100]");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        short[] shortArray5 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.clone(shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray6, (short) (byte) 100);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (short) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) 0);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, -1, -1, 100, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 10);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) (short) 100, (int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray10 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray10);
        short[] shortArray12 = null;
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray10, shortArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray7, (java.lang.Object) shortArray12, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray7);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray5, (java.lang.Object) strArray7);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray2, (java.lang.Object[]) byteArray5);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray0, (java.lang.Object) byteArray2);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) (short) -1, (int) (short) 0);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) (byte) 10, 2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        short[] shortArray9 = new short[] { (byte) 1, (short) 0 };
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray4, (java.lang.Object) (short) 0);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, true);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray21, 7, 7);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray21, false, 0);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray6, (double) 3);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray12);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray12, byteArray16);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(byteArray12, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29, (double) 2);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray32, (double) 'a');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10, (short) -1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.remove(shortArray9, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, -1, 10, -1, 0, 0]");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        double[] doubleArray12 = null;
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray12);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray12, (double) 8);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(doubleArray15);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray17, '4');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray17, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        float[] floatArray0 = null;
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, 1, 6);
        org.junit.Assert.assertNull(floatArray3);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.remove(byteArray0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = org.apache.commons.lang3.ArrayUtils.remove(intArray6, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        short[] shortArray12 = new short[] { (byte) 1, (short) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) (byte) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray12, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray12, (short) 100);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray12, (short) (byte) -1);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) int22, 3);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, 3);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 1, 10, 10, 1]");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        java.lang.Long[][] longArray1 = new java.lang.Long[][] { longArray0 };
        java.lang.Long[] longArray2 = new java.lang.Long[] {};
        java.lang.Long[][] longArray3 = new java.lang.Long[][] { longArray2 };
        java.lang.Long[][][] longArray4 = new java.lang.Long[][][] { longArray1, longArray3 };
        float[] floatArray5 = new float[] {};
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, 0.0f);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray5, (float) (byte) 1);
        float[] floatArray15 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray15);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.clone(floatArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray17);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (int) (byte) 1, (float) 100L);
        java.lang.Long[][][] longArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray4, (java.lang.Object) floatArray21);
        java.lang.Long[][][] longArray23 = org.apache.commons.lang3.ArrayUtils.toArray(longArray4);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray23);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray12);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray12, byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.remove(byteArray12, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 1]");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10, (short) -1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray11, (short) (byte) -1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray11, (short) 0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 10, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray33 = new boolean[] {};
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, 0);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray43);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray32);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray32, 5, 0);
        java.lang.Boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray32);
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray51, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, false, false, true]");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) (byte) -1);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray16);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 1, 0, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (byte) -1);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray6);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.String[] strArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray4 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray6 = null;
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray1, (java.lang.Object) shortArray6, 0);
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray12, (java.lang.Object) 1L);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray1, (java.lang.Object) byteArray16, (int) (byte) 1);
        java.lang.Short[] shortArray25 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray25, (short) 100);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray27, (short) 1);
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray27);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        short[] shortArray34 = new short[] { (byte) 1, (short) 0 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray34, (short) (byte) 10);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray34, (short) 0);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.add(shortArray38, (short) (byte) 1);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray31, shortArray38);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray31, (short) 100, 3);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray1, (java.lang.Object) int44);
        java.lang.CharSequence[] charSequenceArray48 = org.apache.commons.lang3.ArrayUtils.add((java.lang.CharSequence[]) strArray1, (int) (byte) 0, (java.lang.CharSequence) "{a,#,#,4,#}");
        java.lang.String[] strArray49 = org.apache.commons.lang3.ArrayUtils.addAll(strArray0, strArray1);
        java.lang.CharSequence[] charSequenceArray51 = org.apache.commons.lang3.ArrayUtils.add((java.lang.CharSequence[]) strArray49, (java.lang.CharSequence) "{1}");
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(charSequenceArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(charSequenceArray51);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) 100, (int) (short) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray5, (short) 10, 0);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray5, 7, (int) '#');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(shortArray17, (short) 10);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.lang.Object[] objArray0 = null;
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.clone(intArray9);
        java.lang.Integer[] intArray11 = org.apache.commons.lang3.ArrayUtils.toObject(intArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) intArray11);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, (-1), (int) 'a');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray10, '#');
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray12);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray9, (int) (short) 1, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) (byte) 10, (int) '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a4##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a4##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, 4, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray1, (byte) 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.clone(byteArray1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 0);
        java.lang.Byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 1L);
        java.lang.String str16 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray11);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{0.0,0.0,100.0,-1.0,35.0}" + "'", str16, "{0.0,0.0,100.0,-1.0,35.0}");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray11);
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toObject(longArray11);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray17 = org.apache.commons.lang3.ArrayUtils.add(longArray11, (int) 'a', (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longArray14);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        int[] intArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, (int) '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, '4');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray7, (int) '#', '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , #, #, 4]");
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray6, (double) (-1.0f));
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) (byte) 100, 4);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.add(doubleArray18, (int) '4', 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[4.0, 3.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (int) (short) 0, (double) (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) 100L, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, (long) (short) -1);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) (byte) -1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) 0, 0);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray10, (byte) 0, (int) (byte) 100);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.clone(byteArray10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray10, 100, (int) (short) 100);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray10);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) -1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray25, (long) 100);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.add(longArray25, (long) 2);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) 100, (int) (byte) 100);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) 4, 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[1, 1, 2]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray7, 10, 4);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) (byte) 0, (int) (short) 100);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray14, (int) (byte) 1, 6);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray14, (int) (byte) 10, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        char[] charArray0 = null;
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.subarray(charArray0, (int) '4', (int) ' ');
        org.junit.Assert.assertNull(charArray3);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray13, (byte) 1);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) ' ', (int) (short) 0);
        java.lang.Object[] objArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray19 = new byte[] { (byte) 100 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, (int) '4', (int) (byte) 10);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray25);
        int int27 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray17, (java.lang.Object) byteArray25);
        java.lang.Byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray25);
        java.lang.Byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray25);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(byteArray25, (byte) 1);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.add(byteArray25, (byte) 100);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray12, (java.lang.Object) (byte) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        long[] longArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray0, (long) 3, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        int[] intArray2 = new int[] { (short) 10, 2 };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray2, 1, (int) (short) 10);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.subarray(intArray2, (int) '#', (int) (short) 100);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray2);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.remove(intArray2, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[10, 2]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10, 2]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        long[] longArray0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.add(longArray2, 0, (long) (byte) 1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray7, 0L, (int) (byte) 0);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.addAll(longArray5, longArray7);
        java.lang.Long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toObject(longArray5);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray12, (long) '#');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray0, longArray14);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        short[] shortArray12 = new short[] { (byte) 1, (short) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) (byte) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray12, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray12, (short) 100);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray12, (short) (byte) -1);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) int22, 3);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, 3);
        java.lang.Integer[] intArray27 = org.apache.commons.lang3.ArrayUtils.toObject(intArray26);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = null;
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray5);
        long[] longArray7 = new long[] {};
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.subarray(longArray7, (int) (byte) 10, (int) (short) 0);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray11, (long) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray13);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.subarray(longArray14, (int) (byte) 1, 7);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.subarray(longArray14, (int) '4', (int) ' ');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.Long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) ' ');
        org.junit.Assert.assertNull(longArray2);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray22 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0, 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (short) 100, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray29);
        float[] floatArray31 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 0.0f);
        float[] floatArray34 = new float[] {};
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray34, 0.0f);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, (float) (byte) -1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray34);
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, 0.0f);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray34, floatArray43);
        java.lang.Float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray34);
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray45, (float) (-1));
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        java.lang.Long[] longArray16 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) 4);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) longArray18, (int) (byte) 10);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        java.lang.Short[] shortArray28 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray28, (short) 100);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) 1);
        java.lang.Short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray33, (short) (byte) 100);
        long[] longArray36 = new long[] {};
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        java.lang.Long[] longArray38 = org.apache.commons.lang3.ArrayUtils.toObject(longArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray33, (java.lang.Object[]) longArray38);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray38, 0L);
        long[] longArray42 = new long[] {};
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.clone(longArray42);
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.add(longArray43, 0, (long) (byte) 1);
        long[] longArray47 = new long[] {};
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray48, 0L, (int) (byte) 0);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.addAll(longArray46, longArray48);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray52, (long) '#', 0);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.addAll(longArray41, longArray52);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray56);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[100, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[1]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[100, 10, 0, 1, 1]");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 10.0f, (-1), 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray10, true, 10);
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray21, true);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, false);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray23);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray26, false, (int) (byte) 10);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray26, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, false, true, true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray14 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.clone(shortArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 10);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (byte) 100, (int) '4');
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray26 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        short[] shortArray28 = null;
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) -1);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.remove(shortArray26, (int) (byte) 1);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.add(shortArray26, (short) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.remove(shortArray35, 1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray17, shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (short) 0, 0);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.clone(shortArray17);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        double[] doubleArray13 = new double[] { 'a', 10, 1.0d };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray13, (double) (short) 0, (double) 10.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray13, 0.0d);
        java.lang.Double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray13);
        java.lang.Double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray13);
        double[] doubleArray24 = new double[] { 'a', 10, 1.0d };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray24, (double) (short) 0, (double) 10.0f);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, 0.0d);
        double[] doubleArray33 = new double[] { 'a', 10, 1.0d };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, (double) (short) 0, (double) 10.0f);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray33, 0.0d);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray24, doubleArray33);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray33, (double) (short) -1);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray20, (java.lang.Object) (short) -1);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray6, (java.lang.Object) doubleArray20, 0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) -1, (int) (short) 0);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (short) 1);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) 1);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35, 1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35, 1]");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 0);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        short[] shortArray15 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0, 0);
        short[] shortArray24 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray8, (java.lang.Object) shortArray27);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8, 2);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        int[] intArray37 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.clone(intArray37);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.clone(intArray37);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.subarray(intArray37, 5, (int) '4');
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray33, intArray37);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, 'a');
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.lang.Integer[] intArray0 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray1 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray2 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray3 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray4 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray6 = new java.lang.Integer[][] { intArray0, intArray1, intArray2, intArray3, intArray4, intArray5 };
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray20 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray21 = new java.lang.Integer[][] { intArray13, intArray20 };
        java.lang.Integer[][] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray21);
        java.lang.Integer[][] intArray24 = org.apache.commons.lang3.ArrayUtils.remove(intArray6, 4);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) ' ', (int) (short) -1);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray15);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        char[] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray2 = org.apache.commons.lang3.ArrayUtils.remove(charArray0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        long[] longArray17 = null;
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray17, 100L);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray20);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.subarray(longArray10, 5, 0);
        long[] longArray25 = new long[] {};
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray26, 0, (long) (byte) 1);
        long[] longArray30 = new long[] {};
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray30);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray31, 0L, (int) (byte) 0);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.addAll(longArray29, longArray31);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.add(longArray35, (int) (short) 0, (long) (short) 0);
        long[] longArray39 = new long[] {};
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.clone(longArray39);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.add(longArray40, 0, (long) (byte) 1);
        long[] longArray44 = new long[] {};
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.clone(longArray44);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray45, 0L, (int) (byte) 0);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.addAll(longArray43, longArray45);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray35, longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray10, longArray49);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray53 = org.apache.commons.lang3.ArrayUtils.remove(longArray49, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[100]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[1, 100]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) (byte) -1);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray1, floatArray4);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray1, 0.0f, (-1));
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray1);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 5, (float) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray16);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, (int) (short) 0, 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.add(byteArray27, (byte) 10);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.add(byteArray29, (byte) 1);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray31, (byte) 10, (int) '4');
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray31, (byte) 0, (-1));
        java.lang.String[] strArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray41 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray41);
        short[] shortArray43 = null;
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray41, shortArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray38, (java.lang.Object) shortArray43, 0);
        java.lang.Byte[] byteArray49 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray49);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray49, (java.lang.Object) 1L);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray49);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray38, (java.lang.Object) byteArray53, (int) (byte) 1);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray53, (byte) 100);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray31, byteArray53);
        java.lang.Object[] objArray59 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray61 = new byte[] { (byte) 100 };
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray61, (int) '4', (int) (byte) 10);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray61, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray67);
        int int69 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray67);
        int int70 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray59, (java.lang.Object) byteArray67);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray67, (byte) 10);
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray58, byteArray67);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray16, byteArray67);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 1, 0, 1]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 1, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, 0.0d);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.lang.Byte[][] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        java.lang.Byte[][] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.add(byteArray4, (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0]");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 1L);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.clone(floatArray11);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (int) 'a', (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 0.0, 100.0, -1.0, 35.0, 0.0]");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.lang.Object obj0 = null;
        char[] charArray5 = new char[] { '4', '4', '4', 'a' };
        char[] charArray10 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray11 = new char[][] { charArray5, charArray10 };
        char[] charArray16 = new char[] { '4', '4', '4', 'a' };
        char[] charArray21 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray22 = new char[][] { charArray16, charArray21 };
        char[] charArray27 = new char[] { '4', '4', '4', 'a' };
        char[] charArray32 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray33 = new char[][] { charArray27, charArray32 };
        char[][][] charArray34 = new char[][][] { charArray11, charArray22, charArray33 };
        char[][][] charArray35 = org.apache.commons.lang3.ArrayUtils.toArray(charArray34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameType(obj0, (java.lang.Object) charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertNotNull(charArray35);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        double[] doubleArray3 = new double[] { 100.0d };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        double[] doubleArray8 = new double[] { 3, 4 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f, 0, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray8);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray0, (double) 3);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) -1);
        java.lang.Short[] shortArray13 = new java.lang.Short[] {};
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray13, (short) (byte) 0);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.clone(shortArray15);
        java.lang.Short[] shortArray23 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray23, (short) 100);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray25, (short) 1);
        java.lang.Short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray28);
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray15, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray2, shortArray29);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 0, -1, 100, -1, 0, 100, 1]");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray1 = new boolean[] {};
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, false, 0);
        java.lang.Boolean[] booleanArray9 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray12 = new boolean[] {};
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false, 0);
        java.lang.Boolean[] booleanArray20 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray22);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray24);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray24);
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray24, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray24);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray24, false, (int) (byte) 100);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray24);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray24, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, false, true, false]");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, (long) 7);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[7]");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        float[] floatArray4 = new float[] { 0L, (byte) 100, '4', (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray4, (float) 'a', 5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray4, 0.0f);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[0.0, 100.0, 52.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        boolean[] booleanArray25 = null;
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.add(booleanArray25, true);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray27);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { true, true, true, false, false, true };
        java.lang.Boolean[] booleanArray13 = new java.lang.Boolean[] { true, true, true, false, false, true };
        java.lang.Boolean[] booleanArray20 = new java.lang.Boolean[] { true, true, true, false, false, true };
        java.lang.Boolean[][] booleanArray21 = new java.lang.Boolean[][] { booleanArray6, booleanArray13, booleanArray20 };
        java.lang.Boolean[][][] booleanArray22 = new java.lang.Boolean[][][] { booleanArray21 };
        java.lang.Boolean[] booleanArray26 = new java.lang.Boolean[] { false, true, false };
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, true, false };
        java.lang.Boolean[] booleanArray34 = new java.lang.Boolean[] { false, true, false };
        java.lang.Boolean[] booleanArray38 = new java.lang.Boolean[] { false, true, false };
        java.lang.Boolean[] booleanArray42 = new java.lang.Boolean[] { false, true, false };
        java.lang.Boolean[][] booleanArray43 = new java.lang.Boolean[][] { booleanArray26, booleanArray30, booleanArray34, booleanArray38, booleanArray42 };
        java.lang.Boolean[][][] booleanArray44 = org.apache.commons.lang3.ArrayUtils.add(booleanArray22, booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray44);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.lang.Integer[] intArray0 = new java.lang.Integer[] {};
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) '#');
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (byte) 10);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, 0, 10);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        byte[] byteArray0 = null;
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, 0, (byte) 100);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5, (byte) 0);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray3, byteArray7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.toObject(charArray12);
        java.lang.Character[] charArray14 = org.apache.commons.lang3.ArrayUtils.toObject(charArray12);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray14);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) '4', (int) (byte) 10);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray14);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, (int) (short) 1, (byte) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray14);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.remove(byteArray8, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(intArray6, 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray6, (double) (short) 10);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray6, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[3.0, 4.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[3.0, 4.0]");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) -1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray25, (long) 100);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray25);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray5);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray5);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray7, true, (int) 'a');
        boolean[] booleanArray11 = null;
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray11);
        boolean[] booleanArray15 = new boolean[] {};
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray15, false, 0);
        java.lang.Boolean[] booleanArray23 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray23, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray25);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray15, booleanArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray27, true);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray27);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray31, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, false, true, false, false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        short[] shortArray14 = new short[] { (byte) 1, (short) 0 };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray14, (short) (byte) 10);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray14, (short) 0);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, (short) (byte) 1);
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray18);
        java.lang.Short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray18);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray18);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray18, (short) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 4, 3 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, 1);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, 2);
        java.lang.Object obj7 = null;
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray2, obj7);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, (int) (byte) 100);
        boolean[] booleanArray11 = null;
        boolean[] booleanArray12 = new boolean[] {};
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false, 0);
        java.lang.Boolean[] booleanArray20 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray22);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray22);
        java.lang.Boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray12);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray25, true);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray27);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.add(booleanArray27, true);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray2, (java.lang.Object) booleanArray11);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[4, 3]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[4, 3]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[4, 3]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 6, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) 10);
        float[] floatArray35 = null;
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) '#');
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, 0.0f);
        float[] floatArray44 = new float[] { (-1.0f), '4', 10.0f };
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray44);
        boolean[] booleanArray46 = new boolean[] {};
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray46, false, 0);
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray54, false);
        boolean[] booleanArray57 = new boolean[] {};
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray57, false, 0);
        java.lang.Boolean[] booleanArray65 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray65, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray67);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray57, booleanArray67);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray56, booleanArray69);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray46, booleanArray69);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray69, true);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray10, (java.lang.Object) int73);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 52.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, 100, (int) (short) -1);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, '#');
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, ' ', (int) (byte) 100);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = null;
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray5);
        long[] longArray7 = new long[] {};
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.subarray(longArray7, (int) (byte) 10, (int) (short) 0);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray11, (long) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray14, (long) (byte) 1, 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        int[] intArray16 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.add(intArray16, (int) (byte) 0, (int) (byte) 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray16, (int) (byte) -1);
        int[] intArray29 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray29);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray29, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str35 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray29, "");
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.subarray(intArray29, 10, 3);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.addAll(intArray16, intArray29);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray39);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.clone(intArray39);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.addAll(intArray9, intArray41);
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.subarray(intArray42, (int) 'a', 6);
        java.lang.Integer[] intArray46 = org.apache.commons.lang3.ArrayUtils.toObject(intArray45);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{1,10,-1,0,1,35}" + "'", str35, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 1, 10, 10, 1, 1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray46);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray7, longArray14);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray14, (long) (byte) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[100]");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, 0.0f);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 2);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, 1.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[0.0]");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, (int) ' ', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray1, (byte) 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.clone(byteArray1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, -1]");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { 100.0d };
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 10.0f);
        double[] doubleArray7 = new double[] { 3, 4 };
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        char[] charArray15 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray15, (int) (short) 0, '4');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, '4');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.add(charArray19, 1, 'a');
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray24);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray7, (java.lang.Object) charArray24);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray7);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray0, doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 10);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap10 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray9);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, 10L);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray2, (java.lang.Object[]) longArray9);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(objMap10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray0, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray13, (long) (short) -1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.subarray(longArray15, (int) 'a', 4);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray20 = org.apache.commons.lang3.ArrayUtils.remove(longArray18, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) 7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        float[] floatArray5 = new float[] { (byte) 0, 0.0f, (byte) -1, 100.0f, 10 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(floatArray5, 100.0f);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (byte) 1);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 0.0, -1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0, 0.0, -1.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        byte[] byteArray0 = null;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.clone(byteArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray5);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (int) (short) 10, (short) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray34);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, false);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray23, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray23);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, false, (int) (byte) 100);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray48, (int) (short) -1, (int) ' ');
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray51);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.clone(byteArray51);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (byte) 100, (java.lang.Object) byteArray53);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, 'a');
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.add(charArray25, 0, ' ');
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray28, 'a', (int) (short) 100);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, '#', 4);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.add(charArray28, 'a');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(charArray28, '#');
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " 4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " 4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " 4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " 4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , 4, a]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.lang.Float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (short) 0);
        org.junit.Assert.assertNull(floatArray2);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        boolean[] booleanArray5 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray11 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray18 = new boolean[][] { booleanArray5, booleanArray11, booleanArray17 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        double[] doubleArray30 = new double[] { 'a', 10, 1.0d };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) 0, (double) 10.0f);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, 0.0d);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray25, (java.lang.Object) int35);
        boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, (java.lang.Object) intArray25);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.clone(intArray38);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.remove(intArray38, 5);
        int[] intArray48 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.clone(intArray48);
        int[] intArray52 = org.apache.commons.lang3.ArrayUtils.add(intArray48, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str54 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray48, "");
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.subarray(intArray48, 10, 3);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray48, 10);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray48);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray38, intArray48);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 1, 10, 10]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[35, 1, 0, -1, 10, 1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{1,10,-1,0,1,35}" + "'", str54, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray1, 0L, (int) (byte) 0);
        java.lang.Long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toObject(longArray1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        java.lang.Integer[] intArray10 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(intArray6, 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.lang.Byte[] byteArray3 = new java.lang.Byte[] { (byte) 100, (byte) 1, (byte) 1 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) -1);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 100);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) (byte) 0, 100);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray3, (java.lang.Object) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[][] charSequenceArray12 = new java.lang.CharSequence[][] { charSequenceArray2, charSequenceArray5, charSequenceArray8, charSequenceArray11 };
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray18 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[][] charSequenceArray25 = new java.lang.CharSequence[][] { charSequenceArray15, charSequenceArray18, charSequenceArray21, charSequenceArray24 };
        java.lang.CharSequence[][][] charSequenceArray26 = new java.lang.CharSequence[][][] { charSequenceArray12, charSequenceArray25 };
        java.lang.CharSequence[][][] charSequenceArray29 = org.apache.commons.lang3.ArrayUtils.subarray(charSequenceArray26, (int) (short) 10, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence[][][] charSequenceArray31 = org.apache.commons.lang3.ArrayUtils.remove(charSequenceArray29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertNotNull(charSequenceArray18);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(charSequenceArray25);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertNotNull(charSequenceArray29);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        boolean[] booleanArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, '#');
        char[] charArray8 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '#');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray9, ' ');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray9, '#');
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.addAll(charArray2, charArray9);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray25 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray25);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.add(charArray25, (int) (short) 0, '4');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray25, 2, '#');
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray32, '#');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray32);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray32, '#');
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "#a##4#a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "#a##4#a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, a, #, #, 4, #, a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str12 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray6, "");
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, 10, 3);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray6, 10);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray6);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray6, (-1));
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[35, 1, 0, -1, 10, 1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{1,10,-1,0,1,35}" + "'", str12, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[35, 1, 0, 10, 1]");
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[][] byteArray2 = new byte[][] { byteArray1 };
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[][] byteArray5 = new byte[][] { byteArray4 };
        byte[] byteArray7 = new byte[] { (byte) 100 };
        byte[][] byteArray8 = new byte[][] { byteArray7 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        byte[][] byteArray11 = new byte[][] { byteArray10 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[][] byteArray14 = new byte[][] { byteArray13 };
        byte[][][] byteArray15 = new byte[][][] { byteArray2, byteArray5, byteArray8, byteArray11, byteArray14 };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray15);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) (byte) 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.remove(intArray7, 4);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray11, (int) (byte) 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray11, 2, (int) 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray16, 6, 10);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 97, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.lang.Long[] longArray4 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) 4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.add(longArray6, (long) '#');
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray6, (long) (-1));
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray6);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, (long) 6, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray16 = org.apache.commons.lang3.ArrayUtils.remove(longArray6, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100, 10, 0, 1, 35]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[100, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = new double[] { 100.0d };
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) 10.0f);
        double[] doubleArray14 = new double[] { 3, 4 };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 10.0f, 0, 0.0d);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, 10.0d, 3, 0.0d);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, 0.0d, 1, (double) (byte) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray14);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        double[][][][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[][][][] doubleArray2 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        boolean[] booleanArray7 = new boolean[] {};
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, false, 0);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray7, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray7);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) (byte) 10, (int) (byte) 1);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[]");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, 100L);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray2, (-1L));
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray5, (long) 1);
        java.lang.Long[] longArray11 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray15 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray19 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray23 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray27 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray28 = new java.lang.Long[][] { longArray11, longArray15, longArray19, longArray23, longArray27 };
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray30 = org.apache.commons.lang3.ArrayUtils.add(longArray28, longArray29);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray31, (long) 8);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray5, longArray31);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[100]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[100]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray5, (byte) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray5, (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 10, (int) '4');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 0, (-1));
        java.lang.String[] strArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray23 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        short[] shortArray25 = null;
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray20, (java.lang.Object) shortArray25, 0);
        java.lang.Byte[] byteArray31 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray31, (java.lang.Object) 1L);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray20, (java.lang.Object) byteArray35, (int) (byte) 1);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray35, (byte) 100);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray13, byteArray35);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray35, (byte) 10, 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        java.io.Serializable[] serializableArray15 = org.apache.commons.lang3.ArrayUtils.remove((java.io.Serializable[]) booleanArray13, 0);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(serializableArray15);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) 10);
        float[] floatArray35 = null;
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray36, 0.0f);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.clone(floatArray38);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.add(floatArray38, (int) (byte) 10, (float) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray12, (float) 10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray18, (float) 0L, (-1));
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray18);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[35.0, -1.0, 100.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(intArray7, (int) (short) 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) 'a');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray7);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) ' ');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[35, 1, 0, -1, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) (byte) 1);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray21, false);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true, (int) (byte) 10);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray23, true);
        float[][] floatArray29 = null;
        float[] floatArray35 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray41 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray47 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray53 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray59 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray60 = new float[][] { floatArray35, floatArray41, floatArray47, floatArray53, floatArray59 };
        float[][] floatArray61 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray29, floatArray60);
        float[][] floatArray62 = org.apache.commons.lang3.ArrayUtils.clone(floatArray60);
        java.lang.Boolean[] booleanArray67 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray67, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray69);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray62, (java.lang.Object) booleanArray69);
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray69);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray69);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray69);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray12, (java.lang.Object) booleanArray69);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 0, 1]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[false, false, true, false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray8);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (short) 1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) 'a');
        int[] intArray20 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray20, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str26 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray20, "");
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.subarray(intArray20, 10, 3);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.remove(intArray20, (int) (byte) 0);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray20);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{1,10,-1,0,1,35}" + "'", str26, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        boolean[] booleanArray5 = new boolean[] { true, false, true, true, false };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray5, false);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray5, true, 7);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[true, false, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, 8, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 0.0d, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = null;
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray5);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray5, 10L);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNull(longArray8);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, '#');
        char[] charArray20 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray20);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray20);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray20);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray23);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#4##a#4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#4##a#4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, 4, #, #, a, #, 4, #, a]");
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.lang.Double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 1L);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 2, (int) (byte) 10, 0.0d);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 10L, (double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.subarray(charArray6, 10, 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray21, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) -1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[]");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, 7, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 0, (int) (short) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray23, (byte) -1);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray26, (int) (short) 10, 7);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray29, (byte) 0, (int) (short) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 0, 10, 0, 0, 100, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, false);
        boolean[] booleanArray16 = new boolean[] {};
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, false, 0);
        java.lang.Boolean[] booleanArray24 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray24, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray26);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray16, booleanArray26);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray26, true, 10);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray15, booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray1, (double) (short) 10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray12);
        double[] doubleArray15 = new double[] { 100.0d };
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray15, (double) 10.0f);
        double[] doubleArray20 = new double[] { 3, 4 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray15, doubleArray20);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) 10.0f, 0, 0.0d);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray20);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray12, (double) 5);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (short) 10, (java.lang.Object) doubleArray29);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray29, 0.0d, (double) (short) -1);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray29, (double) (-1.0f));
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (short) 100);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray0, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray8);
        java.lang.Integer[] intArray10 = org.apache.commons.lang3.ArrayUtils.toObject(intArray9);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray9, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 1, 10, 10, 1, 1]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, false);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray11, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, true]");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        boolean[] booleanArray5 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray11 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray18 = new boolean[][] { booleanArray5, booleanArray11, booleanArray17 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        double[] doubleArray30 = new double[] { 'a', 10, 1.0d };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) 0, (double) 10.0f);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, 0.0d);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray25, (java.lang.Object) int35);
        boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, (java.lang.Object) intArray25);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25, (int) (short) -1);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray41);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, 10, 1, 0, 0]");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray7, 10, 4);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) (byte) 0, (int) (short) 100);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray7, 3);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (short) 100);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray7);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray14 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.clone(shortArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 10);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (byte) 100, (int) '4');
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.remove(shortArray17, 1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.add(shortArray25, (int) (byte) -1, (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, -1, 0, 100, -1, 100, -1, -1, 10]");
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray18, ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray23);
        char[] charArray30 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.clone(charArray30);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.add(charArray30, (int) (short) 0, '4');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.add(charArray30, 2, '#');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray37);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(charArray6, ' ');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        java.lang.Long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) (byte) -1, 0);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, 3, 0);
        long[] longArray9 = new long[] {};
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, 0, (long) (byte) 1);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray15, 0L, (int) (byte) 0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray15);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray19, (int) (short) 0, (long) (short) 0);
        long[] longArray23 = new long[] {};
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.clone(longArray23);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.add(longArray24, 0, (long) (byte) 1);
        long[] longArray28 = new long[] {};
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray29, 0L, (int) (byte) 0);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray27, longArray29);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.add(longArray33, (int) (short) 0, (long) (short) 0);
        long[] longArray37 = new long[] {};
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.clone(longArray37);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.add(longArray38, 0, (long) (byte) 1);
        long[] longArray42 = new long[] {};
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.clone(longArray42);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray43, 0L, (int) (byte) 0);
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.addAll(longArray41, longArray43);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.addAll(longArray33, longArray47);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray48, (long) (byte) -1);
        long[] longArray51 = null;
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.addAll(longArray48, longArray51);
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.addAll(longArray19, longArray52);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray52);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[1, 1, 1]");
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[]");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray7);
        int[] intArray15 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) 0, (int) (byte) 1);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray15, (int) (byte) -1);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray8, intArray15);
        int[] intArray29 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray29);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray29, (int) (byte) 0, (int) (byte) 1);
        int[] intArray40 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.clone(intArray40);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray40);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray29, (int) (short) 1, 3);
        java.lang.Integer[] intArray46 = org.apache.commons.lang3.ArrayUtils.toObject(intArray29);
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray15, (java.lang.Object) boolean48);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, -1, -1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        int[] intArray1 = new int[] { 10 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, (int) '4');
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (byte) 100);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 3, 10);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.subarray(intArray9, 0, 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[10]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29, (double) 2);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray32, (double) (short) 1);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray32, 1.0d, (double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray6, (double) (-1.0f));
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) (byte) 100, 4);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) (byte) 10, (int) (short) -1, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.Object obj0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray1, (float) (byte) 1);
        float[] floatArray11 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray12, (float) 'a');
        int[] intArray21 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.clone(intArray21);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray21, (int) (byte) 0, (int) (byte) 1);
        int[] intArray32 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(intArray33, (int) (short) 0);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.add(intArray33, (int) 'a');
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.clone(intArray33);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.addAll(intArray21, intArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray14, (java.lang.Object) intArray39);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.clone(floatArray14);
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, (float) (byte) 0);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray41, (float) (-1), 0);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray41, (float) (byte) 1, 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameType(obj0, (java.lang.Object) floatArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 0.0, 100.0, -1.0, 35.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 0);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        char[] charArray0 = null;
        org.apache.commons.lang3.ArrayUtils.reverse(charArray0);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray1, (long) '#');
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray3, (long) '4');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray18, ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray23);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray23);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray25, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #, a]");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 10);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) (byte) 0, 0);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 10, (int) '4');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.lang.Object[] objArray0 = null;
        float[][] floatArray1 = null;
        float[] floatArray7 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray13 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray19 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray25 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray31 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray32 = new float[][] { floatArray7, floatArray13, floatArray19, floatArray25, floatArray31 };
        float[][] floatArray33 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray32);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) floatArray1, 9);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        int[] intArray3 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        java.lang.Integer[] intArray11 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray11);
        java.lang.Integer[] intArray19 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray20, (-1));
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray12, intArray20);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.subarray(intArray12, 0, 10);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray12);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray28);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[52, 100, 10, 0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        char[][][][] charArray0 = new char[][][][] {};
        char[][][][] charArray1 = org.apache.commons.lang3.ArrayUtils.clone(charArray0);
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray11 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, 1);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, 7, (-1));
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray18, (short) 0);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = null;
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray5);
        long[] longArray7 = new long[] {};
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.subarray(longArray7, (int) (byte) 10, (int) (short) 0);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray11, (long) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray13);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.subarray(longArray14, (int) (byte) 1, 7);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray17, (long) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        double[] doubleArray3 = new double[] { 100.0d };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        double[] doubleArray8 = new double[] { 3, 4 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f, 0, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray8);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray0, (double) 5);
        double[] doubleArray21 = new double[] { 'a', 10, 1.0d };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray21, (double) (short) 0, (double) 10.0f);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, 0.0d, (double) (byte) 10);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, (double) 1);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray17, doubleArray21);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) (short) 1, (int) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray0);
        boolean[] booleanArray14 = new boolean[] {};
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray14);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray14, false);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, false, 0);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray14);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray14, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, (int) (byte) 0, true);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[true]");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.remove(byteArray6, (int) (short) 1);
        long[] longArray16 = new long[] {};
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.add(longArray17, 0, (long) (byte) 1);
        long[] longArray21 = new long[] {};
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.clone(longArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray22, 0L, (int) (byte) 0);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.addAll(longArray20, longArray22);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (int) (short) 0, (long) (short) 0);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray26);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, 1L);
        java.lang.Long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray6, (java.lang.Object) longArray26);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[1]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray6, (double) (-1.0f));
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray6, (double) 6, (int) (byte) 0, (double) '4');
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray6, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.lang.Character[] charArray3 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray7 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray11 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray15 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[][] charArray16 = new java.lang.Character[][] { charArray3, charArray7, charArray11, charArray15 };
        java.lang.Character[] charArray20 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray24 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray28 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray32 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[][] charArray33 = new java.lang.Character[][] { charArray20, charArray24, charArray28, charArray32 };
        java.lang.Character[] charArray37 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray41 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray45 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray49 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[][] charArray50 = new java.lang.Character[][] { charArray37, charArray41, charArray45, charArray49 };
        java.lang.Character[] charArray54 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray58 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray62 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray66 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[][] charArray67 = new java.lang.Character[][] { charArray54, charArray58, charArray62, charArray66 };
        java.lang.Character[] charArray71 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray75 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray79 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[] charArray83 = new java.lang.Character[] { ' ', ' ', '4' };
        java.lang.Character[][] charArray84 = new java.lang.Character[][] { charArray71, charArray75, charArray79, charArray83 };
        java.lang.Character[][][] charArray85 = new java.lang.Character[][][] { charArray16, charArray33, charArray50, charArray67, charArray84 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Character[][][] charArray87 = org.apache.commons.lang3.ArrayUtils.remove(charArray85, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertNotNull(charArray85);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) 9, (double) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] {};
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, (double) 2);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray3, (java.lang.Object[]) doubleArray5);
        int[] intArray12 = new int[] { 1, (-1), (short) -1 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0, (int) (byte) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray5, (java.lang.Object) intArray15);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, (double) (-1L));
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, 1.0d);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (-1.0f));
        float[] floatArray7 = new float[] {};
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, 0.0f);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) (byte) 1);
        float[] floatArray17 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray17);
        float[] floatArray19 = new float[] {};
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray19, 0.0f);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) (byte) -1);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray19, 0.0f);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.clone(floatArray19);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray19);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray27, (float) 3);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[0.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        char[] charArray0 = null;
        char[] charArray6 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray6, (int) (short) 0, '4');
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray10, ' ', (-1));
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray10);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.subarray(charArray0, 2, (int) ' ');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNull(charArray17);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        long[] longArray0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.subarray(longArray1, (int) (byte) 10, (int) (short) 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray5, 100L);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray5);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray9);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        char[] charArray0 = null;
        char[] charArray4 = new char[] { '4', '#', 'a' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.subarray(charArray4, 0, (int) (byte) 1);
        char[] charArray13 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray13);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray15, '#', (int) 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray15);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray20, 'a');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, '4');
        char[] charArray6 = new char[] { '4', '#', 'a' };
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray6, 0, (int) (byte) 1);
        char[] charArray15 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray15);
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray19);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray20, 1, 'a');
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) charArray20, obj24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a]");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) 100);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 1);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray16);
        short[] shortArray23 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(shortArray23, (short) 10);
        short[] shortArray30 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(shortArray30, (short) 10);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray30);
        short[] shortArray36 = new short[] { (byte) 1, (short) 0 };
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray36, (short) (byte) 10);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray36, (short) 0);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray36, (short) 100);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray36, (short) 0);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray36);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray36, (short) (byte) 10);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray36, 3, 0);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray30, shortArray36);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray16, shortArray30);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray30);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[-1, 1, 0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray14 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.clone(shortArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 10);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (byte) 100, (int) '4');
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray26 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        short[] shortArray28 = null;
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) -1);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.remove(shortArray26, (int) (byte) 1);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.add(shortArray26, (short) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.remove(shortArray35, 1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray17, shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (short) 0, 0);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) 0, (int) ' ');
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) ' ', (int) (short) -1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 0, (int) (byte) 0);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (short) 0, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (byte) 10);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.clone(byteArray28);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(byteArray29, (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray29);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray6, (double) (short) 10);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray6, (double) '4');
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[3.0, 4.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.lang.Long[] longArray3 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray7 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray11 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray15 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray19 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray20 = new java.lang.Long[][] { longArray3, longArray7, longArray11, longArray15, longArray19 };
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray20, longArray21);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray23);
        long[] longArray25 = new long[] {};
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray26, 0L);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (long) 10);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, 0L);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) (short) 1);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.addAll(longArray23, longArray26);
        java.lang.Long[] longArray39 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray43 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray47 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray51 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray55 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray56 = new java.lang.Long[][] { longArray39, longArray43, longArray47, longArray51, longArray55 };
        java.lang.Long[] longArray57 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray58 = org.apache.commons.lang3.ArrayUtils.add(longArray56, longArray57);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray57);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray59, (long) 8);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray59);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (long) 1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[1]");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        int[] intArray5 = new int[] { 7, (byte) -1, 5, 100, (byte) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray5, 0);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.add(intArray5, 8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray5, (int) '#');
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[7, -1, 5, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[7, -1, 5, 100, 0, 8]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        byte[] byteArray31 = new byte[] { (byte) 100 };
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray31, (int) '4', (int) (byte) 10);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray31, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray31, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) byteArray31);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray49, (int) (short) 0, 0);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) 1);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) 0);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray49, (int) (short) 0, 0);
        byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray31, byteArray49);
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray67, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray70);
        byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray70, (int) ' ', (int) (short) -1);
        int int77 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray70, (byte) 0, (int) (byte) 0);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray87 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray84, (int) (short) 0, 0);
        byte[] byteArray89 = org.apache.commons.lang3.ArrayUtils.add(byteArray87, (byte) 10);
        byte[] byteArray90 = org.apache.commons.lang3.ArrayUtils.clone(byteArray89);
        byte[] byteArray91 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray70, byteArray90);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray60, byteArray90);
        int int95 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray60, (byte) 10, 6);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100, -1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[10]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[10]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) 1, (int) (byte) 100);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        java.lang.Integer[] intArray24 = org.apache.commons.lang3.ArrayUtils.toObject(intArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray23, (int) (short) 1, 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) 6, 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        java.lang.String str11 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray5, "{52,100,10}");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{a,#,#,4,#}" + "'", str11, "{a,#,#,4,#}");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int[] intArray20 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray20, (int) (byte) 0, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.clone(intArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray32, (int) (short) 0);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) 'a');
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray13, (java.lang.Object) intArray38);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, (float) (byte) 0);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray40, (float) (-1), 0);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray40, (float) (byte) 1, 10);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, 100.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 0.0, 100.0, -1.0, 35.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        char[] charArray0 = null;
        char[] charArray6 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray6, (int) (short) 0, '4');
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray10, ' ', (-1));
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray10, ' ', 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray6, (double) (short) 10);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray6, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[3.0, 4.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) 100);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 1);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray16);
        short[] shortArray23 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(shortArray23, (short) 10);
        short[] shortArray30 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(shortArray30, (short) 10);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray30);
        short[] shortArray36 = new short[] { (byte) 1, (short) 0 };
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray36, (short) (byte) 10);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray36, (short) 0);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray36, (short) 100);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray36, (short) 0);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray36);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray36, (short) (byte) 10);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray36, 3, 0);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray30, shortArray36);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray16, shortArray30);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray16, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[-1, 1, 0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a');
        char[] charArray3 = null;
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray3);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray6 = org.apache.commons.lang3.ArrayUtils.remove(charArray0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.lang.Byte[] byteArray3 = new java.lang.Byte[] { (byte) 100, (byte) 1, (byte) 1 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) -1);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.remove(byteArray5, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 1]");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        short[] shortArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray0, (short) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.remove(byteArray0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(intArray7, (int) (short) 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) 'a');
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.remove(intArray19, (int) (short) 1);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "hi!");
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray19);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray29, 6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{1,10,-1,0,1,35}" + "'", str27, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 0, (int) (short) 10);
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) '4', (int) (byte) 10);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray23);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray23);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray18, byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (int) (byte) 100, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) -1, (int) (short) 0);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray13, (int) (short) 10, (int) '4');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray2);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) (byte) 100);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, (int) (short) 0, 0);
        byte[] byteArray23 = null;
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray19, byteArray23);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray25, (int) '#', 0);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray19, (java.lang.Object) doubleArray28);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (byte) 100);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray31, 0, (int) (short) 10);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.add(byteArray31, (byte) 0);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray10, (java.lang.Object) (byte) 0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[100, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        java.lang.Byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray11);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, 1, (byte) 0);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, (int) (short) 0, 0);
        byte[] byteArray28 = null;
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray24, byteArray28);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray36, (int) (short) 0, 0);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.add(byteArray39, (byte) 10);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.clone(byteArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray28, byteArray42);
        byte[] byteArray45 = null;
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray42, byteArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray11, byteArray42);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray11, (byte) -1, 7);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) (byte) 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.remove(intArray7, 4);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray7, (int) (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray7, 0, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 1, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) 10, 2);
        java.lang.Object obj19 = null;
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray7, obj19);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) 100);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(byteArray22, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, ' ');
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray2, 'a');
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[ ]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray6, 0, 4);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4]");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Class<?>[] wildcardClassArray1 = org.apache.commons.lang3.ArrayUtils.clone(wildcardClassArray0);
        java.lang.Boolean[] booleanArray6 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray6, false);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray1, (java.lang.Object) booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(wildcardClassArray1);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        int[] intArray1 = new int[] { 10 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, (int) '4');
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (byte) 100);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 3, 10);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 8, 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) 9, (double) 0);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] {};
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray42, (double) 2);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray42);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray42, (double) (short) 10);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray42, (double) (short) 1);
        java.util.Map<java.lang.Object, java.lang.Object> objMap50 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray42);
        java.lang.Byte[] byteArray53 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray53);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray53, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray57);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray53, (java.lang.Object) byteArray58, 5);
        int int63 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray58, (byte) 0, 10);
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray42, (java.lang.Object) byteArray58, (int) 'a');
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray42);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 9, (java.lang.Object) doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(objMap50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray7, (byte) -1);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        byte[] byteArray19 = null;
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray19);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray6 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray7 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray8 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray9 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray10 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray11 = new java.lang.Integer[][] { intArray5, intArray6, intArray7, intArray8, intArray9, intArray10 };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray18, intArray25 };
        java.lang.Integer[][] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray11, intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray4, (java.lang.Object) intArray26);
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) 10);
        java.lang.Long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toObject(longArray31);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray32, 0L);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray34);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[]");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 10);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) (byte) 100, 0);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray25, 3, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray25, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray18, ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray23);
        char[] charArray30 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.clone(charArray30);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.add(charArray30, (int) (short) 0, '4');
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray30, '#');
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray23, charArray30);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray30);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(charArray30, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) 7, 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) '#', 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray11 = new double[] { 'a', 10, 1.0d };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) 0, (double) 10.0f);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, 0.0d);
        double[] doubleArray20 = new double[] { 'a', 10, 1.0d };
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) 0, (double) 10.0f);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, 0.0d);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray20);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray26);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray26, 0.0d);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray26, (int) ' ', 10);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray32);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.lang.Integer[][] intArray0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray2, 0L);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        java.lang.Integer[] intArray6 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray7 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray8 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray9 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray10 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray11 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray12 = new java.lang.Integer[][] { intArray6, intArray7, intArray8, intArray9, intArray10, intArray11 };
        java.lang.Integer[] intArray19 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray26 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray27 = new java.lang.Integer[][] { intArray19, intArray26 };
        java.lang.Integer[][] intArray28 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray27);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray5, (java.lang.Object) intArray27);
        java.lang.Integer[][] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray27);
        java.lang.Short[] shortArray37 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37, (short) 100);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray39, (short) 1);
        java.lang.Short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray39);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray42);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray43, (short) 10);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray30, (java.lang.Object) shortArray43);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(shortArray43, (short) (byte) -1);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        java.lang.Long[] longArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray30);
        java.util.Map<java.lang.Object, java.lang.Object> objMap32 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray30);
        java.lang.Class<?>[] wildcardClassArray33 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray39 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.clone(shortArray39);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray33, (java.lang.Object) shortArray40, 4);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) longArray30, (java.lang.Object[]) wildcardClassArray33);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray29, (java.lang.Object) wildcardClassArray33);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray46, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objMap32);
        org.junit.Assert.assertNotNull(wildcardClassArray33);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[3.0, 4.0]");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        byte[] byteArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) 0, 9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray17, '4');
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray17, ' ');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) 10);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, 0, (byte) 0);
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray16);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0]");
        org.junit.Assert.assertNotNull(byteArray17);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) (byte) 1);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) -1, 9);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, true, (int) (byte) 10);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray19);
        boolean[] booleanArray23 = null;
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray40 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray40, (int) (short) 0, '4');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 2, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray14, charArray47);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, 'a');
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#');
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray53, 'a');
        char[] charArray56 = null;
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.addAll(charArray53, charArray56);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray53);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.add(charArray14, 'a');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, 4, #, #, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "#4##a4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "#4##a4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#, 4, #, #, a, 4, a]");
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray16);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 10L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 4);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray6, 1L, 0);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, (int) (byte) 100, 2);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray6, (long) (byte) 1, 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        long[] longArray2 = new long[] { (byte) 10, 1L };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray2, 0L, (int) (byte) 100);
        java.lang.Long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toObject(longArray2);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) -1);
        long[] longArray28 = null;
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray25, longArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray25, (long) 4, (int) '#');
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) '4');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        byte[] byteArray31 = new byte[] { (byte) 100 };
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray31, (int) '4', (int) (byte) 10);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray31, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray31, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) byteArray31);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray49, (int) (short) 0, 0);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) 1);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) 0);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray49, (int) (short) 0, 0);
        byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray31, byteArray49);
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray31, (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100, -1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray22 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray22, (int) (short) 0, '4');
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.add(charArray22, 2, '#');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray29);
        char[] charArray36 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(charArray36, '4');
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray40, '#', 0);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray40);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.subarray(charArray44, (int) (short) -1, (int) (byte) 10);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(charArray44, ' ');
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray44, '#', (int) ' ');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a###4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a###4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "4a###4#a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "4a###4#a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, a, #, #, #, 4, #, a, #, #]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) '4');
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) (short) 10, (int) ' ');
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(byteArray0, (byte) -1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) '#');
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray3, (long) 8);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray4, 1);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, 4, 2);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.add(booleanArray9, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false]");
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, 5, (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        long[] longArray0 = null;
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, 0, 100);
        org.junit.Assert.assertNull(longArray3);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        int int33 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray10);
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        java.lang.String str36 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray34, "false");
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{0.0,0.0,100.0,-1.0,35.0}" + "'", str36, "{0.0,0.0,100.0,-1.0,35.0}");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        boolean[] booleanArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray0, false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray17 = new short[] { (byte) 1, (short) 0 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) (byte) 10);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray17, (short) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) (byte) 10);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, 3, 0);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray17);
        java.lang.String str34 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray11, "{0.0,0.0,100.0,-1.0,35.0}");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[-1, 1, 0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-1,1,0,100}" + "'", str34, "{-1,1,0,100}");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray7);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray7, 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) (byte) 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.remove(intArray7, 4);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray11);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 1, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray3, (int) (byte) -1, '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray5);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, '#', (int) '4');
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) boolean17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, 4, #, #, a]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (short) -1, (int) (byte) -1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (short) -1, (int) (byte) 100);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, (int) (byte) 100, (int) '4');
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (short) 10);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) (short) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray12);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) (short) 0);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (short) 0, 0);
        byte[] byteArray24 = null;
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray24);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray26, (int) '#', 0);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray20, (java.lang.Object) doubleArray29);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 100);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, 0, (int) (short) 10);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.add(byteArray32, (byte) 0);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.clone(byteArray37);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.add(byteArray37, (byte) -1);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray40, (int) (short) 10, 7);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray11, byteArray43);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 0, 10, 0, 0, 100, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10]");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray3 = org.apache.commons.lang3.ArrayUtils.add(intArray0, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray16);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray27);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray27, (int) ' ', (int) (short) -1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray27, (byte) 1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray33);
        java.lang.Object[] objArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray37 = new byte[] { (byte) 100 };
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray37, (int) '4', (int) (byte) 10);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray37, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray43);
        int int45 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray35, (java.lang.Object) byteArray43);
        java.lang.Byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray43);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray47);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray48, (byte) 100, (int) '4');
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray33, byteArray48);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray48);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) '4', (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) (short) 0);
        org.junit.Assert.assertNull(longArray2);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        char[] charArray4 = new char[] { '4', '4', '4', 'a' };
        char[] charArray9 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray10 = new char[][] { charArray4, charArray9 };
        char[] charArray15 = new char[] { '4', '4', '4', 'a' };
        char[] charArray20 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray21 = new char[][] { charArray15, charArray20 };
        char[] charArray26 = new char[] { '4', '4', '4', 'a' };
        char[] charArray31 = new char[] { '4', '4', '4', 'a' };
        char[][] charArray32 = new char[][] { charArray26, charArray31 };
        char[][][] charArray33 = new char[][][] { charArray10, charArray21, charArray32 };
        char[][][] charArray34 = org.apache.commons.lang3.ArrayUtils.toArray(charArray33);
        java.util.Map<java.lang.Object, java.lang.Object> objMap35 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) charArray33);
        char[] charArray41 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.clone(charArray41);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(charArray41, '4');
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray33, (java.lang.Object) '4');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "444a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "444a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, 4, 4, a]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertNotNull(objMap35);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, ' ');
        java.lang.Class<?> wildcardClass3 = charArray2.getClass();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[ ]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.String[] strArray4 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray7 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray7);
        short[] shortArray9 = null;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray7, shortArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray4, (java.lang.Object) shortArray9, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray2, (java.lang.Object) strArray4);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 1]");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray3, false);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray0, (java.lang.Object[]) booleanArray3);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0);
        int int8 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) intArray7);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, 0, 10);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, 10]");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray12, (short) 10);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray14);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) '#', 0);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray3, (-1.0d));
        double[] doubleArray7 = new double[] { 100.0d };
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) 10.0f);
        double[] doubleArray12 = new double[] { 3, 4 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray12);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 1, 0.0d);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray12);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) '4', (int) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, (float) (byte) 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray8, (int) (byte) 10, 9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray8);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) 3);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '#', (-1));
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '4', (int) (byte) -1);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(charArray26, '4');
        java.lang.Character[] charArray30 = org.apache.commons.lang3.ArrayUtils.toObject(charArray26);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray31);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.addAll(charArray12, charArray31);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray36 = org.apache.commons.lang3.ArrayUtils.add(charArray31, 8, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, 4, #, a, #, #, 4, #]");
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        short[] shortArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) (byte) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 100.0f, (int) '#', (double) (-1));
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 0.0f);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 4, (-1.0d));
        java.lang.String str32 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) 4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "4" + "'", str32, "4");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        char[] charArray0 = null;
        char[] charArray4 = new char[] { '4', '#', 'a' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.subarray(charArray4, 0, (int) (byte) 1);
        char[] charArray13 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray13);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray15, '#', (int) 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray15);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray15, ' ');
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        int[] intArray3 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray6, "");
        java.lang.Integer[] intArray15 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray18);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 100, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{52,100,10}" + "'", str8, "{52,100,10}");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[52, 100, 10, 0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[52, 100, 10, 0, 0, 1, 10, 10, 1]");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray2, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray2, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        java.lang.Float[] floatArray6 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray8 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray9 = new java.lang.Float[][] { floatArray6, floatArray8 };
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, floatArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray11);
        java.lang.Float[] floatArray14 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray16 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray17 = new java.lang.Float[][] { floatArray14, floatArray16 };
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, floatArray18);
        java.lang.Float[][] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray17);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray2, (java.lang.Object[]) floatArray20);
        char[] charArray25 = new char[] { '4', '#', 'a' };
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.subarray(charArray25, 0, (int) (byte) 1);
        char[] charArray34 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.addAll(charArray28, charArray34);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray36, '#', (int) 'a');
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray36);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray36);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray36);
        char[] charArray48 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.clone(charArray48);
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.add(charArray48, (int) (short) 0, '4');
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray48, 2, '#');
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray48);
        char[] charArray62 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.clone(charArray62);
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.add(charArray62, (int) (short) 0, '4');
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.add(charArray62, 2, '#');
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray36, charArray69);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray36, 'a');
        int int74 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray36, '#');
        java.lang.Character[] charArray75 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray36);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#4##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#4##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#, 4, #, #, 4]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        long[] longArray0 = null;
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, (int) (byte) 0, (int) (byte) 100);
        org.junit.Assert.assertNull(longArray3);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        double[] doubleArray11 = new double[] { 'a', 10, 1.0d };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) 0, (double) 10.0f);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, 0.0d);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) int16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray18, 2);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray18, 0);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray18, 7, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        int[] intArray0 = null;
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        java.lang.Integer[] intArray15 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray16, (-1));
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray16);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray8, intArray16);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.subarray(intArray8, 0, 10);
        int[] intArray30 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.clone(intArray30);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.add(intArray30, (int) (byte) 0, (int) (byte) 1);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.addAll(intArray8, intArray30);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray0, intArray35);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray35);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 1, 10, 10, 1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 1, 10, 10, 1, 1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) (byte) 1);
        short[] shortArray22 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray22, (short) (byte) 0, 0);
        short[] shortArray28 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray28);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray28);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray30);
        java.lang.Short[] shortArray38 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) 100);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) 1);
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray40);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43);
        short[] shortArray47 = new short[] { (byte) 1, (short) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray47, (short) (byte) 10);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray47, (short) 0);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.add(shortArray51, (short) (byte) 1);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray44, shortArray51);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) 100, 3);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray44);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.add(shortArray44, (short) 100);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray44, (short) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[-1, 1, 0, 100, 1, -1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[-1, 100, -1, 0, 100, 1, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray14 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray14);
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray23, (-1));
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray23);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray15, intArray23);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray23);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray23, 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 1, 10, 10, 1]");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) (short) 1, (int) '4');
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, true]");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, false);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, 0, false);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false]");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray12);
        float[] floatArray20 = null;
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, 0.0f);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(floatArray21, (float) (byte) 1);
        float[] floatArray31 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray21, floatArray31);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray31, (int) (short) 1, (int) '#');
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.clone(floatArray31);
        float[] floatArray37 = new float[] {};
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.add(floatArray37, 0.0f);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(floatArray37, (float) (byte) 1);
        float[] floatArray47 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray37, floatArray47);
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray47, (int) (short) 1, (int) '#');
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.clone(floatArray47);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray52);
        int int54 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray31);
        java.lang.Float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray31);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(floatArray31, (float) (short) 0);
        float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray31);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray58);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[35.0, -1.0, 100.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) -1, (int) (short) 0);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (short) 1);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, 5, (int) (short) -1);
        int[] intArray27 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.clone(intArray27);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray28, 10, 4);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray28, (int) (byte) 0, (int) (short) 100);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray28);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray17);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35, 1, 52]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        int[] intArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray0, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        double[] doubleArray12 = null;
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray12);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (double) 9);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[97.0, 10.0, 1.0, 9.0]");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false);
        boolean[] booleanArray14 = new boolean[] {};
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, false, 0);
        java.lang.Boolean[] booleanArray22 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray22, false);
        boolean[] booleanArray25 = new boolean[] {};
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, false, 0);
        java.lang.Boolean[] booleanArray33 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray33, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray35);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray25, booleanArray35);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray37);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray37);
        java.lang.Boolean[] booleanArray44 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray44, false);
        boolean[] booleanArray47 = new boolean[] {};
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray47, false, 0);
        java.lang.Boolean[] booleanArray55 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray55, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray57);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray47, booleanArray57);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray46, booleanArray59);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray37, booleanArray46);
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray46, 5, 0);
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, false, (int) 'a');
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.add(booleanArray64, false);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray64);
        boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray70, (int) (short) 0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false]");
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[]");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (int) ' ', (short) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 2, 3);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (int) (byte) 0, (short) 10);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) (byte) 10, 7);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[10]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (int) (short) -1);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        long[] longArray17 = null;
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray17, 100L);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray20);
        java.lang.Long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[100]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[1, 100]");
        org.junit.Assert.assertNotNull(longArray22);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.lang.Long[] longArray4 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) 4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.add(longArray6, (long) '#');
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray6, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray10, 0L);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray15 = org.apache.commons.lang3.ArrayUtils.add(longArray12, 6, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100, 10, 0, 1, 35]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[100, 10, 0, 1, 0]");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.add(doubleArray18, (double) (short) 100);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, 0.0d, 0.0d);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 1.0f, (int) ' ', (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = null;
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray5);
        long[] longArray7 = new long[] {};
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.subarray(longArray7, (int) (byte) 10, (int) (short) 0);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray11, (long) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray13);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray6, (long) 10);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray16, (long) ' ');
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray18, (long) 2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 0);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.add(shortArray14, (short) (byte) 100);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 1, 100]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 100]");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray17 = new short[] { (byte) 1, (short) 0 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) (byte) 10);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray17, (short) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) (byte) 10);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, 3, 0);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray17);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (byte) 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[-1, 1, 0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[]");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 5);
        float[] floatArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray14);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, 0.0f);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(floatArray11, (float) 100L);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, 100, (int) (short) -1);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, '#');
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, '#', 3);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray28, '#');
        java.lang.Class<?> wildcardClass34 = charArray28.getClass();
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.remove(shortArray0, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.lang.Integer[][][][] intArray0 = new java.lang.Integer[][][][] {};
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray0);
        java.lang.Object[] objArray3 = null;
        char[][][][] charArray4 = new char[][][][] {};
        char[][][][] charArray5 = org.apache.commons.lang3.ArrayUtils.clone(charArray4);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray3, (java.lang.Object) charArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable[][][][] serializableArray7 = org.apache.commons.lang3.ArrayUtils.add((java.io.Serializable[][][][]) intArray0, (int) '#', (java.io.Serializable[][][]) charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        long[] longArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) 7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray1, (byte) 1, (int) (short) -1);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray1, (byte) -1, 0);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, 0, (int) (byte) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray10, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray4, (-1.0f), (int) 'a');
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) '4', 2);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, 4, 0);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray13, (float) (byte) -1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 0);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        java.lang.Byte[] byteArray19 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray19, (byte) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray16, byteArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray22, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, (int) (byte) -1, 4);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[0.0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{0.0}" + "'", str8, "{0.0}");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray1 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true, 0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        boolean[] booleanArray7 = new boolean[] {};
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, false, 0);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray7, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray7);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        boolean[] booleanArray16 = null;
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray15, booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 0);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray14, (short) (byte) 0);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray14, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[100, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100, 1]");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        boolean[][] booleanArray0 = new boolean[][] {};
        boolean[][] booleanArray1 = new boolean[][] {};
        boolean[][][] booleanArray2 = new boolean[][][] { booleanArray0, booleanArray1 };
        boolean[][] booleanArray3 = new boolean[][] {};
        boolean[][] booleanArray4 = new boolean[][] {};
        boolean[][][] booleanArray5 = new boolean[][][] { booleanArray3, booleanArray4 };
        boolean[][] booleanArray6 = new boolean[][] {};
        boolean[][] booleanArray7 = new boolean[][] {};
        boolean[][][] booleanArray8 = new boolean[][][] { booleanArray6, booleanArray7 };
        boolean[][] booleanArray9 = new boolean[][] {};
        boolean[][] booleanArray10 = new boolean[][] {};
        boolean[][][] booleanArray11 = new boolean[][][] { booleanArray9, booleanArray10 };
        boolean[][][][] booleanArray12 = new boolean[][][][] { booleanArray2, booleanArray5, booleanArray8, booleanArray11 };
        boolean[][][][][] booleanArray13 = new boolean[][][][][] { booleanArray12 };
        boolean[][][][][] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) '#', 100);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        // The following exception was thrown during execution in test generation
        try {
            boolean[][][][][] booleanArray19 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray13, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray7 = new boolean[] {};
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, false, 0);
        java.lang.Boolean[] booleanArray15 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray17);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray19);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray19, true, 9);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.remove(floatArray1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray18, ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray23);
        java.lang.Character[] charArray25 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray26, '#');
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray26, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        double[] doubleArray7 = null;
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray7);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray3, (double) ' ');
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 1);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray3, (int) (short) 1, 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.lang.Object[] objArray0 = null;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray8, (int) (short) -1, (int) (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray8, (byte) -1, (int) (short) 100);
        java.lang.Object[] objArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray19 = new byte[] { (byte) 100 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, (int) '4', (int) (byte) 10);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray25);
        int int27 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray17, (java.lang.Object) byteArray25);
        byte[] byteArray30 = new byte[] { (byte) 100 };
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray30, (int) '4', (int) (byte) 10);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray25, byteArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray25);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) boolean35);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str12 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray6, "");
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, 10, 3);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray15);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.subarray(intArray17, 1, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{1,10,-1,0,1,35}" + "'", str12, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, 0.0f);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) (byte) 1);
        float[] floatArray28 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray28);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray29, (float) 'a');
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray31);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray31);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.remove(floatArray33, 2);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray33, (int) (short) 100, 10);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.add(floatArray33, (int) '#', (float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 0.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[]");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray28, (float) ' ', (int) (short) 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray28);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.add(floatArray28, (float) 10L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 0.0, 100.0, -1.0, 35.0, 10.0]");
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, 2, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        int[] intArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray0, (int) (byte) 10, 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.lang.CharSequence[][] charSequenceArray0 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][] charSequenceArray1 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][] charSequenceArray2 = org.apache.commons.lang3.ArrayUtils.addAll(charSequenceArray0, charSequenceArray1);
        java.lang.CharSequence[][] charSequenceArray3 = org.apache.commons.lang3.ArrayUtils.clone(charSequenceArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(charSequenceArray3);
        org.junit.Assert.assertNotNull(charSequenceArray0);
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertNotNull(charSequenceArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        int[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 5);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray0, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[5]");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray6 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.clone(shortArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray7, 4);
        java.lang.Class<?>[] wildcardClassArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray16 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray10, (java.lang.Object) shortArray17, 4);
        java.lang.Class<?>[] wildcardClassArray20 = org.apache.commons.lang3.ArrayUtils.addAll(wildcardClassArray0, wildcardClassArray10);
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, 0.0f);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(floatArray21, (float) (byte) 1);
        float[] floatArray31 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray21, floatArray31);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.clone(floatArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray33);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray33, (int) (byte) 1, (float) 100L);
        java.lang.Float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray37);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.clone(floatArray37);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.add(floatArray39, (float) (-1L));
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) wildcardClassArray20, (java.lang.Object) floatArray39);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray20);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray2, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[false]");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, true);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray15, (java.lang.Object) booleanArray18);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray30);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray18, (java.lang.Object) booleanArray30, (int) '4');
        java.lang.Boolean[] booleanArray43 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray43, true);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray43);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray18, (java.lang.Object) booleanArray46, (int) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray18);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[true, false]");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        boolean[] booleanArray5 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray11 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray18 = new boolean[][] { booleanArray5, booleanArray11, booleanArray17 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        double[] doubleArray30 = new double[] { 'a', 10, 1.0d };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) 0, (double) 10.0f);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, 0.0d);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray25, (java.lang.Object) int35);
        boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, (java.lang.Object) intArray25);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25, (int) (short) 0);
        int[] intArray46 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.clone(intArray46);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, 4);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, (int) (short) 10);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.addAll(intArray39, intArray47);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 1, 10, 10, 1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int[] intArray20 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray20, (int) (byte) 0, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.clone(intArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray32, (int) (short) 0);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) 'a');
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray13, (java.lang.Object) intArray38);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, (float) (byte) 0);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray40, (float) (-1), 0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray40);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray40, (float) (short) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[35.0, -1.0, 100.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 0.0, 100.0, -1.0, 35.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.lang.Object[] objArray0 = null;
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, false);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray5);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray0, (java.lang.Object[]) booleanArray5);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, 0, false);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.add(booleanArray16, true);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, true, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, true, false, false, false, true]");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray2);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, 3, (short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, (long) (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray12, (long) (short) -1, (int) (short) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray1);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) -1, (int) (short) 100);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.Character[][] charArray0 = new java.lang.Character[][] {};
        float[] floatArray1 = null;
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (short) -1);
        java.lang.Character[][] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray0, (java.lang.Object) floatArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) charArray4);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[-1.0]");
        org.junit.Assert.assertNotNull(charArray4);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray1, (long) '#');
        java.lang.Long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toObject(longArray3);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.subarray(longArray3, (int) '4', (int) (short) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray8, false);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray10, true, (int) (byte) 10);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, true);
        float[][] floatArray16 = null;
        float[] floatArray22 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray28 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray34 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray40 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray46 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray47 = new float[][] { floatArray22, floatArray28, floatArray34, floatArray40, floatArray46 };
        float[][] floatArray48 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray47);
        float[][] floatArray49 = org.apache.commons.lang3.ArrayUtils.clone(floatArray47);
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray54, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray56);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray49, (java.lang.Object) booleanArray56);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray56);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray59);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray60, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, true, false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[false, false, true, false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[false, true, false, true, false, true]");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (short) 0, 0);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (byte) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray21, (byte) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, (int) '4');
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 0, (-1));
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray7, byteArray23);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray38, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.add(byteArray43, (byte) 100);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray43);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray43, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) 3, (double) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        long[] longArray0 = null;
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, 2, (int) (byte) 100);
        org.junit.Assert.assertNull(longArray3);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.AnnotatedElement[] annotatedElementArray1 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.reflect.AnnotatedElement[]) wildcardClassArray0);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray4 = org.apache.commons.lang3.ArrayUtils.subarray(annotatedElementArray1, 0, 10);
        boolean[] booleanArray5 = new boolean[] {};
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray5, false, 0);
        java.lang.Boolean[] booleanArray13 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray13, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray15);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray5, booleanArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray5);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray5);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) annotatedElementArray1, (java.lang.Object) booleanArray19);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray19, true);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(annotatedElementArray1);
        org.junit.Assert.assertNotNull(annotatedElementArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        float[] floatArray0 = null;
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0, (float) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray3);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0]");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str12 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray6, "");
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, 10, 3);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray6, 10);
        java.lang.String str19 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) 10, "{-1,1,-1,0,100,-1,100,-1,-1,10}");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{1,10,-1,0,1,35}" + "'", str12, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10" + "'", str19, "10");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] {};
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, 0.0d, (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (int) (byte) 1, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Object[] objArray7 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[]) byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap8 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '0', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[0, 1]");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray12);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        short[] shortArray23 = new short[] { (byte) 1, (short) 0 };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 10);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 100);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) 0);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray18, (java.lang.Object) (short) 0);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, true);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray34);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray34);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray45, false);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray47, true, (int) (byte) 10);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray47, true);
        java.lang.Boolean[] booleanArray57 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray57, false);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray57, false);
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray61, false);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray63, true, (int) (byte) 10);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray63, true);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray47, booleanArray63);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.add(booleanArray47, false);
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray36, booleanArray71);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, false, true, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false]");
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, false]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[false, true, false, true, false, false, false, true, false, false, true, false]");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray17 = new short[] { (byte) 1, (short) 0 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) (byte) 10);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray17, (short) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) (byte) 10);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, 3, 0);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray17);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[-1, 1, 0, 100, 1, 0]");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(intArray7, (int) (short) 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) 'a');
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.remove(intArray19, (int) (short) 1);
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "hi!");
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray19);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        short[] shortArray32 = new short[] { (byte) 1, (short) 0 };
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 10);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray32, (short) 0);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.add(shortArray36, (short) (byte) 1);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray38, (short) (byte) 100, (int) '#');
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray38, (short) (byte) 100);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray7, (java.lang.Object) shortArray38);
        int int45 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) shortArray38);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{1,10,-1,0,1,35}" + "'", str27, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(byteArray2, (byte) 0);
        java.lang.Byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray2);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray2);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        int[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.add(intArray0, (int) (byte) 0);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray0, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, 'a', (int) (short) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) (short) 0, (java.lang.Object) longArray10);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 10L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.subarray(longArray5, 0, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray10 = org.apache.commons.lang3.ArrayUtils.remove(longArray8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        boolean[] booleanArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        boolean[] booleanArray0 = new boolean[] {};
        boolean[] booleanArray1 = new boolean[] {};
        boolean[] booleanArray2 = new boolean[] {};
        boolean[] booleanArray3 = new boolean[] {};
        boolean[] booleanArray4 = new boolean[] {};
        boolean[][] booleanArray5 = new boolean[][] { booleanArray0, booleanArray1, booleanArray2, booleanArray3, booleanArray4 };
        boolean[] booleanArray6 = new boolean[] {};
        boolean[] booleanArray7 = new boolean[] {};
        boolean[] booleanArray8 = new boolean[] {};
        boolean[] booleanArray9 = new boolean[] {};
        boolean[] booleanArray10 = new boolean[] {};
        boolean[][] booleanArray11 = new boolean[][] { booleanArray6, booleanArray7, booleanArray8, booleanArray9, booleanArray10 };
        boolean[] booleanArray12 = new boolean[] {};
        boolean[] booleanArray13 = new boolean[] {};
        boolean[] booleanArray14 = new boolean[] {};
        boolean[] booleanArray15 = new boolean[] {};
        boolean[] booleanArray16 = new boolean[] {};
        boolean[][] booleanArray17 = new boolean[][] { booleanArray12, booleanArray13, booleanArray14, booleanArray15, booleanArray16 };
        boolean[][][] booleanArray18 = new boolean[][][] { booleanArray5, booleanArray11, booleanArray17 };
        boolean[][][] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toArray(booleanArray18);
        boolean[][][] booleanArray22 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray19, (int) (short) 0, (int) '#');
        int[] intArray29 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray29);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray29, (int) (byte) 0, (int) (byte) 1);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.remove(intArray29, (int) (short) 1);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.add(intArray35, (int) (short) 0);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray19, (java.lang.Object) intArray37, (int) (short) 1);
        java.lang.Object obj40 = null;
        boolean[][][] booleanArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray19, obj40);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, -1, 0, 1, 35, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray18, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0, 0.0]");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, '4');
        char[] charArray6 = new char[] { '4', '#', 'a' };
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray6, 0, (int) (byte) 1);
        char[] charArray15 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray15);
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray19);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray22 = org.apache.commons.lang3.ArrayUtils.remove(charArray0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4]");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        int[] intArray5 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray0, (java.lang.Object) intArray5);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) 0, 4, (double) 'a');
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[52, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[97.0, 10.0, 1.0]");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray17, (java.lang.Object) doubleArray18, 0);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray17, (float) 4);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray22);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[35.0, -1.0, 100.0, 0.0, 100.0, 0.0]");
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) '4', (int) (short) 10);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 0.0f);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) (byte) -1);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, 0.0f);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.clone(floatArray15);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray15);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray15);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, (float) 3);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray15);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, 100.0f, 2);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray15, (int) (short) 10, (int) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[]");
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 4, 3 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, 1);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[4, 3]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[4, 3]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[4, 3]");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29, (double) 2);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray33, (double) 0L, (int) (short) 10, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray17);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, 0.0f);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(floatArray20, (float) (byte) 1);
        float[] floatArray30 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray30);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray30, (int) (short) 1, (int) '#');
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.clone(floatArray30);
        float[] floatArray36 = new float[] {};
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.add(floatArray36, 0.0f);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(floatArray36, (float) (byte) 1);
        float[] floatArray46 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray36, floatArray46);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray46, (int) (short) 1, (int) '#');
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.clone(floatArray46);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray30, floatArray51);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray51, 1.0f);
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray51, 0, (int) '4');
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray18, (java.lang.Object) floatArray51);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        short[] shortArray1 = new short[] { (short) -1 };
        short[] shortArray3 = new short[] { (short) -1 };
        short[] shortArray5 = new short[] { (short) -1 };
        short[] shortArray7 = new short[] { (short) -1 };
        short[] shortArray9 = new short[] { (short) -1 };
        short[][] shortArray10 = new short[][] { shortArray1, shortArray3, shortArray5, shortArray7, shortArray9 };
        short[][] shortArray12 = org.apache.commons.lang3.ArrayUtils.remove(shortArray10, 4);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray12);
        double[] doubleArray15 = new double[] { 100.0d };
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray15, (double) 10.0f);
        double[] doubleArray20 = new double[] { 3, 4 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray15, doubleArray20);
        double[] doubleArray23 = new double[] { 100.0d };
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray23, (double) 10.0f);
        double[] doubleArray28 = new double[] { 3, 4 };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray23, doubleArray28);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, (double) 10.0f, 0, 0.0d);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, 10.0d, 3, 0.0d);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, 0.0d, 1, (double) (byte) 1);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray15, doubleArray28);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray46 = new double[] { 100.0d };
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray46, (double) 10.0f);
        double[] doubleArray51 = new double[] { 3, 4 };
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray46, doubleArray51);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray51, (double) 10.0f, 0, 0.0d);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray51);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray44, doubleArray51);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray28, doubleArray51);
        java.lang.Object[] objArray60 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.Object[]) shortArray12, (java.lang.Object) boolean59);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[-1]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[-1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[-1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[[-1], [-1], [-1], [-1]]");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap15 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray14);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, 10L);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray17, 0L, 2);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray10, longArray17);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray17, (long) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(objMap15);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        int[] intArray0 = null;
        int[] intArray7 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(intArray8, (int) (short) 0);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray8, (int) 'a');
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.clone(intArray8);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray8, (int) (byte) 0, (-1));
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray8);
        int[] intArray24 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.clone(intArray24);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.add(intArray24, (int) (byte) 0, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.clone(intArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray24, intArray35);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray24, (int) (short) 1, 3);
        java.lang.Integer[] intArray41 = org.apache.commons.lang3.ArrayUtils.toObject(intArray24);
        int[] intArray42 = null;
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.addAll(intArray24, intArray42);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(intArray24, 0);
        int[] intArray46 = org.apache.commons.lang3.ArrayUtils.addAll(intArray17, intArray24);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 0, (int) (short) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray23, (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray23);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100, 0, 0, 10, 0, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 0, 10, 0, 0, 100, 0, -1]");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) (short) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray12);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true, (int) (short) 0);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.add(booleanArray12, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, false, true, false, false]");
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(byteArray2, (byte) 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray2, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Boolean[] booleanArray11 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, false);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, false);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray15);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray15);
        long[] longArray18 = new long[] {};
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray19, 0L);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray19, (long) 10);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray17, (java.lang.Object) longArray19, 10);
        long[] longArray26 = new long[] {};
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.clone(longArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, 0L);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray27);
        java.lang.Integer[] intArray31 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray32 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray33 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray34 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray35 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray36 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray37 = new java.lang.Integer[][] { intArray31, intArray32, intArray33, intArray34, intArray35, intArray36 };
        java.lang.Integer[] intArray44 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray51 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray52 = new java.lang.Integer[][] { intArray44, intArray51 };
        java.lang.Integer[][] intArray53 = org.apache.commons.lang3.ArrayUtils.addAll(intArray37, intArray52);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray30, (java.lang.Object) intArray52);
        java.lang.Long[] longArray55 = org.apache.commons.lang3.ArrayUtils.toObject(longArray30);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray30);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.clone(longArray30);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray17, (java.lang.Object) longArray30);
        int int61 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) 9, (int) (byte) 100);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) longArray30);
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 1]");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        java.lang.Long[] longArray16 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) 4);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) longArray18, (int) (byte) 10);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.clone(longArray21);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[100, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[100, 10, 0, 1]");
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 100);
        int int11 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray10, (byte) 10, 5);
        java.lang.String str16 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray10, "-1.0");
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, (int) '4', (int) (byte) 10);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray24);
        int int26 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray24);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, (int) (short) -1, (int) (byte) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray24, (byte) -1, (int) (short) 100);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) -1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray10, byteArray24);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        double[] doubleArray11 = new double[] { 'a', 10, 1.0d };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) 0, (double) 10.0f);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, 0.0d);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) int16);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray6);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray20, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, false]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, false]");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 100);
        int int11 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray10, (byte) 10, 5);
        java.lang.String str16 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray10, "-1.0");
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(byteArray10, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        char[] charArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, '4', 8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray0);
        java.lang.Float[] floatArray12 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray15 = new java.lang.Float[][] { floatArray12, floatArray14 };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, floatArray16);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray10, (java.lang.Object[]) floatArray16);
        boolean[] booleanArray20 = new boolean[] {};
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray20, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray20);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] {};
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, false, 0);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray27, true);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray20, booleanArray27);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.add(booleanArray33, false);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray10, (java.lang.Object) booleanArray33);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        float[] floatArray0 = null;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray2);
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        java.lang.String[] strArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray11 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        short[] shortArray13 = null;
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray11, shortArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray8, (java.lang.Object) shortArray13, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray6, (java.lang.Object) strArray8);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray3, (java.lang.Object[]) byteArray6);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray1, (java.lang.Object) byteArray3);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray1);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 1]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] {};
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19, (double) 2);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray22);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray23, (double) 'a', 7, (double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(byteArray7, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.toObject(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) 100, (int) (short) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray5, (short) 10, 0);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray5, 7, (int) '#');
        java.lang.String str18 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray17);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] {};
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, (double) 2);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray3, (java.lang.Object[]) doubleArray5);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, -1, 10]");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        byte[][][] byteArray0 = null;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        java.lang.Long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) (short) 0, (int) (short) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, (double) 7);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        int[] intArray2 = new int[] { (short) 10, 2 };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray2, 1, (int) (short) 10);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.subarray(intArray2, (int) '#', (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = org.apache.commons.lang3.ArrayUtils.remove(intArray8, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[10, 2]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, (long) (short) -1);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray19, 1, 0L);
        java.lang.Long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toObject(longArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray22, 0L);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, 0]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, true);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, '#');
        char[] charArray8 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '#');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray9, ' ');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray9, '#');
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.addAll(charArray2, charArray9);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray25 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray25);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.add(charArray25, (int) (short) 0, '4');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray25, 2, '#');
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray32, '#');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray32);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.remove(charArray32, (int) (byte) 1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "#a##4#a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "#a##4#a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, a, #, #, 4, #, a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #, #, 4, #]");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray16);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray27);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray27, (int) ' ', (int) (short) -1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray27, (byte) 1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray33);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray8, (byte) -1);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray36, (byte) -1);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, true);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        boolean[] booleanArray22 = new boolean[] {};
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray22, false, 0);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray32);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray22, booleanArray32);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray21, booleanArray34);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray34);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray34, booleanArray45);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray34, false);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray34, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray34);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray34, false, (int) (byte) 100);
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray34);
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, true);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, true);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray9, booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, true]");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray8, false);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray10, true, (int) (byte) 10);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, true);
        float[][] floatArray16 = null;
        float[] floatArray22 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray28 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray34 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray40 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray46 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray47 = new float[][] { floatArray22, floatArray28, floatArray34, floatArray40, floatArray46 };
        float[][] floatArray48 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray47);
        float[][] floatArray49 = org.apache.commons.lang3.ArrayUtils.clone(floatArray47);
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray54, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray56);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray49, (java.lang.Object) booleanArray56);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray56);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray59);
        java.lang.Boolean[] booleanArray65 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray65, false);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray67, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray69);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray60, booleanArray69);
        java.lang.Boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, true, false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[false, false, true, false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, false, true, false, true, false, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray72);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray3 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray3);
        short[] shortArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) shortArray5, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray0);
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray16 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray10, (java.lang.Object[]) charArray16);
        java.lang.String[] strArray20 = org.apache.commons.lang3.ArrayUtils.addAll(strArray0, strArray10);
        java.io.Serializable[] serializableArray21 = org.apache.commons.lang3.ArrayUtils.clone((java.io.Serializable[]) strArray20);
        java.lang.Object[] objArray22 = null;
        java.lang.String[] strArray23 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap24 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray22, (java.lang.Object[]) strArray23);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) serializableArray21, (java.lang.Object) strArray23);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(serializableArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(objMap24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 0.0d, 1, (double) (byte) 1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray6);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray14 = new short[] { (byte) 1, (short) 0 };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray14, (short) (byte) 10);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray14, (short) 0);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, (short) (byte) 1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray2, shortArray18);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray18, (int) '4', (int) (byte) 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray24, (short) -1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) '#', 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray11 = new double[] { 'a', 10, 1.0d };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) 0, (double) 10.0f);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, 0.0d);
        double[] doubleArray20 = new double[] { 'a', 10, 1.0d };
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) 0, (double) 10.0f);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, 0.0d);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray20);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray26);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray26, 0.0d);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray26, (int) ' ', 10);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray32);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) 0, 0);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, 100.0d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.lang.Object[] objArray0 = null;
        char[] charArray6 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(charArray6, '4');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray10, '#', 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) charArray10, (int) (byte) 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.lang.Long[] longArray4 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) 4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.add(longArray6, (long) '#');
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100, 10, 0, 1, 35]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[100, 10, 0, 1]");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) -1);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (short) 0, 0);
        byte[] byteArray20 = null;
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray16, byteArray20);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray22, (int) '#', 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray16, (java.lang.Object) doubleArray25);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray16, (byte) 100);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray28, 0, (int) (short) 10);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray28, (byte) 0);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.remove(byteArray6, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 0, 100, -1, 10, 0, 10, 0, 0, 100, 0]");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray13 = new float[] {};
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, 0.0f);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(floatArray13, (float) (byte) 1);
        float[] floatArray23 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray13, floatArray23);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.clone(floatArray23);
        int int26 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) '#', (int) '#');
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        java.util.Map<java.lang.Object, java.lang.Object> objMap17 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) byteArray16);
        java.lang.String str19 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) objMap17, "{52,100,10}");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(objMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        java.lang.Byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray11);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 0);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray26);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray26, (int) ' ', (int) (short) -1);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray26, (byte) 0, (int) (byte) 0);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray16, byteArray26);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, 0.0f, 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) 10L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, (long) 'a');
        long[] longArray3 = new long[] {};
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray4, 0L);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray4, 0L);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray4, (long) (short) 1);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(longArray4, 0L);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray4);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) (byte) 1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[97]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNull(longArray17);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray1 = new double[] {};
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[][] doubleArray5 = new double[][] { doubleArray0, doubleArray1, doubleArray2, doubleArray3, doubleArray4 };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray9 = new double[] { 100.0d };
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) 10.0f);
        double[] doubleArray14 = new double[] { 3, 4 };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 10.0f, 0, 0.0d);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray14);
        double[][] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (int) (short) 0, doubleArray14);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] {};
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23);
        int[] intArray28 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.clone(intArray28);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray23, (java.lang.Object) intArray28);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) (byte) 10);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray33, (double) 7);
        double[][] doubleArray36 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, doubleArray33);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) (short) 0, 6, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[52, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray2 = null;
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray2);
        java.lang.Class<?> wildcardClass4 = charArray3.getClass();
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, true);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray12, false);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray12, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false, false]");
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray28, (float) ' ', (int) (short) 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray28);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray15, (float) 0L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 10);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) (byte) 100, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray25, (double) 6);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, 0.0d, (int) (byte) -1, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray17 = new short[] { (byte) 1, (short) 0 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) (byte) 10);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray17, (short) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) (byte) 10);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, 3, 0);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray17);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[-1, 1, 0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.remove(floatArray0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 100.0f, (int) '#', (double) (-1));
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, (double) 3);
        double[] doubleArray29 = null;
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, true);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray15, (java.lang.Object) booleanArray18);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, false);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray27, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        long[] longArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray0, 0L, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        float[] floatArray6 = new float[] { (short) 0, (short) 0, 1, (short) -1, (-1), 3 };
        float[] floatArray13 = new float[] { (short) 0, (short) 0, 1, (short) -1, (-1), 3 };
        float[] floatArray20 = new float[] { (short) 0, (short) 0, 1, (short) -1, (-1), 3 };
        float[] floatArray27 = new float[] { (short) 0, (short) 0, 1, (short) -1, (-1), 3 };
        float[] floatArray34 = new float[] { (short) 0, (short) 0, 1, (short) -1, (-1), 3 };
        float[] floatArray41 = new float[] { (short) 0, (short) 0, 1, (short) -1, (-1), 3 };
        float[][] floatArray42 = new float[][] { floatArray6, floatArray13, floatArray20, floatArray27, floatArray34, floatArray41 };
        float[][][] floatArray43 = new float[][][] { floatArray42 };
        // The following exception was thrown during execution in test generation
        try {
            float[][][] floatArray45 = org.apache.commons.lang3.ArrayUtils.remove(floatArray43, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[0.0, 0.0, 1.0, -1.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 1.0, -1.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[0.0, 0.0, 1.0, -1.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 1.0, -1.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 1.0, -1.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 0.0, 1.0, -1.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray43);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, 4, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray1 = new boolean[] {};
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, false, 0);
        java.lang.Boolean[] booleanArray9 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray12 = new boolean[] {};
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false, 0);
        java.lang.Boolean[] booleanArray20 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray22);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray24);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray24);
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray24, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray24);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray24, false, (int) (byte) 100);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray24);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, true);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, true);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[]");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray7, longArray14);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray14, 1L, 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (short) 0, 0);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (byte) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray21, (byte) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, (int) '4');
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 0, (-1));
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray7, byteArray23);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray38, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.add(byteArray43, (byte) 100);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray43);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray0);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray21, true);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, false);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, 0, true);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray23, (int) (byte) 1);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray30);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, false, false, false]");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray17, (java.lang.Object) doubleArray18, 0);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray17, (float) (byte) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        double[] doubleArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray0, (double) 7);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        int[] intArray5 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray0, (java.lang.Object) intArray5);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray9, (int) (short) 100, 7);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[52, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        char[] charArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, '#', 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, (int) '#', (-1));
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) (byte) -1);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray10, '#');
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, ' ');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray16, (-1), 5);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, #, 4, #]");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d, 4, (double) 1);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (-1L));
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d, 9, (double) (short) -1);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (int) (byte) 0, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[97.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 97.0, 10.0, 1.0]");
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 0, (int) (short) 10);
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) '4', (int) (byte) 10);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray23);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray23);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray18, byteArray23);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(byteArray18, (byte) 1);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray18, (byte) 100);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 0, 10, 0, 0, 100, 0]");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        short[] shortArray5 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.clone(shortArray5);
        short[] shortArray8 = new short[] { (byte) 10 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray6, shortArray8);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray11);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '4');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, 1, 6);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray12, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ##44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ##44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , #, #, 4, 4]");
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        boolean[] booleanArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) '4', (int) (short) 10);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 0.0f);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) (byte) -1);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, 0.0f);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.clone(floatArray15);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray15);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray15);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, (float) 3);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray15);
        float[] floatArray28 = new float[] {};
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray28, 0.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(floatArray28, (float) (byte) 1);
        float[] floatArray38 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray28, floatArray38);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray38, (int) (short) 1, (int) '#');
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray42, 0.0f, 0);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray42);
        float[] floatArray47 = null;
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray47);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray40 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray40, (int) (short) 0, '4');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 2, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray14, charArray47);
        char[] charArray54 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.clone(charArray54);
        char[] charArray61 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.clone(charArray61);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.contains(charArray61, '4');
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.clone(charArray61);
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.addAll(charArray55, charArray61);
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.add(charArray61, ' ');
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray68);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.remove(charArray14, (int) (byte) 1);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a##4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a##4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, #, #, 4, #,  ]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "#4##a4a##4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "#4##a4a##4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#, 4, #, #, a, 4, a, #, #, 4, #,  ]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "###a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "###a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[#, #, #, a, 4]");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        char[] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray2 = org.apache.commons.lang3.ArrayUtils.remove(charArray0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        float[][][] floatArray0 = null;
        float[][] floatArray1 = new float[][] {};
        float[][] floatArray2 = new float[][] {};
        float[][] floatArray3 = new float[][] {};
        float[][] floatArray4 = new float[][] {};
        float[][] floatArray5 = new float[][] {};
        float[][] floatArray6 = new float[][] {};
        float[][][] floatArray7 = new float[][][] { floatArray1, floatArray2, floatArray3, floatArray4, floatArray5, floatArray6 };
        float[][][] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray7);
        int[] intArray11 = new int[] { 'a', (byte) 0 };
        int[] intArray14 = new int[] { 'a', (byte) 0 };
        int[][] intArray15 = new int[][] { intArray11, intArray14 };
        int[] intArray22 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray29 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray36 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray37 = new int[][] { intArray22, intArray29, intArray36 };
        int[][] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray15, intArray37);
        java.lang.Object[] objArray39 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray41 = new byte[] { (byte) 100 };
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray41, (int) '4', (int) (byte) 10);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray41, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray47);
        int int49 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray47);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray39, (java.lang.Object) byteArray47);
        java.lang.Byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray47);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray15, (java.lang.Object[]) byteArray51);
        int[][] intArray55 = org.apache.commons.lang3.ArrayUtils.subarray(intArray15, (-1), 3);
        int[][] intArray56 = org.apache.commons.lang3.ArrayUtils.toArray(intArray55);
        java.lang.Short[] shortArray57 = new java.lang.Short[] {};
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray57, (short) (byte) 0);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.clone(shortArray59);
        java.lang.Short[] shortArray67 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray67, (short) 100);
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray69, (short) 1);
        java.lang.Short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray69);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray72);
        java.lang.Short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray73);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray59, shortArray73);
        int int77 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray73, (short) (byte) 1);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) intArray55, (java.lang.Object) (byte) 1);
        int int79 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray8, (java.lang.Object) (byte) 1);
        java.lang.Object[][] objArray80 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[][]) floatArray8);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[]");
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(objArray80);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray7 = new boolean[] {};
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, false, 0);
        java.lang.Boolean[] booleanArray15 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray17);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray6, booleanArray19);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray19, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.add(booleanArray22, (int) 'a', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, false, true]");
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray11 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, 1);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, 7, (-1));
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, 6, (int) (byte) 100);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.clone(shortArray21);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '#', (-1));
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '4', (int) (byte) -1);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(charArray26, '4');
        java.lang.Character[] charArray30 = org.apache.commons.lang3.ArrayUtils.toObject(charArray26);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray31);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.addAll(charArray12, charArray31);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.add(charArray33, 0, '4');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, a, #, #, 4, #, a, #, #, 4, #]");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.lang.Long[] longArray4 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) 4);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray6, (long) (byte) 100, 10);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray6, (long) (-1), 2);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, (int) (short) 1, 0);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray15, (long) (byte) 10);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray7);
        int[] intArray15 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) 0, (int) (byte) 1);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray15, (int) (byte) -1);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray8, intArray15);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray24);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, -1, -1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35, 1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        double[] doubleArray22 = new double[] { 'a', 10, 1.0d };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray22, (double) (short) 0, (double) 10.0f);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray22, 0.0d);
        double[] doubleArray31 = new double[] { 'a', 10, 1.0d };
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray31, (double) (short) 0, (double) 10.0f);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 0.0d);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray22, doubleArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray37);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, (double) 10);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray37);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.add(doubleArray37, (double) (-1));
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray18, doubleArray43);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, 0.0d, 0);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) 8, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray1, (byte) 100, 100);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, (int) (short) 0, 0);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray21, (byte) 10);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray24);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1 };
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray24, byteArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray1, byteArray28);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        short[] shortArray10 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray10, (short) (byte) 0, 0);
        short[] shortArray19 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.clone(shortArray19);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray10, shortArray20);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray22, (short) 10);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray22, (int) (byte) 100, (int) '4');
        java.lang.Short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray22);
        short[] shortArray31 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray31);
        short[] shortArray33 = null;
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray31, shortArray33);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray31, (short) -1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.remove(shortArray31, (int) (byte) 1);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.add(shortArray31, (short) 10);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.remove(shortArray40, 1);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray4, (java.lang.Object) shortArray43);
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.clone(shortArray43);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.clone(shortArray45);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray4, 1);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, 4, 2);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray4, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) -1);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (short) 0, 0);
        byte[] byteArray20 = null;
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray16, byteArray20);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray22, (int) '#', 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray16, (java.lang.Object) doubleArray25);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray16, (byte) 100);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray28, 0, (int) (short) 10);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray28, (byte) 0);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray33);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(byteArray34, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 0, 100, -1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray10 = org.apache.commons.lang3.ArrayUtils.remove(charArray5, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray8, (short) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.remove(shortArray8, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1, 10]");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        boolean[] booleanArray5 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray11 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray18 = new boolean[][] { booleanArray5, booleanArray11, booleanArray17 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        double[] doubleArray30 = new double[] { 'a', 10, 1.0d };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) 0, (double) 10.0f);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, 0.0d);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray25, (java.lang.Object) int35);
        boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, (java.lang.Object) intArray25);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25, (int) (short) -1);
        java.lang.Integer[] intArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray44 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray44, false);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray41, (java.lang.Object[]) booleanArray44);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray41);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray48, 4);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.addAll(intArray40, intArray48);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.remove(intArray51, (int) (byte) 0);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 1, 10, 10, 1]");
    }
}

