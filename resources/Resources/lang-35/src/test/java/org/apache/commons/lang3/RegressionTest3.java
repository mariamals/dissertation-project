package org.apache.commons.lang3;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray6, 0);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray19, (int) (byte) -1);
        int[] intArray32 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str38 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray32, "");
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.subarray(intArray32, 10, 3);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.addAll(intArray19, intArray32);
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray43);
        int[] intArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, 0);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray12);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{1,10,-1,0,1,35}" + "'", str38, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 0, 1, 35, 0, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 1, 35, 0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
        int[] intArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0);
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0);
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray2, (int) (short) 100);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (byte) 0, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray1, (float) (byte) 1);
        float[] floatArray11 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray11);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray1);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray1, (float) '#');
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.remove(floatArray1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, true, (int) (byte) 10);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray19);
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28, true);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray30, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.add(booleanArray30, 0, true);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray30);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.add(booleanArray30, 0, true);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray30, true);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray30, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[true, true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[true, true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray16);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray27);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray27, (int) ' ', (int) (short) -1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray27, (byte) 1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray33);
        java.lang.Object[] objArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray37 = new byte[] { (byte) 100 };
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray37, (int) '4', (int) (byte) 10);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray37, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray43);
        int int45 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray35, (java.lang.Object) byteArray43);
        java.lang.Byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray43);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray47);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray48, (byte) 100, (int) '4');
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray33, byteArray48);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(byteArray48, (byte) -1);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray22 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0, 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (short) 100, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray29);
        float[] floatArray31 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 0.0f);
        float[] floatArray34 = new float[] {};
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray34, 0.0f);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, (float) (byte) -1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray34);
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, 0.0f);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray34, floatArray43);
        java.lang.Float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray34);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray45);
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray45);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray6, 9, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) '4', (int) (byte) 10);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray14);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, (int) (short) 1, (byte) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray14);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray8);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray10, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 1, 10, -1, 1, 35]");
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray4 = new double[] { 'a', 10, 1.0d };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray4, (double) (short) 0, (double) 10.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray4, 0.0d);
        double[] doubleArray13 = new double[] { 'a', 10, 1.0d };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray13, (double) (short) 0, (double) 10.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray13, 0.0d);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray19);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray19, 0.0d);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray19, (int) ' ', 10);
        double[] doubleArray27 = new double[] { 100.0d };
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray27, (double) 10.0f);
        double[] doubleArray32 = new double[] { 3, 4 };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray27, doubleArray32);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray32);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray32, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray32);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, 100.0d, (-1), (double) 100);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) 9, (double) 'a');
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray19);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 9);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray3, (short) 100);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 5);
        float[] floatArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray14);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, 0.0f);
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray11);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 'a', 10, 1.0d };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray4, (double) (short) 0, (double) 10.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray4, 0.0d);
        double[] doubleArray13 = new double[] { 'a', 10, 1.0d };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray13, (double) (short) 0, (double) 10.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray13, 0.0d);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) 10);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray19);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray19, (int) (byte) 100, 0);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, (double) '#', (int) ' ', (double) '#');
        java.lang.Double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray0, doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, true);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray15, (java.lang.Object) booleanArray18);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, false);
        boolean[] booleanArray28 = new boolean[] {};
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray28, false, 0);
        java.lang.Boolean[] booleanArray36 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray36, false);
        boolean[] booleanArray39 = new boolean[] {};
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray39, false, 0);
        java.lang.Boolean[] booleanArray47 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray47, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray49);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray39, booleanArray49);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray38, booleanArray51);
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray28, booleanArray51);
        java.lang.Boolean[] booleanArray58 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray58, false);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray58, false);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray62);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray51, booleanArray62);
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray51);
        boolean[] booleanArray67 = org.apache.commons.lang3.ArrayUtils.add(booleanArray65, true);
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray27, booleanArray65);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[false, true, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, true, false, true]");
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        int[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.add(intArray0, (int) (byte) 0);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray0);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (int) (byte) 0, (float) '#');
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 10, (float) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[35.0]");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray7);
        int[] intArray15 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) 0, (int) (byte) 1);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray15, (int) (byte) -1);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray8, intArray15);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.remove(intArray15, 3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, -1, -1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 1, 35]");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray5, (int) '4', 8);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray15 = org.apache.commons.lang3.ArrayUtils.add(charArray12, 9, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10, (short) -1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap9 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) shortArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '10', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, 10, -1, 0, 0]");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray14 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.clone(shortArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 10);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (byte) 100, (int) '4');
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray26 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        short[] shortArray28 = null;
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) -1);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.remove(shortArray26, (int) (byte) 1);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.add(shortArray26, (short) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.remove(shortArray35, 1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray17, shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (short) 0, 0);
        java.lang.Short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.remove(shortArray17, 2);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[-1, 1, 0, 100, -1, 100, -1, -1, 10]");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) '#', 0);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.subarray(longArray10, 0, 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) (byte) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray9, (int) (short) 0, 2);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) 0, (int) (byte) 100);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 0);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (int) (byte) 0, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.add(booleanArray5, 0, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false]");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        float[][] floatArray0 = null;
        float[] floatArray6 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray12 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray18 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray24 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray30 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray31 = new float[][] { floatArray6, floatArray12, floatArray18, floatArray24, floatArray30 };
        float[][] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray31);
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        java.lang.Integer[] intArray47 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray47);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray48, (-1));
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray48);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray48);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray0, (java.lang.Object) intArray40);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray40, 0, 2);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray40);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) (byte) 1);
        short[] shortArray22 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray22, (short) (byte) 0, 0);
        short[] shortArray28 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray28);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray28);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray30);
        java.lang.Short[] shortArray38 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) 100);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) 1);
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray40);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43);
        short[] shortArray47 = new short[] { (byte) 1, (short) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray47, (short) (byte) 10);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray47, (short) 0);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.add(shortArray51, (short) (byte) 1);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray44, shortArray51);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) 100, 3);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray44);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.add(shortArray44, (short) 100);
        short[] shortArray63 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray63);
        short[] shortArray65 = null;
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray63, shortArray65);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray63, (short) -1);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.remove(shortArray63, (int) (byte) 1);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.add(shortArray63, (short) 10);
        short[] shortArray75 = new short[] { (byte) 1, (short) 0 };
        int int77 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray75, (short) (byte) 10);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray75, (short) 0);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.add(shortArray79, (short) (byte) 1);
        short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray63, shortArray79);
        short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray44, shortArray82);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray82);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[-1, 1, 0, 100, 1, -1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[-1, 100, -1, 0, 100, 1, 100]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[100]");
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[1]");
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[1, 1, 100]");
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[-1, 100, -1, 0, 100, 1, 100, 1, 1]");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        java.lang.String str3 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{0.0}" + "'", str3, "{0.0}");
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray4, 1);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, 4, 2);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) 0);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(intArray18, (int) (short) 0);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.add(intArray18, (int) 'a');
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray23);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray24, 3, (int) (short) 0);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray24, (int) (byte) 1, (int) '#');
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, -1, 0, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (long) 6);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray29 = org.apache.commons.lang3.ArrayUtils.remove(longArray10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, 6]");
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.lang.CharSequence[][] charSequenceArray0 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][] charSequenceArray1 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][] charSequenceArray2 = org.apache.commons.lang3.ArrayUtils.addAll(charSequenceArray0, charSequenceArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charSequenceArray1);
        org.junit.Assert.assertNotNull(charSequenceArray0);
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) -1, (int) (short) 0);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray6, 5);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.add(intArray6, 3, (int) (byte) 1);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray18);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray18, 9);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 8);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) ' ', (int) (short) -1);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray9);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray11);
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toObject(longArray11);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.subarray(longArray11, (int) (byte) 0, (int) (short) 100);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray17, (long) (short) 0, (int) '4');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray8, false, 8);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray3 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray3);
        short[] shortArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) shortArray5, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray0);
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray16 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray10, (java.lang.Object[]) charArray16);
        java.lang.String[] strArray20 = org.apache.commons.lang3.ArrayUtils.addAll(strArray0, strArray10);
        java.io.Serializable[] serializableArray21 = org.apache.commons.lang3.ArrayUtils.clone((java.io.Serializable[]) strArray20);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Comparable<java.lang.String>[]) strArray20);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(serializableArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] {};
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19, (double) 2);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray22);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray23, (double) (-1.0f), (double) (short) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray23, (double) (short) 10, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[100, 1, 0]");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, #, 4, #]");
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        int[][][] intArray0 = new int[][][] {};
        int[][][] intArray1 = org.apache.commons.lang3.ArrayUtils.clone(intArray0);
        int[][][] intArray2 = new int[][][] {};
        int[][][] intArray3 = org.apache.commons.lang3.ArrayUtils.clone(intArray2);
        int[][][] intArray4 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray2);
        short[] shortArray10 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.clone(shortArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray11, (short) (byte) 100);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray11, (short) 1);
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray4, (java.lang.Object[]) shortArray16);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10, -1, -1, 100, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray18, (byte) 0, 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, 8, (short) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        int[] intArray0 = null;
        int[] intArray7 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (byte) 0, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray18);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, (int) (short) -1, (int) (byte) -1);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray0, (int) (byte) 100, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] {};
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19, (double) 2);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, 9, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[97.0, 10.0, 1.0]");
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        byte[] byteArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray0, (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray14, '4');
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray14, ' ', 0);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, '#');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, a, #, 4, #]");
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        short[] shortArray1 = new short[] { (short) -1 };
        short[] shortArray3 = new short[] { (short) -1 };
        short[] shortArray5 = new short[] { (short) -1 };
        short[] shortArray7 = new short[] { (short) -1 };
        short[] shortArray9 = new short[] { (short) -1 };
        short[][] shortArray10 = new short[][] { shortArray1, shortArray3, shortArray5, shortArray7, shortArray9 };
        short[][] shortArray12 = org.apache.commons.lang3.ArrayUtils.remove(shortArray10, 4);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray12);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray21, true, (int) 'a');
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray12, (java.lang.Object) 'a');
        short[] shortArray28 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray28);
        short[] shortArray30 = null;
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray28, shortArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray28, (short) -1);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.remove(shortArray28, (int) (byte) 1);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray28, (short) 10);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.remove(shortArray37, 1);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.remove(shortArray39, (int) (short) 0);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray41, (int) (byte) 100, (int) (short) 1);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.add(shortArray44, (short) (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray46);
        short[][] shortArray48 = org.apache.commons.lang3.ArrayUtils.add(shortArray12, shortArray46);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray46, (short) 0, 5);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[-1]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[-1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[-1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[10]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[100]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray3 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray3);
        short[] shortArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) shortArray5, 0);
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray11, (java.lang.Object) 1L);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) byteArray15, (int) (byte) 1);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) 100);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) 1);
        java.lang.Short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray26);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray29);
        short[] shortArray33 = new short[] { (byte) 1, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray33, (short) (byte) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray33, (short) 0);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.add(shortArray37, (short) (byte) 1);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray30, shortArray37);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) 100, 3);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray0, (java.lang.Object) int43);
        java.lang.CharSequence[] charSequenceArray47 = org.apache.commons.lang3.ArrayUtils.add((java.lang.CharSequence[]) strArray0, (int) (byte) 0, (java.lang.CharSequence) "{a,#,#,4,#}");
        java.lang.CharSequence[] charSequenceArray48 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.CharSequence[]) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertNotNull(charSequenceArray48);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        char[] charArray0 = null;
        char[] charArray1 = null;
        java.lang.Character[] charArray7 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, 'a');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, 'a');
        char[] charArray16 = new char[] { '4', '#', 'a' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray16, 0, (int) (byte) 1);
        char[] charArray25 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray25);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray25, '#', (-1));
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray25, '4', (int) (byte) -1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray25);
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray9);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray1);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4,  , #, #, 4]");
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        char[] charArray6 = new char[] { 'a', ' ', 'a', '4', '#', '4' };
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray6, 2, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray9, (int) '#', 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a a4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a a4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a,  , a, 4, #, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a aa4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a aa4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a, a, 4, #, 4]");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray7);
        int[] intArray15 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) 0, (int) (byte) 1);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray15, (int) (byte) -1);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.addAll(intArray8, intArray15);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, 9);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, -1, -1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.lang.Float[] floatArray3 = new java.lang.Float[] { 100.0f, 10.0f, 1.0f };
        java.lang.Float[][] floatArray4 = new java.lang.Float[][] { floatArray3 };
        java.lang.Float[] floatArray8 = new java.lang.Float[] { 100.0f, 10.0f, 1.0f };
        java.lang.Float[][] floatArray9 = new java.lang.Float[][] { floatArray8 };
        java.lang.Float[] floatArray13 = new java.lang.Float[] { 100.0f, 10.0f, 1.0f };
        java.lang.Float[][] floatArray14 = new java.lang.Float[][] { floatArray13 };
        java.lang.Float[][][] floatArray15 = new java.lang.Float[][][] { floatArray4, floatArray9, floatArray14 };
        java.lang.Float[][] floatArray17 = new java.lang.Float[][] {};
        java.lang.Float[] floatArray19 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray21 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray22 = new java.lang.Float[][] { floatArray19, floatArray21 };
        java.lang.Float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, floatArray23);
        java.lang.Float[][] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Float[][][] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 9, floatArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray25);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray1 = new double[] {};
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[][] doubleArray5 = new double[][] { doubleArray0, doubleArray1, doubleArray2, doubleArray3, doubleArray4 };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray9 = new double[] { 100.0d };
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) 10.0f);
        double[] doubleArray14 = new double[] { 3, 4 };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 10.0f, 0, 0.0d);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray14);
        double[][] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (int) (short) 0, doubleArray14);
        double[] doubleArray26 = new double[] { 'a', 10, 1.0d };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray26, (double) (short) 0, (double) 10.0f);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, 0.0d);
        double[] doubleArray35 = new double[] { 'a', 10, 1.0d };
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray35, (double) (short) 0, (double) 10.0f);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray35, 0.0d);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray26, doubleArray35);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray41);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray41, 0.0d);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray41, (int) ' ', 10);
        double[][] doubleArray48 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 10L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 0L);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 1);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray2, 0);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.add(booleanArray2, 0, false);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray2, false, 100);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray2 = null;
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray2);
        char[] charArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray2, charArray4);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray6, '#', (int) (short) 1);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 10);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (byte) -1, 7);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 1);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(byteArray2, (byte) 0);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.clone(byteArray2);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.subarray(longArray1, 0, (int) (byte) 1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray8);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray9, 1, 0);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.add(intArray12, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 1, 10, 10, 1, 1]");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        long[] longArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray0, (long) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) 1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = org.apache.commons.lang3.ArrayUtils.remove(intArray6, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[10, -1, 0, 1, 35]");
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        short[] shortArray11 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray11, (short) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray11);
        short[] shortArray17 = new short[] { (byte) 1, (short) 0 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) (byte) 10);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray17, (short) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray17, (short) 0);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) (byte) 10);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, 3, 0);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray11, shortArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray32);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[0, 1, 100, 0, 1, -1]");
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        byte[] byteArray0 = null;
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) 0, 0);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray10, (byte) 0, (int) (byte) 100);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.clone(byteArray10);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray10);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 0, (int) (short) 10);
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) '4', (int) (byte) 10);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray23);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray23);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray18, byteArray23);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(byteArray18, (byte) 1);
        java.lang.Byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.remove(byteArray18, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray37);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 0, (int) (short) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray23, (byte) -1);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray26, (int) (short) 10, 7);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray32, (byte) 100);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray40, (byte) 0, 9);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray40);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 0, 10, 0, 0, 100, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) 'a');
        int[] intArray20 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.add(intArray20, (int) (byte) 0, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.clone(intArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray32, (int) (short) 0);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) 'a');
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray13, (java.lang.Object) intArray38);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray40, 0.0f);
        float[] floatArray43 = new float[] {};
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray43, 0.0f);
        float[] floatArray46 = new float[] {};
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, 0.0f);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray46, (float) (byte) -1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray43, floatArray46);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray43);
        float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray40, floatArray43);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, 10.0f);
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, 10.0f);
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray40, 10.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[0.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[0.0, 0.0, 100.0, -1.0, 35.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 1);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 0);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 0, 10);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, 4, (int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0]");
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, false);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, false);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, 'a', (int) (short) -1);
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, ' ');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(charArray7, 'a');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, '#');
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray7, 'a', (-1));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4 #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4 #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4,  , #, 4]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 10);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) (byte) 100, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        java.lang.Double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) 1, (int) (byte) 100);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray22, (-1));
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[10, 0, 1, 35]");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        char[] charArray13 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(charArray13, '4');
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.toObject(charArray13);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '#');
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.toObject(charArray18);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21, ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray21);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, true]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true]");
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, (int) (short) 0);
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray13);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10]");
        org.junit.Assert.assertNotNull(shortArray16);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        double[] doubleArray3 = new double[] { (-1L), 10L, 10 };
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) -1, (int) 'a', (double) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (-1), (double) (byte) 0);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) -1, 3, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray15 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        char[] charArray22 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(charArray22, '4');
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.addAll(charArray16, charArray22);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray16, ' ', (int) (byte) -1);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.subarray(charArray16, (int) '#', 100);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray33);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a, #, #, 4, #]");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray39, (int) '#', 0);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray50 = new double[] { 'a', 10, 1.0d };
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray50, (double) (short) 0, (double) 10.0f);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray50, 0.0d);
        double[] doubleArray59 = new double[] { 'a', 10, 1.0d };
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray59, (double) (short) 0, (double) 10.0f);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray59, 0.0d);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray50, doubleArray59);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray65);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray65, 0.0d);
        double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray65, (int) ' ', 10);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray39, doubleArray71);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray71);
        int int76 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray71, (double) 7, (int) 'a');
        java.lang.Double[] doubleArray77 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(doubleArray77);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (byte) 0, 5, (double) 8);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray8, false);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray10, true, (int) (byte) 10);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, true);
        float[][] floatArray16 = null;
        float[] floatArray22 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray28 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray34 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray40 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray46 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray47 = new float[][] { floatArray22, floatArray28, floatArray34, floatArray40, floatArray46 };
        float[][] floatArray48 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray47);
        float[][] floatArray49 = org.apache.commons.lang3.ArrayUtils.clone(floatArray47);
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray54, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray56);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray49, (java.lang.Object) booleanArray56);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray56);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray56);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray56, false);
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray56, 0, (int) ' ');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, true, false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, true, false, true]");
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        java.lang.Class<?> wildcardClass15 = charArray6.getClass();
        double[] doubleArray17 = new double[] { 100.0d };
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) 10.0f);
        double[] doubleArray22 = new double[] { 3, 4 };
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray17, (double) 0.0f);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, 0.0d, 1, (double) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray17);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) wildcardClass15, (java.lang.Object) doubleArray17);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) 0L, (double) 0L);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, 0.0d, (int) (short) 100);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.lang.Long[][][] longArray0 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray1 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray2 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray3 = new java.lang.Long[][][] {};
        java.lang.Long[][][] longArray4 = new java.lang.Long[][][] {};
        java.lang.Long[][][][] longArray5 = new java.lang.Long[][][][] { longArray0, longArray1, longArray2, longArray3, longArray4 };
        java.lang.Long[][][][] longArray7 = org.apache.commons.lang3.ArrayUtils.remove(longArray5, 3);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) longArray5);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray5);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.lang.Long[] longArray4 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) 4);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray6, (long) (byte) 100, 10);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray6, (long) (-1), 2);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, (int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray17 = org.apache.commons.lang3.ArrayUtils.remove(longArray15, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[100, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray19);
        int int21 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray19);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) 100);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray24);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.add(longArray1, (long) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray6, (long) (byte) -1, (int) (byte) 100);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        java.lang.Long[] longArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap16 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray15);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray15, 10L);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, 0L, 2);
        java.lang.Long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toObject(longArray18);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray22, (-1L));
        long[] longArray25 = new long[] {};
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray26, 0, (long) (byte) 1);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray26);
        long[] longArray31 = new long[] {};
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.clone(longArray31);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray32, (long) '#');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray32);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray32, (long) 0);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray24, longArray32);
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.add(longArray24, (-1L));
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray42);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(objMap16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1]");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (-1.0f));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray7, (float) 1);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.io.Serializable[][] serializableArray0 = null;
        java.io.Serializable[][] serializableArray3 = org.apache.commons.lang3.ArrayUtils.subarray(serializableArray0, (int) '#', (int) ' ');
        org.junit.Assert.assertNull(serializableArray3);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        char[] charArray0 = null;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.add(charArray0, 'a');
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[a]");
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] {};
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, (double) 2);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray3, (java.lang.Object[]) doubleArray5);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, (double) 5);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        float[] floatArray5 = new float[] { 1, (-1), (byte) 0, '#', (-1) };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) ' ');
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[1.0, -1.0, 0.0, 35.0, -1.0]");
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        java.lang.Long[] longArray3 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray7 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray11 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray15 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray19 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray20 = new java.lang.Long[][] { longArray3, longArray7, longArray11, longArray15, longArray19 };
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray20, longArray21);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray21);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray23, (long) 8);
        long[] longArray26 = new long[] {};
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.clone(longArray26);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.add(longArray26, 0, (long) 4);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.addAll(longArray23, longArray30);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[4]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[4]");
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        java.lang.Long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0);
        long[] longArray3 = null;
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray0, longArray3);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.add(longArray3, (long) 'a');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[97]");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        int[] intArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(intArray0, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray11, '#');
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.remove(charArray11, 0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11, (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap15 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) shortArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '-1', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[-1, 100, -1, 0, 100, 1]");
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) -1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray25, (long) 100);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) 2, 8);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 10, (int) '4');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray13, (byte) 0, (-1));
        java.lang.String[] strArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray23 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        short[] shortArray25 = null;
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray20, (java.lang.Object) shortArray25, 0);
        java.lang.Byte[] byteArray31 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray31, (java.lang.Object) 1L);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray20, (java.lang.Object) byteArray35, (int) (byte) 1);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray35, (byte) 100);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray13, byteArray35);
        java.lang.Object[] objArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray43 = new byte[] { (byte) 100 };
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray43, (int) '4', (int) (byte) 10);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray43, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray49);
        int int51 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray49);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray41, (java.lang.Object) byteArray49);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray49, (byte) 10);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray40, byteArray49);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray49, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 1, 0, 1]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, (int) (short) 0, 0);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray21, (byte) 10);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray24);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray10, byteArray24);
        byte[] byteArray27 = null;
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray24, byteArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray27, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(charArray14, '4');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(charArray24, '4');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, 7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (-1.0f), (int) (short) 0, 0.0d);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 1);
        double[] doubleArray28 = new double[] { 'a', 10, 1.0d };
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) 0, (double) 10.0f);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, 0.0d);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray28);
        java.lang.Double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray28);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.add(doubleArray28, (int) (short) 0, (double) (byte) 1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray16);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray17, (java.lang.Object) doubleArray18, 0);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray17, (float) (byte) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        java.lang.Byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        float[] floatArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) '#', (int) '#');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) 0, (int) (byte) 100);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.clone(byteArray9);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (byte) 100);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, 5, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 10.0f, (double) (byte) 100);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray1, 0, (int) '#');
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) (byte) -1, (int) '#');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray40 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray40, (int) (short) 0, '4');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 2, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray14, charArray47);
        char[] charArray54 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.clone(charArray54);
        char[] charArray61 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.clone(charArray61);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.contains(charArray61, '4');
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.clone(charArray61);
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.addAll(charArray55, charArray61);
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.add(charArray61, ' ');
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray68);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a##4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a##4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, #, #, 4, #,  ]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "#4##a4a##4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "#4##a4a##4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#, 4, #, #, a, 4, a, #, #, 4, #,  ]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10, (short) -1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) -1);
        short[] shortArray13 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(shortArray13, (short) 10);
        short[] shortArray20 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray20, (short) 10);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray13, shortArray20);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.add(shortArray13, (short) (byte) 1);
        short[] shortArray31 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray31, (short) (byte) 0, 0);
        short[] shortArray37 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray37);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray31, shortArray37);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray25, shortArray39);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray40);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray41, (short) (byte) 100, (int) (short) 0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[-1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[10, -1, 10, -1, 0, 0, -1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(byteArray8, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (byte) 100);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray9, 0, (int) (short) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, 0.0d, 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, 7, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) 0, (int) (short) 0);
        short[] shortArray12 = new short[] { (byte) 1, (short) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) (byte) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray12, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray12, (short) 100);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 0);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray12);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.clone(shortArray12);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray12);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, -1, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[10, -1, 10, 1, 0]");
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.lang.Double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) (short) 100);
        org.junit.Assert.assertNull(doubleArray2);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray6, (double) (short) 10);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 0, 100, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[3.0, 4.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray3 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray3);
        short[] shortArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) shortArray5, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray0);
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray16 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray10, (java.lang.Object[]) charArray16);
        java.lang.String[] strArray20 = org.apache.commons.lang3.ArrayUtils.addAll(strArray0, strArray10);
        java.lang.Object obj21 = null;
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray10, obj21, 1);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray25 = new double[] {};
        double[] doubleArray26 = new double[] {};
        double[] doubleArray27 = new double[] {};
        double[] doubleArray28 = new double[] {};
        double[][] doubleArray29 = new double[][] { doubleArray24, doubleArray25, doubleArray26, doubleArray27, doubleArray28 };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray33 = new double[] { 100.0d };
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) 10.0f);
        double[] doubleArray38 = new double[] { 3, 4 };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray33, doubleArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray38, (double) 10.0f, 0, 0.0d);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray38);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray31, doubleArray38);
        double[][] doubleArray46 = org.apache.commons.lang3.ArrayUtils.add(doubleArray29, (int) (short) 0, doubleArray38);
        java.lang.Short[] shortArray53 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray53, (short) 100);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray55, (short) 1);
        java.lang.Short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray55);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray46, (java.lang.Object) shortArray55);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray10, (java.lang.Object) int59, (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray1 = null;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray1, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray3);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray3, 0, 0);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[true]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.lang.Integer[] intArray0 = new java.lang.Integer[] {};
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) '#');
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (byte) 10);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) '#');
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (byte) 10);
        int[] intArray16 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray17, 10, 4);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray17, (int) (byte) 0, (int) (short) 100);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.addAll(intArray9, intArray17);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray17);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray25);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray7, 9, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) (-1.0f));
        java.lang.Class<?> wildcardClass17 = doubleArray14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 4, 3 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, 1);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, 2);
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray13 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, 'a');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray7, (java.lang.Object[]) charArray13);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, ' ');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, '4');
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray22, ' ');
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray2, (java.lang.Object) charArray22);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[4, 3]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[4, 3]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[4, 3]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[4, 3]");
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.remove(longArray4, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, 100L, 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray2, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray2, true);
        boolean[] booleanArray8 = null;
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray7, booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray0, (long) (short) 100, (int) (byte) 1);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.subarray(longArray5, (int) (byte) -1, 4);
        long[] longArray9 = new long[] {};
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, 0, (long) (byte) 1);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray15, 0L, (int) (byte) 0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray15);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray19, (int) (short) 0, (long) (short) 0);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray22);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.lang.Character[] charArray6 = new java.lang.Character[] { 'a', '4', ' ', '4', ' ', ' ' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, 'a');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a4 4  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a4 4  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, 4,  , 4,  ,  ]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a4 4  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a4 4  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, 4,  , 4,  ,  ]");
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 4);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray17, (double) 10.0f, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray17, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = null;
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(longArray4, (long) 4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, 10, (int) (short) 10);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray6, (double) (-1.0f));
        double[] doubleArray20 = new double[] { 100.0d };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) 10.0f);
        double[] doubleArray25 = new double[] { 3, 4 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray20, doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray28, (int) '#', 0);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray28);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) (-1L), (double) (short) 1);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) 1L, (double) 4);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (double) (short) 100);
        java.lang.Class<?> wildcardClass45 = doubleArray25.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[3.0, 4.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[3.0, 4.0, 100.0]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        double[] doubleArray0 = null;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) (short) 10, 10);
        org.junit.Assert.assertNull(doubleArray3);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (byte) 10);
        java.lang.Class<?> wildcardClass20 = longArray17.getClass();
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int[] intArray23 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray23);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray23, (int) (byte) 0, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.clone(intArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(intArray35, (int) (short) 0);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.add(intArray35, (int) 'a');
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.clone(intArray35);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.addAll(intArray23, intArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray23, (int) (byte) 100);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray16, (java.lang.Object) int43);
        short[] shortArray50 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray50, (short) (byte) 0, 0);
        short[] shortArray56 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray50, shortArray56);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.remove(shortArray58, 1);
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray60, 7, (-1));
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray60, 6, (int) (byte) 100);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray16, (java.lang.Object) shortArray60);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[-1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray0);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, 0.0f);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, 0.0f);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) '4', 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.lang.Short[] shortArray0 = new java.lang.Short[] {};
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) (byte) 0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) (byte) 10);
        short[] shortArray8 = new short[] { (byte) 1, (short) 0 };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) (byte) 10);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) 0);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray8);
        short[] shortArray19 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) (byte) 0, 0);
        short[] shortArray28 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.clone(shortArray28);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray31);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray31, (short) (byte) 1, 3);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray31);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        short[] shortArray15 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0, 0);
        short[] shortArray24 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray8, (java.lang.Object) shortArray27);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) (byte) 1, 7);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.clone(shortArray27);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.add(shortArray34, (short) (byte) -1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, -1]");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, 10.0f, 3);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray17);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) 1, (int) (byte) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = org.apache.commons.lang3.ArrayUtils.remove(intArray22, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray12);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray12, byteArray16);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray16);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 1]");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray7, true, (int) 'a');
        boolean[] booleanArray11 = null;
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray11);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray16, (float) (byte) -1);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray16, 100.0f);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray16);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray1 = null;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray1, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray3);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray3, 0, 0);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray7);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[true]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray17);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, 7, 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        int[] intArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(intArray0, 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, (int) (short) 0, 100.0d);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (-1.0f), 4, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, (float) (byte) -1);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray9, 0.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, 0.0f);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray9);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray9);
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, 0.0f);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(floatArray20, (float) (byte) 1);
        float[] floatArray30 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray30);
        float[] floatArray32 = new float[] {};
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.add(floatArray32, 0.0f);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(floatArray32, (float) (byte) 1);
        float[] floatArray42 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray32, floatArray42);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, (float) 0, 0);
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray32, (int) (short) 100, (int) '#');
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray49);
        float[] floatArray51 = new float[] {};
        float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.add(floatArray51, 0.0f);
        float[] floatArray54 = new float[] {};
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.add(floatArray54, 0.0f);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray54, (float) (byte) -1);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray51, floatArray54);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray49, floatArray54);
        float[] floatArray61 = new float[] {};
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.add(floatArray61, 0.0f);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray63);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray19, floatArray54);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray54);
        float[] floatArray68 = org.apache.commons.lang3.ArrayUtils.add(floatArray54, (float) (byte) -1);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.contains(floatArray68, (float) (short) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[0.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, 'a');
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray25);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray29 = org.apache.commons.lang3.ArrayUtils.add(charArray25, (int) (short) 100, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4]");
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray15 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.clone(shortArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray16, (short) (byte) 100);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray16, (short) 1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray16);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray16, (int) (short) 100, 6);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray16, (int) (short) -1, 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray16, (short) 0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[10, -1, -1, 100, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[-1, 100, -1, 0, 100, 1, 10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray13, (long) (short) -1);
        double[] doubleArray17 = new double[] { 100.0d };
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) 10.0f);
        double[] doubleArray22 = new double[] { 3, 4 };
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray22, (double) 10.0f, 0, 0.0d);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray22, 10.0d, 3, 0.0d);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray22, (double) (-1.0f));
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray34, (double) (byte) 100);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) (short) -1, (java.lang.Object) doubleArray34);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Byte[] byteArray13 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) (short) 0, 0);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray15, byteArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray10, (java.lang.Object) byteArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray25);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Object obj1 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray0, obj1);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, 8, (float) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(shortArray2, (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray10, true, 10);
        java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray10, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) '#', (int) (byte) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray6 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray7 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray8 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray9 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray10 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray11 = new java.lang.Integer[][] { intArray5, intArray6, intArray7, intArray8, intArray9, intArray10 };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray18, intArray25 };
        java.lang.Integer[][] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray11, intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray4, (java.lang.Object) intArray26);
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) 10);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) ' ');
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray33, (long) 'a');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, ' ');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4]");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        short[] shortArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) -1, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) (byte) -1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray25, (long) 100);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.add(longArray25, (long) 2);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray34 = org.apache.commons.lang3.ArrayUtils.add(longArray25, 100, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[1, 1, 2]");
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray6 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.clone(shortArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray7, 4);
        java.lang.Class<?>[] wildcardClassArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray16 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray10, (java.lang.Object) shortArray17, 4);
        java.lang.Class<?>[] wildcardClassArray20 = org.apache.commons.lang3.ArrayUtils.addAll(wildcardClassArray0, wildcardClassArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.ArrayUtils.remove((java.lang.reflect.Type[]) wildcardClassArray0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray20);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 0.0d, 0.0d, 100.0d };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3, (double) (short) 1);
        char[] charArray11 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(charArray11, '4');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(charArray11, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray11);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray11, '#', (int) '4');
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.toObject(charArray11);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray3, (java.lang.Object) charArray22);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, 4, #, #, a]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        double[] doubleArray21 = new double[] { 100.0d };
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray21, (double) 10.0f);
        double[] doubleArray26 = new double[] { 3, 4 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray21, doubleArray26);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f, 0, 0.0d);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray26);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray26);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, (double) 5);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray6, doubleArray35);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray6, (double) 'a');
        double[] doubleArray40 = new double[] { 100.0d };
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray40, (double) 10.0f);
        double[] doubleArray45 = new double[] { 3, 4 };
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray40, doubleArray45);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray45, (double) 10.0f, 0, 0.0d);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray45);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray45, 10.0d, 3, 0.0d);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray45, (double) (-1.0f));
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray57, (double) (byte) 100, 4);
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray6, doubleArray57);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray57, (double) 1.0f);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray57, (double) 0.0f, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[3.0, 4.0, 3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, (int) (short) 0);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, (int) (byte) 100, (int) (short) 1);
        java.lang.Short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray18);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, 6, (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[]");
        org.junit.Assert.assertNotNull(shortArray19);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray0);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        double[] doubleArray2 = new double[] { (-1L), (-1.0d) };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) 1.0f, (double) 10);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray2);
        double[] doubleArray8 = new double[] { 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f);
        double[] doubleArray13 = new double[] { 3, 4 };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray8, doubleArray13);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        char[] charArray21 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray21, (int) (short) 0, '4');
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray25, '4');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray25, 1, 'a');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray13, (java.lang.Object) charArray30);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray13);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray36, (double) (byte) 1);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 4);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.lang.Object[] objArray0 = null;
        short[] shortArray1 = null;
        short[] shortArray7 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray7, (short) (byte) 0, 0);
        short[] shortArray16 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray7, shortArray17);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray19, (short) 10);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray19, (int) (byte) 100, (int) '4');
        java.lang.Short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray19);
        short[] shortArray28 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray28);
        short[] shortArray30 = null;
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray28, shortArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray28, (short) -1);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.remove(shortArray28, (int) (byte) 1);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray28, (short) 10);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.remove(shortArray37, 1);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray1, shortArray40);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) shortArray1);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        int[] intArray3 = new int[] { 1, (-1), (short) -1 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.add(intArray3, 0, (int) (byte) 0);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray7, (int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.remove(byteArray0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        byte[][][][] byteArray0 = new byte[][][][] {};
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray3 = new byte[] {};
        byte[][] byteArray4 = new byte[][] { byteArray1, byteArray2, byteArray3 };
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray7 = new byte[] {};
        byte[][] byteArray8 = new byte[][] { byteArray5, byteArray6, byteArray7 };
        byte[] byteArray9 = new byte[] {};
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray11 = new byte[] {};
        byte[][] byteArray12 = new byte[][] { byteArray9, byteArray10, byteArray11 };
        byte[][][] byteArray13 = new byte[][][] { byteArray4, byteArray8, byteArray12 };
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray16 = new byte[] {};
        byte[][] byteArray17 = new byte[][] { byteArray14, byteArray15, byteArray16 };
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray19 = new byte[] {};
        byte[] byteArray20 = new byte[] {};
        byte[][] byteArray21 = new byte[][] { byteArray18, byteArray19, byteArray20 };
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray24 = new byte[] {};
        byte[][] byteArray25 = new byte[][] { byteArray22, byteArray23, byteArray24 };
        byte[][][] byteArray26 = new byte[][][] { byteArray17, byteArray21, byteArray25 };
        byte[] byteArray27 = new byte[] {};
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray29 = new byte[] {};
        byte[][] byteArray30 = new byte[][] { byteArray27, byteArray28, byteArray29 };
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray33 = new byte[] {};
        byte[][] byteArray34 = new byte[][] { byteArray31, byteArray32, byteArray33 };
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray37 = new byte[] {};
        byte[][] byteArray38 = new byte[][] { byteArray35, byteArray36, byteArray37 };
        byte[][][] byteArray39 = new byte[][][] { byteArray30, byteArray34, byteArray38 };
        byte[] byteArray40 = new byte[] {};
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray42 = new byte[] {};
        byte[][] byteArray43 = new byte[][] { byteArray40, byteArray41, byteArray42 };
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray46 = new byte[] {};
        byte[][] byteArray47 = new byte[][] { byteArray44, byteArray45, byteArray46 };
        byte[] byteArray48 = new byte[] {};
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray50 = new byte[] {};
        byte[][] byteArray51 = new byte[][] { byteArray48, byteArray49, byteArray50 };
        byte[][][] byteArray52 = new byte[][][] { byteArray43, byteArray47, byteArray51 };
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray55 = new byte[] {};
        byte[][] byteArray56 = new byte[][] { byteArray53, byteArray54, byteArray55 };
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray59 = new byte[] {};
        byte[][] byteArray60 = new byte[][] { byteArray57, byteArray58, byteArray59 };
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray62 = new byte[] {};
        byte[] byteArray63 = new byte[] {};
        byte[][] byteArray64 = new byte[][] { byteArray61, byteArray62, byteArray63 };
        byte[][][] byteArray65 = new byte[][][] { byteArray56, byteArray60, byteArray64 };
        byte[] byteArray66 = new byte[] {};
        byte[] byteArray67 = new byte[] {};
        byte[] byteArray68 = new byte[] {};
        byte[][] byteArray69 = new byte[][] { byteArray66, byteArray67, byteArray68 };
        byte[] byteArray70 = new byte[] {};
        byte[] byteArray71 = new byte[] {};
        byte[] byteArray72 = new byte[] {};
        byte[][] byteArray73 = new byte[][] { byteArray70, byteArray71, byteArray72 };
        byte[] byteArray74 = new byte[] {};
        byte[] byteArray75 = new byte[] {};
        byte[] byteArray76 = new byte[] {};
        byte[][] byteArray77 = new byte[][] { byteArray74, byteArray75, byteArray76 };
        byte[][][] byteArray78 = new byte[][][] { byteArray69, byteArray73, byteArray77 };
        byte[][][][] byteArray79 = new byte[][][][] { byteArray13, byteArray26, byteArray39, byteArray52, byteArray65, byteArray78 };
        byte[][][][] byteArray80 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray79);
        byte[] byteArray82 = new byte[] { (byte) 0 };
        byte[] byteArray84 = new byte[] { (byte) 0 };
        byte[] byteArray86 = new byte[] { (byte) 0 };
        byte[][] byteArray87 = new byte[][] { byteArray82, byteArray84, byteArray86 };
        byte[][][] byteArray88 = new byte[][][] { byteArray87 };
        byte[][][][] byteArray89 = org.apache.commons.lang3.ArrayUtils.add(byteArray79, byteArray88);
        byte[][][] byteArray90 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray88);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[0]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        java.lang.Float[] floatArray1 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray3 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray4 = new java.lang.Float[][] { floatArray1, floatArray3 };
        java.lang.Float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, floatArray5);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray5);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) floatArray5);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray5, (float) 6);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        boolean[] booleanArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false, 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Boolean[] booleanArray11 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, false);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, false);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray15);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray15);
        long[] longArray18 = new long[] {};
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray19, 0L);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray19, (long) 10);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray17, (java.lang.Object) longArray19, 10);
        long[] longArray26 = new long[] {};
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.clone(longArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, 0L);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray27);
        java.lang.Integer[] intArray31 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray32 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray33 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray34 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray35 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray36 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray37 = new java.lang.Integer[][] { intArray31, intArray32, intArray33, intArray34, intArray35, intArray36 };
        java.lang.Integer[] intArray44 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray51 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray52 = new java.lang.Integer[][] { intArray44, intArray51 };
        java.lang.Integer[][] intArray53 = org.apache.commons.lang3.ArrayUtils.addAll(intArray37, intArray52);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray30, (java.lang.Object) intArray52);
        java.lang.Long[] longArray55 = org.apache.commons.lang3.ArrayUtils.toObject(longArray30);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray30);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.clone(longArray30);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray17, (java.lang.Object) longArray30);
        int int61 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) 9, (int) (byte) 100);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) longArray30);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 1]");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        byte[][][][] byteArray0 = new byte[][][][] {};
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray3 = new byte[] {};
        byte[][] byteArray4 = new byte[][] { byteArray1, byteArray2, byteArray3 };
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray7 = new byte[] {};
        byte[][] byteArray8 = new byte[][] { byteArray5, byteArray6, byteArray7 };
        byte[] byteArray9 = new byte[] {};
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray11 = new byte[] {};
        byte[][] byteArray12 = new byte[][] { byteArray9, byteArray10, byteArray11 };
        byte[][][] byteArray13 = new byte[][][] { byteArray4, byteArray8, byteArray12 };
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray16 = new byte[] {};
        byte[][] byteArray17 = new byte[][] { byteArray14, byteArray15, byteArray16 };
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray19 = new byte[] {};
        byte[] byteArray20 = new byte[] {};
        byte[][] byteArray21 = new byte[][] { byteArray18, byteArray19, byteArray20 };
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray24 = new byte[] {};
        byte[][] byteArray25 = new byte[][] { byteArray22, byteArray23, byteArray24 };
        byte[][][] byteArray26 = new byte[][][] { byteArray17, byteArray21, byteArray25 };
        byte[] byteArray27 = new byte[] {};
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray29 = new byte[] {};
        byte[][] byteArray30 = new byte[][] { byteArray27, byteArray28, byteArray29 };
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray33 = new byte[] {};
        byte[][] byteArray34 = new byte[][] { byteArray31, byteArray32, byteArray33 };
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray37 = new byte[] {};
        byte[][] byteArray38 = new byte[][] { byteArray35, byteArray36, byteArray37 };
        byte[][][] byteArray39 = new byte[][][] { byteArray30, byteArray34, byteArray38 };
        byte[] byteArray40 = new byte[] {};
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray42 = new byte[] {};
        byte[][] byteArray43 = new byte[][] { byteArray40, byteArray41, byteArray42 };
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray46 = new byte[] {};
        byte[][] byteArray47 = new byte[][] { byteArray44, byteArray45, byteArray46 };
        byte[] byteArray48 = new byte[] {};
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray50 = new byte[] {};
        byte[][] byteArray51 = new byte[][] { byteArray48, byteArray49, byteArray50 };
        byte[][][] byteArray52 = new byte[][][] { byteArray43, byteArray47, byteArray51 };
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray55 = new byte[] {};
        byte[][] byteArray56 = new byte[][] { byteArray53, byteArray54, byteArray55 };
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray59 = new byte[] {};
        byte[][] byteArray60 = new byte[][] { byteArray57, byteArray58, byteArray59 };
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray62 = new byte[] {};
        byte[] byteArray63 = new byte[] {};
        byte[][] byteArray64 = new byte[][] { byteArray61, byteArray62, byteArray63 };
        byte[][][] byteArray65 = new byte[][][] { byteArray56, byteArray60, byteArray64 };
        byte[] byteArray66 = new byte[] {};
        byte[] byteArray67 = new byte[] {};
        byte[] byteArray68 = new byte[] {};
        byte[][] byteArray69 = new byte[][] { byteArray66, byteArray67, byteArray68 };
        byte[] byteArray70 = new byte[] {};
        byte[] byteArray71 = new byte[] {};
        byte[] byteArray72 = new byte[] {};
        byte[][] byteArray73 = new byte[][] { byteArray70, byteArray71, byteArray72 };
        byte[] byteArray74 = new byte[] {};
        byte[] byteArray75 = new byte[] {};
        byte[] byteArray76 = new byte[] {};
        byte[][] byteArray77 = new byte[][] { byteArray74, byteArray75, byteArray76 };
        byte[][][] byteArray78 = new byte[][][] { byteArray69, byteArray73, byteArray77 };
        byte[][][][] byteArray79 = new byte[][][][] { byteArray13, byteArray26, byteArray39, byteArray52, byteArray65, byteArray78 };
        byte[][][][] byteArray80 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray79);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (short) (byte) 1);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        char[] charArray15 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(charArray15, '4');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(charArray15, '#');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray9, (java.lang.Object) charArray15, (int) (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray15, '#', (int) 'a');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(charArray15, '#');
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, 100L);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray2, (-1L));
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray5, (long) (byte) 0);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.add(longArray5, 0L);
        java.lang.Long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toObject(longArray5);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[100]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[100]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[100, 0]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[100, 0]");
        org.junit.Assert.assertNotNull(longArray10);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray8 = new java.lang.Integer[][] { intArray3, intArray7 };
        java.lang.Integer[] intArray12 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray16 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray17 = new java.lang.Integer[][] { intArray12, intArray16 };
        java.lang.Integer[] intArray21 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray21, intArray25 };
        java.lang.Integer[][][] intArray27 = new java.lang.Integer[][][] { intArray8, intArray17, intArray26 };
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray34, (byte) 100);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 1);
        java.lang.Integer[][][] intArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray27, (java.lang.Object) byteArray34);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray46, (int) (short) 0, 0);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.add(byteArray49, (byte) 10);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray51, (byte) 1);
        java.lang.Byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray51);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray34, byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray62, (byte) 100);
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray71, (int) (short) 0, 0);
        byte[] byteArray76 = org.apache.commons.lang3.ArrayUtils.add(byteArray74, (byte) 10);
        int int79 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray74, (byte) 0, (int) (byte) 100);
        byte[] byteArray80 = org.apache.commons.lang3.ArrayUtils.clone(byteArray74);
        byte[] byteArray82 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray74, (byte) 100);
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray62, byteArray82);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray51, byteArray62);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray51);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10, (short) -1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) -1);
        short[] shortArray13 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(shortArray13, (short) 10);
        short[] shortArray20 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray20, (short) 10);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray13, shortArray20);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.add(shortArray13, (short) (byte) 1);
        short[] shortArray31 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray31, (short) (byte) 0, 0);
        short[] shortArray37 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray37);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray31, shortArray37);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray25, shortArray39);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray40);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.add(shortArray41, (int) (short) 1, (short) 10);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray44, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[-1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[10, -1, 10, -1, 0, 0, -1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[10, 10, -1, 10, -1, 0, 0, -1, 1, 0, 100, 1, -1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, (float) (byte) -1);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray9, 0.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, 0.0f);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray9);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray9);
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, 0.0f);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(floatArray20, (float) (byte) 1);
        float[] floatArray30 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray30);
        float[] floatArray32 = new float[] {};
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.add(floatArray32, 0.0f);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(floatArray32, (float) (byte) 1);
        float[] floatArray42 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray32, floatArray42);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, (float) 0, 0);
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray32, (int) (short) 100, (int) '#');
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray49);
        float[] floatArray51 = new float[] {};
        float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.add(floatArray51, 0.0f);
        float[] floatArray54 = new float[] {};
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.add(floatArray54, 0.0f);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray54, (float) (byte) -1);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray51, floatArray54);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray49, floatArray54);
        float[] floatArray61 = new float[] {};
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.add(floatArray61, 0.0f);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray63);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray19, floatArray54);
        float[] floatArray66 = org.apache.commons.lang3.ArrayUtils.clone(floatArray19);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[0.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[]");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "");
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray19, 10, 3);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray19);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray29);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray29, (int) (short) 10);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray29, 9);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray33 = new boolean[] {};
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, 0);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray43);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray32);
        boolean[] booleanArray48 = new boolean[] {};
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray48, false, 0);
        java.lang.Boolean[] booleanArray56 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray56, false);
        boolean[] booleanArray59 = new boolean[] {};
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray59, false, 0);
        java.lang.Boolean[] booleanArray67 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray67, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray69);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray59, booleanArray69);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray58, booleanArray71);
        boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray48, booleanArray71);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray73);
        boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray74, false);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray74);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray74, false, (int) 'a');
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, true, false, true, false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray76), "[true, false, true, false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray33 = new boolean[] {};
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, 0);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray43);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray32);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray32, 5, 0);
        java.lang.Boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray32);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray32);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.add(booleanArray52, 0, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false, false, true]");
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 0L);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray0, (int) (short) 10, 1);
        org.junit.Assert.assertNull(booleanArray3);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 100);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray1, (byte) 10);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.add(byteArray1, (int) (short) 1, (byte) 1);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (short) 100, (-1));
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray1, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray2, 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray2, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Byte[] byteArray13 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) (short) 0, 0);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray15, byteArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray10, (java.lang.Object) byteArray25);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, (double) (byte) 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray29, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray2);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray12, 6, (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 0]");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray11 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, 1);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, 7, (-1));
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) -1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray15, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.lang.Float[] floatArray1 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray3 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray4 = new java.lang.Float[][] { floatArray1, floatArray3 };
        java.lang.Float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray6);
        java.lang.Float[][] floatArray9 = org.apache.commons.lang3.ArrayUtils.remove(floatArray6, (int) (short) 1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.io.Serializable[][]) floatArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) floatArray6);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap13 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray12);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray12, false);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.add(booleanArray15, true);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray6, (java.lang.Object) true, 6);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(objMap13);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        long[] longArray17 = null;
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray17, 100L);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray10, 0L);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[100]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[1, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
        int[] intArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0);
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0);
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.clone(intArray2);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray7, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.add(booleanArray7, (-1), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false, false, false, false, true]");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a');
        char[] charArray3 = null;
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray3);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray4);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, (int) (byte) 10, (int) (short) 0);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray4, (long) 0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray9 = org.apache.commons.lang3.ArrayUtils.add(longArray6, 5, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray7, (long) 8, 7);
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toObject(longArray7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray14);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] {};
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13, (double) 2);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) 1L, 10);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray16);
        double[] doubleArray23 = new double[] { 100.0d };
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray23, (double) 10.0f);
        double[] doubleArray28 = new double[] { 3, 4 };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray23, doubleArray28);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray23, (double) 0.0f);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray23);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.add(doubleArray32, 2, (double) 3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[97.0, 10.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[97.0, 10.0, 3.0, 1.0, 100.0]");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        short[] shortArray9 = new short[] { (byte) 1, (short) 0 };
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 100);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray4, (java.lang.Object) (short) 0);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, true);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray20, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, true]");
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray0);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (float) 3);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) (byte) 1, 7);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) (short) 1);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray16, (float) 3, 9);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray16, (float) (short) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 10L);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, (int) (short) 0, 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray12, (int) (byte) 0);
        double[] doubleArray18 = new double[] { 'a', 10, 1.0d };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray18, (double) (short) 0, (double) 10.0f);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, 0.0d);
        double[] doubleArray27 = new double[] { 'a', 10, 1.0d };
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray27, (double) (short) 0, (double) 10.0f);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray27, 0.0d);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray33);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) 10);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray33);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.add(doubleArray33, (double) (-1));
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray14, doubleArray39);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray41, (int) '#', 0);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray41, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray41, (int) (byte) 1, 5);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray14, doubleArray51);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray51, (double) (byte) 0, 7);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "");
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray19, 10, 3);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray19);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray29, (int) (byte) 10);
        java.lang.Integer[] intArray32 = org.apache.commons.lang3.ArrayUtils.toObject(intArray29);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray32, 10);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, 100L);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray2, (-1L));
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray5, (long) (byte) 0);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(longArray8, (long) 4);
        java.lang.Long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[100]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[100]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[100, 0]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray11);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, 100.0f, (int) (byte) 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) 100, (int) '#');
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray8, (float) ' ');
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray0);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.remove(floatArray0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        short[] shortArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, (int) '4');
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 100, (short) -1, (short) 100 };
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3, (short) 10);
        java.lang.Short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray5, (short) 1);
        short[] shortArray14 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray14, (short) (byte) 0, 0);
        short[] shortArray20 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray20);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.remove(shortArray22, 1);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray24, 7, (-1));
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray5, shortArray27);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, -1, 100]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[-1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        java.lang.Byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(byteArray11, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, 0.0f);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, 0.0f);
        float[] floatArray20 = null;
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, 1.0f);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray20);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[35.0, -1.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray22 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0, 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (short) 100, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray29);
        float[] floatArray31 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 0.0f);
        float[] floatArray34 = new float[] {};
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray34, 0.0f);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, (float) (byte) -1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray34);
        java.lang.Float[] floatArray42 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray44 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray45 = new java.lang.Float[][] { floatArray42, floatArray44 };
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray47 = org.apache.commons.lang3.ArrayUtils.add(floatArray45, floatArray46);
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray46);
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray48, 4, 2);
        java.lang.Float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray52, (float) (byte) -1);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray54, (float) 0L, (int) '4');
        float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.add(floatArray54, (int) (byte) 0, (float) 10L);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray51, floatArray54);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray51);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        short[] shortArray4 = new short[] { (short) -1, (byte) 1, (short) 0, (byte) 100 };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) 1, (-1));
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) '#', 0);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.subarray(longArray10, 0, 100);
        long[] longArray17 = new long[] {};
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, 0L);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray21);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1]");
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, (int) '#', (-1));
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, (float) (short) 1);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray7, (int) (byte) 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, 'a', (int) (short) -1);
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, ' ');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, ' ', 6);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.lang.Long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 100);
        org.junit.Assert.assertNull(longArray2);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray40 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray40, (int) (short) 0, '4');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 2, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray14, charArray47);
        java.lang.String str49 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray14);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{#,4,#,#,a,4}" + "'", str49, "{#,4,#,#,a,4}");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, 100, (int) (short) -1);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray11);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(charArray11, '#');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray11, (int) (byte) -1, '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray6, 0.0d, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray6, (double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray6, 'a');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(charArray6, ' ');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray6, (int) (byte) 10, '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        long[] longArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) ' ', (int) (short) -1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 0, (int) (byte) 0);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (short) 0, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (byte) 10);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.clone(byteArray28);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray29);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray30, (int) (byte) 100, (int) ' ');
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.add(byteArray30, 0, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10]");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        java.lang.Byte[][][] byteArray0 = null;
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[][] byteArray13 = new java.lang.Byte[][] { byteArray6, byteArray12 };
        java.lang.Byte[][] byteArray14 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray13);
        java.lang.Byte[][] byteArray15 = null;
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray16);
        java.lang.Byte[][] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray17, (byte) 10);
        java.lang.Byte[][] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, byteArray17);
        java.lang.Byte[][][] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, byteArray14);
        java.lang.Byte[] byteArray28 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[] byteArray34 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[][] byteArray35 = new java.lang.Byte[][] { byteArray28, byteArray34 };
        java.lang.Byte[][] byteArray36 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray35);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        short[] shortArray46 = new short[] { (byte) 1, (short) 0 };
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray46, (short) (byte) 10);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray46, (short) 0);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray46, (short) 100);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray46, (short) 0);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray41, (java.lang.Object) (short) 0);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray35, (java.lang.Object[]) booleanArray41);
        java.lang.Byte[][] byteArray57 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray14, byteArray35);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray57);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) '4', (int) (short) 10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        short[] shortArray0 = null;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) (byte) 0);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray21, (double) 100.0f, (int) (short) 0, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray11, 5, 1);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true]");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray33 = new boolean[] {};
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, 0);
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray41, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray43);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray32, booleanArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray32);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray32, 5, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray50, false, (int) 'a');
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.add(booleanArray50, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.add(booleanArray50, 3, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false]");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray40 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray40, (int) (short) 0, '4');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 2, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray14, charArray47);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, 'a');
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#');
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray53, 'a');
        char[] charArray56 = null;
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.addAll(charArray53, charArray56);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray53);
        java.lang.String str60 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray53, "{false,true,false,true}");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, 4, #, #, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{}" + "'", str60, "{}");
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) ' ');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true, (int) (byte) -1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, true);
        double[] doubleArray14 = new double[] { 100.0d };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 10.0f);
        double[] doubleArray19 = new double[] { 3, 4 };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray14, doubleArray19);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) 10.0f, 0, 0.0d);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray19);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, 10.0d, 3, 0.0d);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray19, (double) (-1.0f));
        double[] doubleArray33 = new double[] { 100.0d };
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) 10.0f);
        double[] doubleArray38 = new double[] { 3, 4 };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray33, doubleArray38);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray38);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray41, (int) '#', 0);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray41, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray38, doubleArray41);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray38, (double) 9, (double) (byte) 0);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) true, (java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[3.0, 4.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray5);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, '#', (int) '4');
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, 0.0f);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) (byte) 1);
        float[] floatArray28 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray28);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray29, (float) 'a');
        int[] intArray38 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.clone(intArray38);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.add(intArray38, (int) (byte) 0, (int) (byte) 1);
        int[] intArray49 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.clone(intArray49);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.contains(intArray50, (int) (short) 0);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.add(intArray50, (int) 'a');
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.clone(intArray50);
        int[] intArray56 = org.apache.commons.lang3.ArrayUtils.addAll(intArray38, intArray55);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray31, (java.lang.Object) intArray56);
        float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.clone(floatArray31);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray58, 0.0f);
        int int61 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray15, (java.lang.Object) floatArray58);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, (int) (short) 0);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, (int) (byte) 100, (int) (short) 1);
        java.lang.Short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray18, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.lang.Long[] longArray3 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray7 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray11 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray15 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray19 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray20 = new java.lang.Long[][] { longArray3, longArray7, longArray11, longArray15, longArray19 };
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray20, longArray21);
        float[] floatArray23 = new float[] {};
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, 0.0f);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(floatArray23, (float) (byte) 1);
        float[] floatArray33 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.clone(floatArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray22, (java.lang.Object) floatArray35, (int) (short) 10);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(floatArray35, 1.0f);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray35);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 0.0d, 100.0d, 0.0d, 1.0d, (-1.0d) };
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 0.0d, 100.0d, 0.0d, 1.0d, (-1.0d) };
        java.lang.Double[][] doubleArray12 = new java.lang.Double[][] { doubleArray5, doubleArray11 };
        java.lang.Double[][] doubleArray13 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] {};
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14, (double) 2);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray14);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14, (double) (short) 10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray12, (java.lang.Object) (short) 10, (-1));
        double[] doubleArray25 = new double[] { 'a', 10, 1.0d };
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray25, (double) (short) 0, (double) 10.0f);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, 0.0d);
        double[] doubleArray34 = new double[] { 'a', 10, 1.0d };
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray34, (double) (short) 0, (double) 10.0f);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray34, 0.0d);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray40);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray40, (double) 10);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray40);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray40, (int) (byte) 100, 0);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray47, (double) '#', (int) ' ', (double) '#');
        java.lang.Double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray47);
        java.lang.Double[][] doubleArray53 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (int) (byte) 1, (float) 100L);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray12, (float) 10);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (int) (byte) 10, (float) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 100.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Class<?>[] wildcardClassArray1 = org.apache.commons.lang3.ArrayUtils.clone(wildcardClassArray0);
        java.lang.Class<?>[] wildcardClassArray2 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray8 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.clone(shortArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray2, (java.lang.Object) shortArray9, 4);
        java.lang.Class<?>[] wildcardClassArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray18 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.clone(shortArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray12, (java.lang.Object) shortArray19, 4);
        java.lang.Class<?>[] wildcardClassArray22 = org.apache.commons.lang3.ArrayUtils.addAll(wildcardClassArray2, wildcardClassArray12);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray23 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.GenericDeclaration[]) wildcardClassArray0, (java.lang.reflect.GenericDeclaration[]) wildcardClassArray12);
        java.lang.Object obj24 = null;
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, obj24);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(wildcardClassArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray12);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray22);
        org.junit.Assert.assertNotNull(genericDeclarationArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.lang.Object[][][] objArray0 = null;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(objArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, 9, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray6, 0);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 5, 2);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(intArray15, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (short) 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 2, 35, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 2, 35, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 10, -1, 0, 1, 2, 35, 0, -1]");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, 0, 5);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray22, (int) '#', (int) 'a');
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) 7, (double) (byte) -1);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) 0L, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray25, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 10.0, 1.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray34);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray23);
        boolean[] booleanArray38 = new boolean[] {};
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray38, false, 0);
        java.lang.Boolean[] booleanArray46 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray48);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray38, booleanArray48);
        int int51 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray50);
        java.lang.Boolean[] booleanArray56 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray56, false);
        short[] shortArray61 = new short[] { (byte) 1, (short) 0 };
        int int63 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray61, (short) (byte) 10);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray61, (short) 0);
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray61, (short) 100);
        int int69 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray61, (short) 0);
        int int70 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray56, (java.lang.Object) (short) 0);
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray56, true);
        boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray72);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray50, booleanArray72);
        int int77 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray50, true, (int) (short) 10);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray23, booleanArray50);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, true, false, true, false, false, false, true]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        java.lang.Byte[] byteArray13 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray14);
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray9);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 100);
        java.lang.Byte[][] byteArray19 = null;
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray20);
        java.lang.Byte[][] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, byteArray21);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21, (byte) 10);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 1.0f);
        float[] floatArray3 = null;
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray3);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray19);
        int int21 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray19);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) 100);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray24);
        float[] floatArray28 = new float[] {};
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray28, 0.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(floatArray28, (float) (byte) 1);
        float[] floatArray38 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray28, floatArray38);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray38, (int) (short) 1, (int) '#');
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.clone(floatArray38);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray9, (java.lang.Object) floatArray43);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "");
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray19, 10, 3);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray19);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        java.lang.Integer[] intArray31 = new java.lang.Integer[] {};
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray31, (int) '#');
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray31, (int) (byte) 10);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray31);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.add(intArray36, 4);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.addAll(intArray19, intArray36);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[4]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        short[] shortArray15 = new short[] { (byte) 1, (short) 0 };
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray15, (short) 0);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray12, shortArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 100, 3);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray12, 5, (int) '4');
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) -1, (int) '4');
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 4, 3 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, 1);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, 2);
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray13 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, 'a');
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray7, (java.lang.Object[]) charArray13);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, ' ');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, '4');
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray22, ' ');
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray2, (java.lang.Object) charArray22);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[4, 3]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[4, 3]");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray3 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray3);
        short[] shortArray5 = null;
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray0, (java.lang.Object) shortArray5, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray0);
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.lang.Character[] charArray16 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray10, (java.lang.Object[]) charArray16);
        java.lang.String[] strArray20 = org.apache.commons.lang3.ArrayUtils.addAll(strArray0, strArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String>[] strComparableArray23 = org.apache.commons.lang3.ArrayUtils.add((java.lang.Comparable<java.lang.String>[]) strArray20, 7, (java.lang.Comparable<java.lang.String>) "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4,  , #, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "");
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray19, 10, 3);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray19);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        java.lang.String[] strArray31 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray34 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray34);
        short[] shortArray36 = null;
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray36);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray31, (java.lang.Object) shortArray36, 0);
        int[] intArray46 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.clone(intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.add(intArray46, (int) (byte) 0, (int) (byte) 1);
        int[] intArray57 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.clone(intArray57);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray46, intArray57);
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.subarray(intArray46, (int) (byte) 1, (int) (byte) 100);
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.clone(intArray46);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray31, (java.lang.Object) intArray63);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.add(intArray63, (int) (short) 1, 1);
        int[] intArray68 = org.apache.commons.lang3.ArrayUtils.addAll(intArray30, intArray63);
        int[] intArray70 = org.apache.commons.lang3.ArrayUtils.remove(intArray63, (int) (byte) 1);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.contains(intArray63, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        float[] floatArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray1, 100, 0);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray0, floatArray1);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, true);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray15, (java.lang.Object) booleanArray18);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, false);
        boolean[] booleanArray28 = new boolean[] {};
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray28, false, 0);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray28, true);
        boolean[] booleanArray34 = new boolean[] {};
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray34, false, 0);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray34, true);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray28, booleanArray34);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray27, booleanArray28);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray41, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[]");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        short[] shortArray15 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0, 0);
        short[] shortArray24 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray8, (java.lang.Object) shortArray27);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8, 2);
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray32, intArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray40);
        int[] intArray43 = null;
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray43);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 10, 10, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        short[] shortArray15 = new short[] { (byte) 1, (short) 0 };
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray15, (short) 0);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray12, shortArray19);
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        boolean[] booleanArray24 = new boolean[] {};
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false, 0);
        java.lang.Boolean[] booleanArray32 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray32, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray34);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray24, booleanArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray24);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray24);
        java.lang.Boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray38);
        java.lang.Boolean[] booleanArray42 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray42, false);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray42, false);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray42, true);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray39, (java.lang.Object) booleanArray42);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray23, (java.lang.Object[]) booleanArray42);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray23, (short) (byte) 0);
        short[] shortArray55 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray55);
        short[] shortArray57 = null;
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray55, shortArray57);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray55, (short) -1);
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.remove(shortArray55, (int) (byte) 1);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray55, (short) 0);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray55, (short) -1);
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray23, (java.lang.Object) int66, (int) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[100]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        float[] floatArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        long[] longArray0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.add(longArray2, 0, (long) (byte) 1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray7, 0L, (int) (byte) 0);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.addAll(longArray5, longArray7);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) '#', 0);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.subarray(longArray11, 0, 100);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray0, longArray17);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(longArray19);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        java.lang.Double[] doubleArray1 = new java.lang.Double[] {};
        java.lang.Double[] doubleArray2 = new java.lang.Double[] {};
        java.lang.Double[] doubleArray3 = new java.lang.Double[] {};
        java.lang.Double[][] doubleArray4 = new java.lang.Double[][] { doubleArray0, doubleArray1, doubleArray2, doubleArray3 };
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d, (-1.0d), 10.0d, 100.0d };
        java.lang.Double[][] doubleArray10 = new java.lang.Double[][] { doubleArray9 };
        java.lang.Double[][] doubleArray11 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray10);
        java.util.Map<java.lang.Object, java.lang.Object> objMap12 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray10);
        java.lang.Double[][] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toArray(doubleArray10);
        double[] doubleArray17 = new double[] { 'a', 10, 1.0d };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray17, (double) (short) 0, (double) 10.0f);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, 0.0d);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray17);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray10, (java.lang.Object) doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(objMap12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray8, (short) 1);
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        short[] shortArray15 = new short[] { (byte) 1, (short) 0 };
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray15, (short) 0);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray12, shortArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) 1, 0);
        java.lang.Short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray12, (int) (byte) 10, 6);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray12);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (double) 10L);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) (short) 10, (int) (short) 0);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) (byte) 100, 8, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray7, 10, 4);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray7);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[35, 1, 0, -1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        char[] charArray0 = null;
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.subarray(charArray0, (int) 'a', 7);
        org.junit.Assert.assertNull(charArray3);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (byte) -1);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) '4');
        float[] floatArray5 = new float[] {};
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, 0.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) (byte) -1);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray5, 0.0f);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) (byte) 0);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray4, floatArray13);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) (short) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[0.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0]");
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        java.lang.Object[] objArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray30, (java.lang.Object) byteArray38);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) intArray6, (java.lang.Object[]) byteArray42);
        int[][] intArray46 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (-1), 3);
        int[][] intArray47 = org.apache.commons.lang3.ArrayUtils.toArray(intArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.lang.Byte[][] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        java.lang.Byte[][] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 10);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) 0L, 5);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) 4, 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray7, (byte) -1);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int[] intArray25 = new int[] { 10, ' ', 10, '4', (byte) -1, '#' };
        int[] intArray32 = new int[] { 10, ' ', 10, '4', (byte) -1, '#' };
        int[][] intArray33 = new int[][] { intArray25, intArray32 };
        int[] intArray40 = new int[] { 10, ' ', 10, '4', (byte) -1, '#' };
        int[] intArray47 = new int[] { 10, ' ', 10, '4', (byte) -1, '#' };
        int[][] intArray48 = new int[][] { intArray40, intArray47 };
        int[] intArray55 = new int[] { 10, ' ', 10, '4', (byte) -1, '#' };
        int[] intArray62 = new int[] { 10, ' ', 10, '4', (byte) -1, '#' };
        int[][] intArray63 = new int[][] { intArray55, intArray62 };
        int[] intArray70 = new int[] { 10, ' ', 10, '4', (byte) -1, '#' };
        int[] intArray77 = new int[] { 10, ' ', 10, '4', (byte) -1, '#' };
        int[][] intArray78 = new int[][] { intArray70, intArray77 };
        int[][][] intArray79 = new int[][][] { intArray33, intArray48, intArray63, intArray78 };
        int[][][] intArray80 = org.apache.commons.lang3.ArrayUtils.clone(intArray79);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray18, (java.lang.Object[]) intArray80);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10, 32, 10, 52, -1, 35]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 32, 10, 52, -1, 35]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 32, 10, 52, -1, 35]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10, 32, 10, 52, -1, 35]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 32, 10, 52, -1, 35]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 32, 10, 52, -1, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[10, 32, 10, 52, -1, 35]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 32, 10, 52, -1, 35]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 100);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (byte) 0, 100);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 0, 6);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        java.lang.Long[] longArray16 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) 4);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) longArray18, (int) (byte) 10);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[100, 10, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, true]");
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        boolean[] booleanArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray8 = new java.lang.Integer[][] { intArray3, intArray7 };
        java.lang.Integer[] intArray12 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray16 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray17 = new java.lang.Integer[][] { intArray12, intArray16 };
        java.lang.Integer[] intArray21 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 1, 2, 6 };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray21, intArray25 };
        java.lang.Integer[][][] intArray27 = new java.lang.Integer[][][] { intArray8, intArray17, intArray26 };
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) -1, (byte) 1, (byte) 1 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray34, (byte) 100);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 1);
        java.lang.Integer[][][] intArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray27, (java.lang.Object) byteArray34);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray46, (int) (short) 0, 0);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.add(byteArray49, (byte) 10);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray51, (byte) 1);
        java.lang.Byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray51);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray34, byteArray51);
        java.lang.Object[] objArray56 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray58 = new byte[] { (byte) 100 };
        byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray58, (int) '4', (int) (byte) 10);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray58, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray64);
        int int66 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray64);
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray56, (java.lang.Object) byteArray64);
        java.lang.Byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray64);
        java.lang.Byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray64);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.contains(byteArray64, (byte) 1);
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.add(byteArray64, (byte) 100);
        byte[] byteArray80 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray83 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray80, (int) (short) 0, 0);
        byte[] byteArray85 = org.apache.commons.lang3.ArrayUtils.add(byteArray83, (byte) 10);
        byte[] byteArray86 = org.apache.commons.lang3.ArrayUtils.clone(byteArray85);
        byte[] byteArray87 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray64, byteArray86);
        byte[] byteArray88 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray51, byteArray64);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray51);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 1, -1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 1, -1, 1, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10]");
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        char[] charArray8 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        char[] charArray15 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(charArray15, '4');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray15);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray9);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, 10, 1);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray0, (java.lang.Object) 10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] {};
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray5);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray1, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        boolean[] booleanArray5 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray11 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray18 = new boolean[][] { booleanArray5, booleanArray11, booleanArray17 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        double[] doubleArray30 = new double[] { 'a', 10, 1.0d };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) 0, (double) 10.0f);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, 0.0d);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray25, (java.lang.Object) int35);
        boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, (java.lang.Object) intArray25);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.clone(intArray38);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.remove(intArray38, 5);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.subarray(intArray41, 8, (int) (byte) 10);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 1, 10, 10]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray2, (java.lang.Object) "1");
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        byte[] byteArray0 = null;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray0);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) 100, (int) (short) 10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(shortArray5, (short) 100);
        short[] shortArray16 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray16);
        short[] shortArray18 = null;
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray16, shortArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray16, (short) -1);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray16);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.add(shortArray16, (int) (byte) 1, (short) -1);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray16);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray16, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[100, 1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{100,1}" + "'", str23, "{100,1}");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[100, 1]");
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray11, 2, (int) (short) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray16, (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.remove(byteArray18, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        double[] doubleArray13 = new double[] { 'a', 10, 1.0d };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray13, (double) (short) 0, (double) 10.0f);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray13, 0.0d);
        double[] doubleArray22 = new double[] { 'a', 10, 1.0d };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray22, (double) (short) 0, (double) 10.0f);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray22, 0.0d);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray13, doubleArray22);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray9, (double) (byte) 10, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray0, false);
        boolean[] booleanArray7 = new boolean[] {};
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, false, 0);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray7, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray7);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, true, 2);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray11);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[][] charSequenceArray12 = new java.lang.CharSequence[][] { charSequenceArray2, charSequenceArray5, charSequenceArray8, charSequenceArray11 };
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray18 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[][] charSequenceArray25 = new java.lang.CharSequence[][] { charSequenceArray15, charSequenceArray18, charSequenceArray21, charSequenceArray24 };
        java.lang.CharSequence[][][] charSequenceArray26 = new java.lang.CharSequence[][][] { charSequenceArray12, charSequenceArray25 };
        java.lang.CharSequence[][][] charSequenceArray29 = org.apache.commons.lang3.ArrayUtils.subarray(charSequenceArray26, (int) (short) 10, (int) 'a');
        int[] intArray30 = null;
        int[] intArray37 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.clone(intArray37);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.add(intArray37, (int) (byte) 0, (int) (byte) 1);
        int[] intArray48 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.clone(intArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray37, intArray48);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.subarray(intArray37, (int) (byte) 1, (int) (byte) 100);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray53, 0);
        int[] intArray56 = org.apache.commons.lang3.ArrayUtils.addAll(intArray30, intArray53);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray56);
        java.lang.CharSequence[][][] charSequenceArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(charSequenceArray29, (java.lang.Object) intArray56);
        byte[] byteArray59 = null;
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.add(byteArray59, 0, (byte) 100);
        java.lang.CharSequence[][][] charSequenceArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(charSequenceArray58, (java.lang.Object) byteArray59);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertNotNull(charSequenceArray18);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(charSequenceArray25);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[35, 1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(charSequenceArray58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(charSequenceArray63);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) 0, (int) (byte) 100);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.clone(byteArray9);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (byte) 100);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 100, (int) (short) 100);
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) '4', (int) (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray22, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray28);
        int int30 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray28);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray28, (int) (short) -1, (int) (byte) 1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray20, byteArray33);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray33, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray6, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[3.0, 4.0]");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, (int) (byte) 10, (int) (short) 0);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray4, (long) 0);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, (long) 'a');
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, (long) (short) -1, (int) (short) 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        char[] charArray0 = new char[] {};
        char[] charArray1 = new char[] {};
        char[] charArray2 = new char[] {};
        char[] charArray3 = new char[] {};
        char[][] charArray4 = new char[][] { charArray0, charArray1, charArray2, charArray3 };
        char[][] charArray5 = org.apache.commons.lang3.ArrayUtils.clone(charArray4);
        char[][] charArray6 = org.apache.commons.lang3.ArrayUtils.toArray(charArray4);
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray7);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray7, (float) (byte) 10);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        char[][] charArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray4, (java.lang.Object) floatArray11);
        // The following exception was thrown during execution in test generation
        try {
            char[][] charArray14 = org.apache.commons.lang3.ArrayUtils.remove(charArray12, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(charArray12);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, (int) (short) -1, (int) ' ');
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.remove(byteArray3, (int) (short) 0);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray3);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 5, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray0);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray13);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 0, (int) (short) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (short) 0, 0);
        byte[] byteArray36 = null;
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray32, byteArray36);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray38, (int) '#', 0);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray32, (java.lang.Object) doubleArray41);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.add(byteArray32, (byte) 100);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray44, 0, (int) (short) 10);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray25, byteArray44);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.remove(byteArray44, 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 10, 0, 10, 0, 0, 100, 0, -1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 0, 10, 0, 0, 100]");
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray0 = null;
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray1 = org.apache.commons.lang3.ArrayUtils.clone(genericDeclarationArray0);
        org.junit.Assert.assertNull(genericDeclarationArray1);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d, (double) (byte) 10);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) ' ', (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray27, (int) (short) 1, 0);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray30);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] {};
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 1, (-1));
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) 8, 0);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) (short) 0, (double) 9);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) ' ', (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray1 = new boolean[] {};
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, false, 0);
        java.lang.Boolean[] booleanArray9 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray12 = new boolean[] {};
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false, 0);
        java.lang.Boolean[] booleanArray20 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray22);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray24);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray24);
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray24, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray24);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray24, false, (int) (byte) 100);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray24);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray46, false, (int) (byte) 1);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 10);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap10 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray9);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, 10L);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray2, (java.lang.Object[]) longArray9);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) longArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(objMap10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray11, (short) (byte) 10, 2);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray11, (short) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[] booleanArray1 = new boolean[] {};
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, false, 0);
        java.lang.Boolean[] booleanArray9 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray12 = new boolean[] {};
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false, 0);
        java.lang.Boolean[] booleanArray20 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray22);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray24);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray24);
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray31, false);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray24, false);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray24, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray24);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray24, false, (int) (byte) 100);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray24);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, true);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray0, true);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[]");
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 10.0f, 0, 0.0d);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, 10.0d, 3, 0.0d);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray6, 0, 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[3.0, 4.0]");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) (short) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        char[] charArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a', 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        java.lang.Long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toObject(longArray4);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray11, (long) '#');
        java.lang.String str15 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray13, "-1.0");
        long[] longArray16 = new long[] {};
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.add(longArray17, 0, (long) (byte) 1);
        long[] longArray21 = new long[] {};
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.clone(longArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray22, 0L, (int) (byte) 0);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.addAll(longArray20, longArray22);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (int) (short) 0, (long) (short) 0);
        long[] longArray30 = new long[] {};
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray30);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.add(longArray31, 0, (long) (byte) 1);
        long[] longArray35 = new long[] {};
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.clone(longArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray36, 0L, (int) (byte) 0);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.addAll(longArray34, longArray36);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.addAll(longArray26, longArray40);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (long) 6);
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.subarray(longArray26, 0, (int) ' ');
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray46);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{1}" + "'", str15, "{1}");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[1]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[1, 6]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Class<?>[] wildcardClassArray1 = org.apache.commons.lang3.ArrayUtils.clone(wildcardClassArray0);
        java.lang.Class<?>[] wildcardClassArray2 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray8 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.clone(shortArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray2, (java.lang.Object) shortArray9, 4);
        java.lang.Class<?>[] wildcardClassArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray18 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.clone(shortArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray12, (java.lang.Object) shortArray19, 4);
        java.lang.Class<?>[] wildcardClassArray22 = org.apache.commons.lang3.ArrayUtils.addAll(wildcardClassArray2, wildcardClassArray12);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray23 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.GenericDeclaration[]) wildcardClassArray0, (java.lang.reflect.GenericDeclaration[]) wildcardClassArray12);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) genericDeclarationArray23, "{-1,1,-1,0,100,-1,100,-1,-1,10}");
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(wildcardClassArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray12);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClassArray22);
        org.junit.Assert.assertNotNull(genericDeclarationArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.lang.Long[] longArray4 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray4, (long) 4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.add(longArray6, (long) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[1, 0, 10, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100, 10, 0, 1, 35]");
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.remove(floatArray0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, 'a');
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(charArray25, '4');
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray0);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray13, true);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray13, true);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        java.lang.Object[] objArray0 = null;
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, false);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray5);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray0, (java.lang.Object[]) booleanArray5);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray13);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray23, false);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, true, (int) (byte) 10);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray25, true);
        float[][] floatArray31 = null;
        float[] floatArray37 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray43 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray49 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray55 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray61 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray62 = new float[][] { floatArray37, floatArray43, floatArray49, floatArray55, floatArray61 };
        float[][] floatArray63 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray31, floatArray62);
        float[][] floatArray64 = org.apache.commons.lang3.ArrayUtils.clone(floatArray62);
        java.lang.Boolean[] booleanArray69 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray69, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray71);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray64, (java.lang.Object) booleanArray71);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray25, booleanArray71);
        boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray25, (int) '#', 7);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray77);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray77);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, false, true, false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) (short) 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) 'a', 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) '4', (int) (short) 10);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 0.0f);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) (byte) -1);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, 0.0f);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.clone(floatArray15);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray15);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray15);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, (float) 3);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray15);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, 100.0f, 2);
        float[] floatArray31 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 0.0f);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(floatArray31, (float) (byte) 1);
        float[] floatArray41 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray31, floatArray41);
        float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray42, (float) 'a');
        int[] intArray51 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray52 = org.apache.commons.lang3.ArrayUtils.clone(intArray51);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.add(intArray51, (int) (byte) 0, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.clone(intArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.contains(intArray63, (int) (short) 0);
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.add(intArray63, (int) 'a');
        int[] intArray68 = org.apache.commons.lang3.ArrayUtils.clone(intArray63);
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.addAll(intArray51, intArray68);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray44, (java.lang.Object) intArray69);
        float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.clone(floatArray44);
        float[] floatArray73 = org.apache.commons.lang3.ArrayUtils.add(floatArray71, (float) (byte) 0);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.contains(floatArray71, (float) 7);
        float[] floatArray76 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray71);
        int int79 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray71, (float) (short) 1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[0.0, 0.0, 100.0, -1.0, 35.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        short[] shortArray15 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0, 0);
        short[] shortArray24 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray8, (java.lang.Object) shortArray27);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) (byte) 1, 7);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.clone(shortArray27);
        java.lang.String str35 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray27);
        java.lang.Short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray27);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{-1,1,-1,0,100,-1,100,-1,-1,10}" + "'", str35, "{-1,1,-1,0,100,-1,100,-1,-1,10}");
        org.junit.Assert.assertNotNull(shortArray36);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.remove(intArray6, (int) (short) 1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray19, (int) (short) 1);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray19, (int) (byte) 10);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray19);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray10, booleanArray23);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray23, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1]");
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(charArray12, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(charArray6, 'a');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray6, '4', (int) (short) -1);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '4', 2);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, (int) (byte) -1, (int) (short) 0);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (short) 1);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray15, (int) (byte) 1);
        java.lang.Integer[] intArray18 = org.apache.commons.lang3.ArrayUtils.toObject(intArray17);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18, (int) '#');
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18, 9);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray22, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 10, -1, 0, 1, 35, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35, 1, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35, 1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 0, 1, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] {};
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19, (double) 2);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray19);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray23, (double) 2, (double) 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "");
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray19, 10, 3);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray19);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray29, (int) (byte) 10);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray29, (int) (byte) -1, 2);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(intArray29, 0);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray29, 6, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, 100L);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray2, (-1L));
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray5, (long) (byte) 0);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, 1L, (int) (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray8);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray8);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[100]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[100]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[100, 0]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '4');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, '#');
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray5);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, 4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, (long) (short) -1);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray10, 0, (-1L));
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray10, (long) (short) 1, 7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray5, 2, '#');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray15 = org.apache.commons.lang3.ArrayUtils.add(charArray12, 100, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, #, 4, #]");
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d, (double) (byte) 10);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap11 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '97.0', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray7, true, (int) 'a');
        boolean[] booleanArray11 = null;
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, true, (int) '4');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false, true, false]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        byte[] byteArray31 = new byte[] { (byte) 100 };
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray31, (int) '4', (int) (byte) 10);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray31, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray31, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray6, (java.lang.Object) byteArray31);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray49, (int) (short) 0, 0);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) 1);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) 0);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray49, (int) (short) 0, 0);
        byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray31, byteArray49);
        java.lang.Byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100, -1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray61);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray2, 0);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.add(booleanArray2, 0, false);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray8, false, 4);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray8, (int) '4', 5);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) -1);
        int[] intArray19 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray19, "");
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray19, 10, 3);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray19);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray30);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(intArray30, 2);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray30, 9, 100);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{1,10,-1,0,1,35}" + "'", str25, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        boolean[] booleanArray5 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray11 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray17 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray18 = new boolean[][] { booleanArray5, booleanArray11, booleanArray17 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        double[] doubleArray30 = new double[] { 'a', 10, 1.0d };
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) 0, (double) 10.0f);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray30, 0.0d);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray25, (java.lang.Object) int35);
        boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, (java.lang.Object) intArray25);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray25);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.clone(intArray38);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.add(intArray38, (int) (byte) 0, (int) 'a');
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray38, (int) (short) 10);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[97, 0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray0, false);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, 0, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray5, (int) (byte) 0, (int) (byte) 100);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray5, true);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (byte) -1);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        java.util.Map<java.lang.Object, java.lang.Object> objMap5 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) floatArray0);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        java.util.Map<java.lang.Object, java.lang.Object> objMap7 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(objMap5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(objMap7);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray1 = new double[] {};
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[][] doubleArray5 = new double[][] { doubleArray0, doubleArray1, doubleArray2, doubleArray3, doubleArray4 };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray9 = new double[] { 100.0d };
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) 10.0f);
        double[] doubleArray14 = new double[] { 3, 4 };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 10.0f, 0, 0.0d);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray14);
        double[][] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (int) (short) 0, doubleArray14);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] {};
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23);
        int[] intArray28 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.clone(intArray28);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray23, (java.lang.Object) intArray28);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) (byte) 10);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray33, (double) 7);
        double[][] doubleArray36 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, doubleArray33);
        int[] intArray43 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.clone(intArray43);
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.add(intArray43, (int) (byte) 0, (int) (byte) 1);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray43, (int) (byte) -1);
        int[] intArray56 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.clone(intArray56);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.add(intArray56, (int) (byte) 0, (int) (byte) 1);
        java.lang.String str62 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray56, "");
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.subarray(intArray56, 10, 3);
        int[] intArray66 = org.apache.commons.lang3.ArrayUtils.addAll(intArray43, intArray56);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray66);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray36, (java.lang.Object) boolean67);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[52, 100, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{1,10,-1,0,1,35}" + "'", str62, "{1,10,-1,0,1,35}");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) 5);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9, (double) ' ');
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) 5);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (-1.0d), (double) '4');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] {};
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (-1.0d), (-1.0d));
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) 100L, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, '#');
        char[] charArray20 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray20);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray20);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray20);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, '4');
        char[] charArray26 = null;
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray23, charArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray23);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#4##a#4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#4##a#4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, 4, #, #, a, #, 4, #, a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a#4#a##4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a#4#a##4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a, #, 4, #, a, #, #, 4, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray12, 0L);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.add(longArray12, (long) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) longArray12, 10);
        java.lang.Byte[] byteArray21 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray21, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray21, (java.lang.Object) byteArray26, 5);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray26, (byte) 0, 10);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray33, (int) '4', (int) (byte) 10);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray33, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray39);
        int int41 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray39);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray39, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.add(byteArray44, (byte) 100);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray26, byteArray46);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.add(byteArray46, (int) (byte) 1, (byte) 100);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) byteArray50, 0);
        java.lang.Byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray50);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray53, (byte) 1);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100, 100]");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(charArray6, '4');
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, (int) (short) 0, 0);
        byte[] byteArray28 = null;
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray24, byteArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray29, (byte) 0, 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) '4', (java.lang.Object) 0);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, false);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, true, 9);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, true, false]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false, 2);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, true]");
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        boolean[] booleanArray0 = new boolean[] {};
        boolean[] booleanArray1 = new boolean[] {};
        boolean[] booleanArray2 = new boolean[] {};
        boolean[] booleanArray3 = new boolean[] {};
        boolean[] booleanArray4 = new boolean[] {};
        boolean[][] booleanArray5 = new boolean[][] { booleanArray0, booleanArray1, booleanArray2, booleanArray3, booleanArray4 };
        boolean[] booleanArray6 = new boolean[] {};
        boolean[] booleanArray7 = new boolean[] {};
        boolean[] booleanArray8 = new boolean[] {};
        boolean[] booleanArray9 = new boolean[] {};
        boolean[] booleanArray10 = new boolean[] {};
        boolean[][] booleanArray11 = new boolean[][] { booleanArray6, booleanArray7, booleanArray8, booleanArray9, booleanArray10 };
        boolean[] booleanArray12 = new boolean[] {};
        boolean[] booleanArray13 = new boolean[] {};
        boolean[] booleanArray14 = new boolean[] {};
        boolean[] booleanArray15 = new boolean[] {};
        boolean[] booleanArray16 = new boolean[] {};
        boolean[][] booleanArray17 = new boolean[][] { booleanArray12, booleanArray13, booleanArray14, booleanArray15, booleanArray16 };
        boolean[][][] booleanArray18 = new boolean[][][] { booleanArray5, booleanArray11, booleanArray17 };
        boolean[][][] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toArray(booleanArray18);
        boolean[] booleanArray25 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray31 = new boolean[] { false, false, false, true, true };
        boolean[] booleanArray37 = new boolean[] { false, false, false, true, true };
        boolean[][] booleanArray38 = new boolean[][] { booleanArray25, booleanArray31, booleanArray37 };
        java.lang.Integer[] intArray45 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray45);
        double[] doubleArray50 = new double[] { 'a', 10, 1.0d };
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray50, (double) (short) 0, (double) 10.0f);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray50, 0.0d);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray45, (java.lang.Object) int55);
        boolean[][] booleanArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray38, (java.lang.Object) intArray45);
        boolean[][][] booleanArray58 = org.apache.commons.lang3.ArrayUtils.add(booleanArray19, booleanArray38);
        float[] floatArray59 = new float[] {};
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.add(floatArray59, 0.0f);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.contains(floatArray59, (float) (byte) 1);
        float[] floatArray69 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray59, floatArray69);
        float[] floatArray73 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray69, (int) (short) 1, (int) '#');
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray73, 0.0f, 0);
        float[] floatArray78 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray73, 0.0f);
        int int79 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray38, (java.lang.Object) floatArray73);
        java.lang.Integer[] intArray86 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray87 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray86);
        int[] intArray88 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray86);
        int[] intArray89 = org.apache.commons.lang3.ArrayUtils.clone(intArray88);
        int[] intArray92 = org.apache.commons.lang3.ArrayUtils.add(intArray89, 1, 0);
        int int93 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray38, (java.lang.Object) intArray89);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, 0.0f);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray4, (float) '4', 100);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, 100.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (double) (byte) 1);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, 10.0d, (int) '4', (double) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) (short) 1);
        java.lang.Integer[] intArray11 = org.apache.commons.lang3.ArrayUtils.toObject(intArray8);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray11);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) 10);
        float[] floatArray35 = null;
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray36, 0.0f);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray36, 0.0f, (-1));
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray36, 10.0f, 4);
        java.lang.Float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray36);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(floatArray45);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '4');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray9, 1, 'a');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.subarray(charArray14, (int) (short) 1, (int) (byte) 10);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray18);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.add(charArray18, '4');
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(charArray21, ' ');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "aa##4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "aa##4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, a, #, #, 4, #, 4]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1]");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        double[] doubleArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray0, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.remove(charArray34, 7);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray36, '#');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#4##a4a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#4##a4a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, 4, #, #, a, 4, a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4##a4a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4##a4a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #, #, a, 4, a, #, 4, #]");
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray0);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (byte) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d, 4, (double) 1);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) (short) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (-1L));
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) -1, (double) (short) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) (-1L), (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[97.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        boolean[] booleanArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray14, (int) (short) 0, '4');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.add(charArray18, 1, 'a');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray6, (java.lang.Object) charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray6, (double) 0, (double) 10.0f);
        java.lang.Double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29, (double) 2);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray29);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) 4);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.add(doubleArray32, 0, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4aa##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 3.0, 4.0]");
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (-1.0f));
        float[] floatArray7 = new float[] {};
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, 0.0f);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) (byte) -1);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray7, 0.0f);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray7);
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray7, (float) (byte) 1, 3);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray7);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray6);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Object obj1 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray0, obj1);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) (short) 10);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray4, (float) 3);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) '4', (int) (short) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 100);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray8, 6, (short) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray11);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[-1, 1, 100, 0, -1, 100, -1]");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray0 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray1 = new java.lang.reflect.AnnotatedElement[][] {};
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray2 = new java.lang.reflect.AnnotatedElement[][][] { annotatedElementArray0, annotatedElementArray1 };
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray3 = org.apache.commons.lang3.ArrayUtils.toArray(annotatedElementArray2);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(annotatedElementArray2);
        java.lang.Boolean[] booleanArray10 = new java.lang.Boolean[] { true, false, false, false, false };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        java.lang.Boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray13);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray13);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, false);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) annotatedElementArray2, (java.lang.Object) false, 100);
        org.junit.Assert.assertNotNull(annotatedElementArray0);
        org.junit.Assert.assertNotNull(annotatedElementArray1);
        org.junit.Assert.assertNotNull(annotatedElementArray2);
        org.junit.Assert.assertNotNull(annotatedElementArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray7, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false, true, false]");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray5, (int) (short) 0, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, -1, 1, -1, 0, 100]");
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, 0.0f);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) -1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, 0.0f);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.clone(floatArray1);
        java.lang.String str9 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray1);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, 0.0f);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray12, 0.0f);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray1, floatArray12);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, 0.0f, (int) '#');
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) '#', 2);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[0.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray5, 2, '#');
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray12, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray12, (int) (byte) 10, '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, #, #, 4, #]");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        byte[][][] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[][][] byteArray2 = org.apache.commons.lang3.ArrayUtils.remove(byteArray0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray6, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', ' ', '#', '#', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '4');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4,  , #, #, 4]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4 ##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4 ##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4,  , #, #, 4]");
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        boolean[][] booleanArray0 = new boolean[][] {};
        boolean[][] booleanArray1 = new boolean[][] {};
        boolean[][][] booleanArray2 = new boolean[][][] { booleanArray0, booleanArray1 };
        boolean[][] booleanArray3 = new boolean[][] {};
        boolean[][] booleanArray4 = new boolean[][] {};
        boolean[][][] booleanArray5 = new boolean[][][] { booleanArray3, booleanArray4 };
        boolean[][] booleanArray6 = new boolean[][] {};
        boolean[][] booleanArray7 = new boolean[][] {};
        boolean[][][] booleanArray8 = new boolean[][][] { booleanArray6, booleanArray7 };
        boolean[][] booleanArray9 = new boolean[][] {};
        boolean[][] booleanArray10 = new boolean[][] {};
        boolean[][][] booleanArray11 = new boolean[][][] { booleanArray9, booleanArray10 };
        boolean[][][][] booleanArray12 = new boolean[][][][] { booleanArray2, booleanArray5, booleanArray8, booleanArray11 };
        boolean[][][][][] booleanArray13 = new boolean[][][][][] { booleanArray12 };
        boolean[][][][][] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) '#', 100);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray17);
        double[] doubleArray20 = new double[] { 100.0d };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) 10.0f);
        double[] doubleArray25 = new double[] { 3, 4 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray20, doubleArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) 10.0f, 0, 0.0d);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray25);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray17, doubleArray25);
        double[] doubleArray33 = null;
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray33);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray13, (java.lang.Object) doubleArray25, 4);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[4.0, 3.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray1, (byte) 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.clone(byteArray1);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) (short) 0, 0);
        byte[] byteArray18 = null;
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray14, byteArray18);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray20, (int) '#', 0);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray14, (java.lang.Object) doubleArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, (byte) 100);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray26, 0, (int) (short) 10);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray26, (byte) -1);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray26);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, -1, 10, 0, 10, 0, 0, 100]");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, (int) '#', 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray11 = new double[] { 'a', 10, 1.0d };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) 0, (double) 10.0f);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, 0.0d);
        double[] doubleArray20 = new double[] { 'a', 10, 1.0d };
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) 0, (double) 10.0f);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, 0.0d);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray20);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray26);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray26, 0.0d);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray26, (int) ' ', 10);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray32);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray33, (double) 2, (double) (short) -1);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) '#', (double) 9);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        short[] shortArray0 = null;
        java.lang.Short[] shortArray7 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray7, (short) 100);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray7);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, 3, (short) (byte) 0);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray0, shortArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray13);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1, 100, 0, 0, -1, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.io.Serializable[][][][] serializableArray0 = null;
        java.lang.Float[][][][][] floatArray2 = new java.lang.Float[][][][][] {};
        java.lang.Float[][][][][] floatArray3 = new java.lang.Float[][][][][] {};
        java.lang.Float[][][][][][] floatArray4 = new java.lang.Float[][][][][][] { floatArray2, floatArray3 };
        java.lang.Float[][][][][][] floatArray5 = org.apache.commons.lang3.ArrayUtils.toArray(floatArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable[][][][] serializableArray6 = org.apache.commons.lang3.ArrayUtils.add(serializableArray0, 9, (java.io.Serializable[][][]) floatArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, 'a');
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0, ' ');
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray4, 'a');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        char[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a');
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(charArray0, ' ');
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.Comparable[][] comparableArray2 = new java.lang.Comparable[1][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray3 = (java.lang.Comparable<java.lang.String>[][]) comparableArray2;
        strComparableArray3[0] = strArray0;
        java.lang.String[] strArray6 = new java.lang.String[] {};
        java.lang.Comparable[][] comparableArray8 = new java.lang.Comparable[1][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray9 = (java.lang.Comparable<java.lang.String>[][]) comparableArray8;
        strComparableArray9[0] = strArray6;
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.lang.Comparable[][] comparableArray14 = new java.lang.Comparable[1][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray15 = (java.lang.Comparable<java.lang.String>[][]) comparableArray14;
        strComparableArray15[0] = strArray12;
        java.lang.String[] strArray18 = new java.lang.String[] {};
        java.lang.Comparable[][] comparableArray20 = new java.lang.Comparable[1][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray21 = (java.lang.Comparable<java.lang.String>[][]) comparableArray20;
        strComparableArray21[0] = strArray18;
        java.lang.String[] strArray24 = new java.lang.String[] {};
        java.lang.Comparable[][] comparableArray26 = new java.lang.Comparable[1][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray27 = (java.lang.Comparable<java.lang.String>[][]) comparableArray26;
        strComparableArray27[0] = strArray24;
        java.lang.Comparable[][][] comparableArray31 = new java.lang.Comparable[5][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray32 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray31;
        strComparableArray32[0] = strComparableArray3;
        strComparableArray32[1] = strComparableArray9;
        strComparableArray32[2] = strComparableArray15;
        strComparableArray32[3] = strComparableArray21;
        strComparableArray32[4] = strComparableArray27;
        java.lang.Comparable<java.lang.String>[][][] strComparableArray43 = org.apache.commons.lang3.ArrayUtils.clone(strComparableArray32);
        java.lang.Boolean[] booleanArray46 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46, false);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46, false);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46);
        char[] charArray57 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.clone(charArray57);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(charArray57, '4');
        java.lang.Character[] charArray61 = org.apache.commons.lang3.ArrayUtils.toObject(charArray57);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray62, '#');
        java.lang.Character[] charArray65 = org.apache.commons.lang3.ArrayUtils.toObject(charArray62);
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray65, ' ');
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray46, (java.lang.Object) charArray65);
        int int70 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strComparableArray32, (java.lang.Object) boolean68, (int) '4');
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(comparableArray2);
        org.junit.Assert.assertNotNull(strComparableArray3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(comparableArray8);
        org.junit.Assert.assertNotNull(strComparableArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(comparableArray14);
        org.junit.Assert.assertNotNull(strComparableArray15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(comparableArray20);
        org.junit.Assert.assertNotNull(strComparableArray21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(comparableArray26);
        org.junit.Assert.assertNotNull(strComparableArray27);
        org.junit.Assert.assertNotNull(comparableArray31);
        org.junit.Assert.assertNotNull(strComparableArray32);
        org.junit.Assert.assertNotNull(strComparableArray43);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, true]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray13, true);
        java.lang.Class<?> wildcardClass16 = booleanArray15.getClass();
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.String[] strArray4 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        short[] shortArray7 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray7);
        short[] shortArray9 = null;
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray7, shortArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray4, (java.lang.Object) shortArray9, 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray2, (java.lang.Object) strArray4);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 1, 1]");
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray0);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, (float) 3);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) (byte) 1, 7);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray11, (float) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.remove(floatArray11, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (-1.0f));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) ' ', (int) (short) -1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 0, (int) (byte) 0);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (short) 0, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (byte) 10);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.clone(byteArray28);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (int) (short) 100, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10]");
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 10, 7, 10, 9, 6 };
        java.lang.Integer[][] intArray6 = new java.lang.Integer[][] { intArray5 };
        java.lang.Integer[] intArray12 = new java.lang.Integer[] { 10, 7, 10, 9, 6 };
        java.lang.Integer[][] intArray13 = new java.lang.Integer[][] { intArray12 };
        java.lang.Integer[][][] intArray14 = new java.lang.Integer[][][] { intArray6, intArray13 };
        java.lang.Integer[][][][] intArray15 = new java.lang.Integer[][][][] { intArray14 };
        java.lang.Object obj16 = null;
        java.lang.Integer[][][][] intArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray15, obj16);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        int[] intArray2 = new int[] { 'a', (byte) 0 };
        int[] intArray5 = new int[] { 'a', (byte) 0 };
        int[][] intArray6 = new int[][] { intArray2, intArray5 };
        int[] intArray13 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray20 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[] intArray27 = new int[] { (short) 1, '#', 'a', (byte) 100, (short) 1, ' ' };
        int[][] intArray28 = new int[][] { intArray13, intArray20, intArray27 };
        int[][] intArray29 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray28);
        short[] shortArray35 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray35, (short) (byte) 0, 0);
        short[] shortArray44 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.clone(shortArray44);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray45);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray35, shortArray45);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray47, (short) 10);
        java.lang.Short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray47);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray29, (java.lang.Object) shortArray50, (int) (short) -1);
        short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray50, (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[97, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 35, 97, 100, 1, 32]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 100, (short) -1, (short) 100 };
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3, (short) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3, (short) (byte) 100);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, -1, 100]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[100, -1, 100]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, -1, 100]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, -1, 100]");
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.remove(charArray34, 7);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.remove(charArray34, 0);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#4##a4a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#4##a4a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, 4, #, #, a, 4, a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #, #, a, 4, a, #, #, 4, #]");
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 10L);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[][] doubleArray28 = new java.lang.Double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[][] doubleArray57 = new java.lang.Double[][] { doubleArray35, doubleArray42, doubleArray49, doubleArray56 };
        java.lang.Double[][][] doubleArray58 = new java.lang.Double[][][] { doubleArray28, doubleArray57 };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double[][][] doubleArray61 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray58, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        int[] intArray5 = new int[] { '4', (short) 100, (short) 10 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray0, (java.lang.Object) intArray5);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) (byte) 10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray10, (double) 7);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, 0.0d, (double) 5);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 100.0f, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 100, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[52, 100, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray26, (int) (short) 1, (int) '#');
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray31);
        int int33 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray10);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        java.lang.Float[] floatArray35 = new java.lang.Float[] {};
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray35, 0.0f);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray35);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray35, (float) 0L);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray34, floatArray41);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        java.lang.Character[] charArray6 = new java.lang.Character[] { 'a', '4', ' ', '4', ' ', ' ' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray7, (int) (short) 100, '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a4 4  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a4 4  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, 4,  , 4,  ,  ]");
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        java.lang.Double[][][] doubleArray0 = null;
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[][] doubleArray29 = new java.lang.Double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28 };
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 100.0d, (-1.0d), (-1.0d), 0.0d, 0.0d, (-1.0d) };
        java.lang.Double[][] doubleArray58 = new java.lang.Double[][] { doubleArray36, doubleArray43, doubleArray50, doubleArray57 };
        java.lang.Double[][][] doubleArray59 = new java.lang.Double[][][] { doubleArray29, doubleArray58 };
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray59);
        java.lang.Double[][][] doubleArray61 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Double[][][] doubleArray63 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray59, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] {};
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray5, (double) 2);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray3, (java.lang.Object[]) doubleArray5);
        int[] intArray12 = new int[] { 1, (-1), (short) -1 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0, (int) (byte) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) doubleArray5, (java.lang.Object) intArray15);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 1, -1, -1]");
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (long) 6);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.subarray(longArray10, 0, (int) ' ');
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) (byte) 10, (int) (byte) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, 6]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        float[][] floatArray0 = null;
        float[] floatArray6 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray12 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray18 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray24 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[] floatArray30 = new float[] { (byte) 10, (-1.0f), (byte) 10, ' ', 10L };
        float[][] floatArray31 = new float[][] { floatArray6, floatArray12, floatArray18, floatArray24, floatArray30 };
        float[][] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray31);
        float[][] floatArray33 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, -1.0, 10.0, 32.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertNull(floatArray33);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray2);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) (byte) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 3, 0);
        java.lang.Short[] shortArray23 = new java.lang.Short[] { (short) -1, (short) 100, (short) -1, (short) 0, (short) 100, (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray23, (short) 100);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray23);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray26, 5, (short) (byte) 1);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray2, shortArray26);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[-1, 100, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 100, -1, 0, 100, 1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 0, -1, 100, -1, 0, 100, 1]");
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        java.lang.Byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 1);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        int[] intArray0 = null;
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray8);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        short[] shortArray16 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray16, (short) (byte) 0, 0);
        short[] shortArray25 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.clone(shortArray25);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray26);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.add(shortArray28, (short) 10);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray9, (java.lang.Object) shortArray28);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9, 2);
        java.lang.Integer[] intArray40 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray40);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray33, intArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray33);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray33);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 10, 10, 1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 10, 10, 1, 0, 0]");
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, 1L);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray10);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, (long) (short) -1);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray19, 1, 0L);
        java.lang.Long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toObject(longArray22);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.add(longArray22, (long) 7);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, 0]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 0, 7]");
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        java.lang.String str19 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[97.0, 10.0, 1.0, 97.0, 10.0, 1.0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{97.0,10.0,1.0,97.0,10.0,1.0}" + "'", str19, "{97.0,10.0,1.0,97.0,10.0,1.0}");
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        short[] shortArray5 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.clone(shortArray5);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray6);
        java.lang.Short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[-1, 100, -1, -1, 10]");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray8);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) (short) 1, (int) '4');
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray16, (int) (byte) 100, (-1));
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray16, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, false);
        boolean[] booleanArray11 = new boolean[] {};
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 0);
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray19, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray23);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray23, 2, 1);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray6, booleanArray27);
        java.lang.Boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, false, true]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        char[] charArray5 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 0, '4');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, 'a', (int) (short) -1);
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, ' ');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        java.io.Serializable[] serializableArray20 = new java.io.Serializable[] {};
        java.io.Serializable[] serializableArray21 = null;
        java.io.Serializable[] serializableArray22 = org.apache.commons.lang3.ArrayUtils.addAll(serializableArray20, serializableArray21);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray15, (java.lang.Object) serializableArray20);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(serializableArray20);
        org.junit.Assert.assertNotNull(serializableArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, a, #, #, 4, #]");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) charArray0);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(objMap1);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        char[][][][] charArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[][][][] charArray2 = org.apache.commons.lang3.ArrayUtils.remove(charArray0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, (float) (byte) -1);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray9, 0.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, 0.0f);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray9);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray9);
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, 0.0f);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(floatArray20, (float) (byte) 1);
        float[] floatArray30 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray30);
        float[] floatArray32 = new float[] {};
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.add(floatArray32, 0.0f);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(floatArray32, (float) (byte) 1);
        float[] floatArray42 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray32, floatArray42);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, (float) 0, 0);
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray32, (int) (short) 100, (int) '#');
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray49);
        float[] floatArray51 = new float[] {};
        float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.add(floatArray51, 0.0f);
        float[] floatArray54 = new float[] {};
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.add(floatArray54, 0.0f);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray54, (float) (byte) -1);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray51, floatArray54);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray49, floatArray54);
        float[] floatArray61 = new float[] {};
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.add(floatArray61, 0.0f);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray63);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray19, floatArray54);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray54);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(floatArray54, (float) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[0.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray7);
        int int9 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (short) -1, (int) (byte) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) -1, (int) (short) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray7, (byte) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(byteArray17, (byte) 100);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray21);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, false]");
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        short[] shortArray2 = new short[] { (byte) 10, (byte) 100 };
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[10, 100]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray6, (int) 'a', (int) (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray11);
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toObject(longArray11);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray8);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray8);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, 10, 1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 10, 10, 1]");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray18, (int) ' ', 10);
        double[] doubleArray26 = new double[] { 100.0d };
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 10.0f);
        double[] doubleArray31 = new double[] { 3, 4 };
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray31);
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (-1L), 0, (double) (byte) 100);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, 100.0d, (-1), (double) 100);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 9, (double) 'a');
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.add(doubleArray18, (double) 7);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, 7.0]");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray22 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0, 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (short) 100, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray29);
        float[] floatArray31 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 0.0f);
        float[] floatArray34 = new float[] {};
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray34, 0.0f);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, (float) (byte) -1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray34);
        float[] floatArray41 = new float[] {};
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, 0.0f);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray34, floatArray43);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray34, (float) (byte) 10);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(floatArray34, (float) 5);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.add(floatArray34, 9, (float) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        double[] doubleArray3 = new double[] { 100.0d };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        double[] doubleArray8 = new double[] { 3, 4 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f, 0, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray15, 0.0d, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray0);
        float[] floatArray13 = new float[] {};
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, 0.0f);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(floatArray13, (float) (byte) 1);
        float[] floatArray23 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray13, floatArray23);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.clone(floatArray23);
        int int26 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray25);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray25, (float) (short) 10);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray25, (float) (short) 10);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray25, (float) 9, (int) (short) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.lang.Long[] longArray3 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray7 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray11 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray15 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray19 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray20 = new java.lang.Long[][] { longArray3, longArray7, longArray11, longArray15, longArray19 };
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray20, longArray21);
        float[] floatArray23 = new float[] {};
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, 0.0f);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(floatArray23, (float) (byte) 1);
        float[] floatArray33 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.clone(floatArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray22, (java.lang.Object) floatArray35, (int) (short) 10);
        double[] doubleArray39 = new double[] { 100.0d };
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray39, (double) 10.0f);
        double[] doubleArray44 = new double[] { 3, 4 };
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray39, doubleArray44);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray44, (double) 10.0f, 0, 0.0d);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray44);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray44, 10.0d, 3, 0.0d);
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray44, (double) (-1.0f));
        double[] doubleArray58 = new double[] { 100.0d };
        int int60 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray58, (double) 10.0f);
        double[] doubleArray63 = new double[] { 3, 4 };
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray58, doubleArray63);
        double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray56, doubleArray63);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray66, (int) '#', 0);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray66, (double) 10L, 0, (double) (short) 100);
        double[] doubleArray74 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray63, doubleArray66);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray22, (java.lang.Object) doubleArray66, (int) '4');
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[3.0, 4.0, 3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        int[] intArray0 = null;
        int[] intArray7 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (byte) 0, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray18);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, (int) (byte) 1, (int) (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray23, 0);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray26);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35, 1, 0, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray0);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) (short) 10);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) (short) 1);
        java.util.Map<java.lang.Object, java.lang.Object> objMap8 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray0);
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray11, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray11, (java.lang.Object) byteArray16, 5);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 0, 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray0, (java.lang.Object) byteArray16, (int) 'a');
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray30, (int) (short) 0, 0);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.add(byteArray33, (byte) 10);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.add(byteArray35, (byte) 1);
        java.lang.Byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray35);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.add(byteArray35, 1, (byte) 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray16, byteArray35);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(byteArray42, (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(objMap8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 0]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray0);
        double[] doubleArray3 = new double[] { 100.0d };
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        double[] doubleArray8 = new double[] { 3, 4 };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray3, doubleArray8);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) 10.0f, 0, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray0);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (-1.0f), 8, (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[3.0, 4.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 0, (byte) 1 };
        java.lang.Byte[][] byteArray12 = new java.lang.Byte[][] { byteArray5, byteArray11 };
        java.lang.Byte[][] byteArray13 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray12);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        short[] shortArray23 = new short[] { (byte) 1, (short) 0 };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 10);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 100);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) 0);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray18, (java.lang.Object) (short) 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) byteArray12, (java.lang.Object[]) booleanArray18);
        byte[] byteArray36 = new byte[] { (byte) 100 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray36, (int) '4', (int) (byte) 10);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray36, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray42);
        int int44 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray42);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray42, (int) (short) -1, (int) (byte) 1);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray42, (byte) -1, (int) (short) 100);
        java.lang.Byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray42);
        int[] intArray58 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.clone(intArray58);
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.add(intArray58, (int) (byte) 0, (int) (byte) 1);
        int[] intArray69 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray70 = org.apache.commons.lang3.ArrayUtils.clone(intArray69);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.contains(intArray70, (int) (short) 0);
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.add(intArray70, (int) 'a');
        int[] intArray75 = org.apache.commons.lang3.ArrayUtils.clone(intArray70);
        int[] intArray76 = org.apache.commons.lang3.ArrayUtils.addAll(intArray58, intArray75);
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray58, (int) (byte) 100);
        int int79 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray51, (java.lang.Object) int78);
        byte[] byteArray80 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray51);
        java.lang.Byte[][] byteArray81 = org.apache.commons.lang3.ArrayUtils.add(byteArray12, 0, byteArray51);
        java.util.Map<java.lang.Object, java.lang.Object> objMap82 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) byteArray51);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertNotNull(objMap82);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 10);
        java.lang.Byte[] byteArray11 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray11, (byte) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.remove(byteArray8, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 1, 0, 1]");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        java.lang.Boolean[] booleanArray4 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray4, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray6);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.add(booleanArray10, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, true, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true, false]");
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 0, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 0);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 0);
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray17, (short) 100);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) (short) 1, (int) '#');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray16 = new float[] {};
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, 0.0f);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray16, (float) (byte) 1);
        float[] floatArray26 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray26);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.clone(floatArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray28, (float) ' ', (int) (short) 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray28);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray28, (int) (short) 1, 0);
        float[] floatArray37 = new float[] {};
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.add(floatArray37, 0.0f);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(floatArray37, (float) (byte) 1);
        float[] floatArray47 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray37, floatArray47);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray48, (float) 'a');
        int[] intArray57 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.clone(intArray57);
        int[] intArray61 = org.apache.commons.lang3.ArrayUtils.add(intArray57, (int) (byte) 0, (int) (byte) 1);
        int[] intArray68 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.clone(intArray68);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.contains(intArray69, (int) (short) 0);
        int[] intArray73 = org.apache.commons.lang3.ArrayUtils.add(intArray69, (int) 'a');
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.clone(intArray69);
        int[] intArray75 = org.apache.commons.lang3.ArrayUtils.addAll(intArray57, intArray74);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray50, (java.lang.Object) intArray75);
        float[] floatArray77 = org.apache.commons.lang3.ArrayUtils.clone(floatArray50);
        int int79 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray77, 0.0f);
        float[] floatArray82 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray77, 7, (int) (byte) -1);
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray36, floatArray77);
        int int86 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray36, (float) 0, 9);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, 8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '#');
        char[] charArray22 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray22, (int) (short) 0, '4');
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.add(charArray22, 2, '#');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray29);
        char[] charArray36 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(charArray36, '4');
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray40, '#', 0);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray30, '#');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a###4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a###4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 0, 1, 10, 10, 1 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        short[] shortArray15 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0, 0);
        short[] shortArray24 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray25);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray8, (java.lang.Object) shortArray27);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) (byte) 1, 7);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.clone(shortArray27);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray27);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 1, 10, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) (byte) -1, 8, 1.0d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 10L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 0L);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray0);
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) byteArray1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, (int) (short) 0, 100.0d);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 6, (int) (byte) 100);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 1L, 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        char[] charArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a', (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) '4', (int) (byte) 10);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray13, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray19);
        int int21 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray19);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (byte) 100);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray24);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray27, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.lang.String[] strArray2 = new java.lang.String[] { "{100,1}", "{1,10,-1,0,1,35}" };
        java.lang.Comparable<java.lang.String>[] strComparableArray5 = org.apache.commons.lang3.ArrayUtils.add((java.lang.Comparable<java.lang.String>[]) strArray2, (int) (short) 1, (java.lang.Comparable<java.lang.String>) "{}");
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, (int) (byte) 10, (int) (short) 0);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray10, (long) 0);
        java.lang.Long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toObject(longArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray2, (java.lang.Object[]) longArray13);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray13, (long) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strComparableArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, (long) (short) 100);
        java.lang.Long[] longArray7 = new java.lang.Long[] { 100L, 10L, 0L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) 4);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray9, (long) (-1));
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.add(longArray13, 0L);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.addAll(longArray2, longArray15);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray2, 9, (long) 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[100]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[100, 10, 0, 1, 35]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[100, 10, 0, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[100, 10, 0, 1, 0]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[100, 100, 10, 0, 1, 0]");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        double[] doubleArray3 = new double[] { 7, (short) -1, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 1, (int) '4', (double) 7);
        java.lang.String str9 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) int7, "");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[7.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray9, 0, (int) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray12);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 1.0]");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        java.lang.Byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        short[] shortArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, 100, (int) (short) -1);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, (int) (short) -1, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray31 = org.apache.commons.lang3.ArrayUtils.remove(charArray11, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4]");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 10L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 0L);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(longArray7, (long) 2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(objMap1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray1, 0L);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.clone(longArray1);
        java.lang.Integer[] intArray5 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray6 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray7 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray8 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray9 = new java.lang.Integer[] {};
        java.lang.Integer[] intArray10 = new java.lang.Integer[] {};
        java.lang.Integer[][] intArray11 = new java.lang.Integer[][] { intArray5, intArray6, intArray7, intArray8, intArray9, intArray10 };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 3, 1, 1, (-1), 2, (-1) };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray18, intArray25 };
        java.lang.Integer[][] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray11, intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray4, (java.lang.Object) intArray26);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray26);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray40 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray40, (int) (short) 0, '4');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 2, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray14, charArray47);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, 'a');
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#');
        java.lang.Character[] charArray53 = org.apache.commons.lang3.ArrayUtils.toObject(charArray14);
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray53);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, 4, #, #, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#, 4, #, #, a, 4]");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        char[] charArray0 = null;
        char[] charArray4 = new char[] { '4', '#', 'a' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.subarray(charArray4, 0, (int) (byte) 1);
        char[] charArray13 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray13);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray13);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray15, '#', (int) 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray15);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray15);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray15, 10, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 0 };
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 0 };
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 0 };
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 0 };
        byte[][] byteArray12 = new byte[][] { byteArray2, byteArray5, byteArray8, byteArray11 };
        byte[][] byteArray13 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray12);
        java.lang.Boolean[] booleanArray16 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray16, false);
        char[] charArray22 = new char[] { '4', '#', 'a' };
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.subarray(charArray22, 0, (int) (byte) 1);
        char[] charArray31 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray31);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.addAll(charArray25, charArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray25, '#');
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray16, (java.lang.Object) charArray25, 0);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.subarray(charArray25, 100, (int) (short) -1);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray25, '#');
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray42, '#', 3);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.clone(charArray42);
        java.lang.Character[] charArray47 = org.apache.commons.lang3.ArrayUtils.toObject(charArray46);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray46, '#');
        byte[][] byteArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray13, (java.lang.Object) '#');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, true]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[4]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(byteArray50);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.remove(shortArray10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[100, 1]");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        short[] shortArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(shortArray0, (short) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 0, (long) (short) 0);
        long[] longArray14 = new long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.add(longArray15, 0, (long) (byte) 1);
        long[] longArray19 = new long[] {};
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, (int) (byte) 0);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray20);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray24);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray24);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[0, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        short[] shortArray2 = new short[] { (byte) 1, (short) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) 0);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) (byte) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray12, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        int[] intArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray0, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, 'a', (int) (short) 1);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray14, '4');
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        short[] shortArray23 = new short[] { (byte) 1, (short) 0 };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 10);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 0);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, (short) (byte) 1);
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray27);
        char[] charArray36 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(charArray36, '4');
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(charArray36, '#');
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray30, (java.lang.Object) charArray36, (int) (byte) 100);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray36, 'a', (int) (byte) -1);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray47);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "4a##4#4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "4a##4#4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4, a, #, #, 4, #, 4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        float[] floatArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, 0.0f, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.lang.Character[] charArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        char[] charArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray0);
        char[] charArray5 = new char[] { '4', '#', 'a' };
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.subarray(charArray5, 0, (int) (byte) 1);
        char[] charArray14 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.clone(charArray14);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray16, '4');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray1, charArray16);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray1);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        java.lang.Short[] shortArray3 = new java.lang.Short[] { (short) 100, (short) -1, (short) 100 };
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray3, (short) 10);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) 0);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray5);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, -1, 100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) '4', (int) (byte) 10);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 100, (int) (byte) 0);
        long[] longArray8 = new long[] {};
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray9, 0L);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (long) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray9, 0L);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray9, (long) (short) 1);
        java.lang.Object[] objArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) '4', (int) (byte) 10);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray26);
        int int28 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray18, (java.lang.Object) byteArray26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { byteArray7, int17, objArray18 };
        long[] longArray31 = new long[] {};
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.clone(longArray31);
        java.lang.Long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toObject(longArray31);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(longArray31, (long) (byte) 1);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray18, (java.lang.Object) longArray31, (int) (short) -1);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray31, 1L);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[[], -1, []]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        short[] shortArray5 = new short[] { (byte) -1, (byte) 1, (short) -1, (byte) 0, (byte) 100 };
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray5, (short) (byte) 0, 0);
        short[] shortArray14 = new short[] { (byte) 10, (short) -1, (byte) -1, (short) 100, (byte) -1 };
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.clone(shortArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 10);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (byte) 100, (int) '4');
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray26 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray26);
        short[] shortArray28 = null;
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray26, (short) -1);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.remove(shortArray26, (int) (byte) 1);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.add(shortArray26, (short) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.remove(shortArray35, 1);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray17, shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray17, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.remove(shortArray41, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 1, -1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[10, -1, -1, 100, -1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[-1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[-1, 1, -1, 0, 100, -1, 100, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[-1, 1, -1, 0, 100, -1, 100, -1, -1, 10, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[]");
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        int[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        java.lang.Integer[] intArray1 = org.apache.commons.lang3.ArrayUtils.toObject(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray1);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.remove(shortArray11, 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.remove(shortArray13, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[100, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10]");
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, true);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray2);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray2, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray2, true);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        java.lang.Integer[] intArray11 = org.apache.commons.lang3.ArrayUtils.toObject(intArray10);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray11);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(floatArray0, (float) (byte) 1);
        float[] floatArray10 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray10);
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 0.0f);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray12, (float) (byte) 1);
        float[] floatArray22 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 0, 0);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, (int) (short) 100, (int) '#');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray11, floatArray29);
        float[] floatArray31 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 0.0f);
        float[] floatArray34 = new float[] {};
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray34, 0.0f);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray34, (float) (byte) -1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray31, floatArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray34);
        java.lang.Float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray34);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray41);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (int) (byte) 0, (short) 10);
        java.lang.Short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray3);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) 10);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[10]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 0, 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.clone(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.lang.Object[] objArray0 = null;
        char[] charArray6 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray7, '#');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, ' ');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, '#');
        char[] charArray21 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray21);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray15, charArray21);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, '4');
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.add(charArray24, '4');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray24, '4');
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) charArray24);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a#4#a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a#4#a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a, #, 4, #, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a#4#a##4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a#4#a##4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, 4, #, a, #, #, 4, #, 4]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a#4#a##4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a#4#a##4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, #, 4, #, a, #, #, 4, #, 4]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a#4#a##4#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a#4#a##4#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, #, 4, #, a, #, #, 4, #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) '4', (int) (byte) 10);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray2, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        int int10 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) byteArray8);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) '4', (int) (byte) 10);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray14);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray14, (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray14, (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray14, (int) (short) 1, (byte) 1);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray8, byteArray14);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.clone(byteArray8);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) (short) 0, 0);
        byte[] byteArray10 = null;
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray12, (int) '#', 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray6, (java.lang.Object) doubleArray15);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 100);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 0, (int) (short) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.add(byteArray23, (byte) -1);
        byte[] byteArray28 = new byte[] { (byte) 100 };
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray28, (int) '4', (int) (byte) 10);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.clone(byteArray31);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.add(byteArray32, (byte) 1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray23, byteArray32);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray23, (byte) 0);
        java.lang.Class<?> wildcardClass38 = byteArray23.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 0, 10, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 0, 10, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 0, 10, 0, 0, 100, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray2, (java.lang.Object) 1L);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) byteArray7, 5);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) 0, (byte) 0 };
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, (int) (short) 0, 0);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (byte) 10);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray21, (byte) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, (int) '4');
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 0, (-1));
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray7, byteArray23);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) '4', (int) (byte) 10);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray32, (int) (byte) 100, (int) (byte) 0);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        int int40 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray38);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray38, (int) (short) -1, (int) (byte) 1);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.add(byteArray43, (byte) 100);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray43);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray46, 3, 1);
        byte[] byteArray50 = null;
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray46, byteArray50);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray50, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1]");
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) 2);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) (byte) 0, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.clone(intArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(intArray18, (int) (short) 0);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.add(intArray18, (int) 'a');
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray23);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray24, 3, (int) (short) 0);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.clone(intArray24);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 10, -1, 0, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 10, -1, 0, 1, 35, 1, 10, -1, 0, 1, 35]");
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        int[] intArray6 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(intArray7, (int) (short) 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) 'a');
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (byte) 0, (-1));
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, 4, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 10, -1, 0, 1, 35, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.lang.Boolean[] booleanArray2 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2, false);
        char[] charArray8 = new char[] { '4', '#', 'a' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, 0, (int) (byte) 1);
        char[] charArray17 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray11, charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, '#');
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray2, (java.lang.Object) charArray11, 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.subarray(charArray11, 100, (int) (short) -1);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, '#');
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, '#', 3);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray32, '#', 0);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray38 = org.apache.commons.lang3.ArrayUtils.add(charArray32, 100, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, true]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10, (short) -1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, -1, 10, -1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10, -1, 10, -1, 0, 0]");
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        long[] longArray11 = new long[] {};
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray11);
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toObject(longArray11);
        double[] doubleArray16 = new double[] { 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 10.0f);
        double[] doubleArray21 = new double[] { 3, 4 };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray16, doubleArray21);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray16, (double) 0.0f);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray24, 0, (int) (short) 1);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, (double) 100, (int) (byte) -1, (double) 2);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, 1.0d, 0);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray14, (java.lang.Object) int34);
        java.lang.Byte[] byteArray38 = new java.lang.Byte[] { (byte) 0, (byte) 1 };
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray38, (java.lang.Object) 1L);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) longArray14, (java.lang.Object[]) byteArray38);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray38);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 1]");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        double[] doubleArray22 = new double[] { 'a', 10, 1.0d };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray22, (double) (short) 0, (double) 10.0f);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray22, 0.0d);
        double[] doubleArray31 = new double[] { 'a', 10, 1.0d };
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray31, (double) (short) 0, (double) 10.0f);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 0.0d);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray22, doubleArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray37);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, (double) 10);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray37);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.add(doubleArray37, (double) (-1));
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray18, doubleArray43);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, 0.0d, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        double[] doubleArray6 = new double[] { 3, 4 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, 0.0d, 1, (double) 1L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray1);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray1);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 1L);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray1);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 4, 100.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        long[] longArray5 = new long[] {};
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray6, 0L, (int) (byte) 0);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.addAll(longArray4, longArray6);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray4, (long) ' ', (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray16 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (int) '#', (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        float[] floatArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) (-1), 9);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) 8, (double) ' ');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        boolean[] booleanArray0 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 0);
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, false, true, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray8, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray0);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { false, true };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, true);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray15, (java.lang.Object) booleanArray18);
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, false, false, true };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30, false);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray30);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray18, (java.lang.Object) booleanArray30, (int) '4');
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, true]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, false, false, false]");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[][] charSequenceArray12 = new java.lang.CharSequence[][] { charSequenceArray2, charSequenceArray5, charSequenceArray8, charSequenceArray11 };
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray18 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "{-1,100,-1,0,100,1}", "{4}" };
        java.lang.CharSequence[][] charSequenceArray25 = new java.lang.CharSequence[][] { charSequenceArray15, charSequenceArray18, charSequenceArray21, charSequenceArray24 };
        java.lang.CharSequence[][][] charSequenceArray26 = new java.lang.CharSequence[][][] { charSequenceArray12, charSequenceArray25 };
        java.lang.CharSequence[][][] charSequenceArray29 = org.apache.commons.lang3.ArrayUtils.subarray(charSequenceArray26, (int) (short) 10, (int) 'a');
        int[] intArray30 = null;
        int[] intArray37 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.clone(intArray37);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.add(intArray37, (int) (byte) 0, (int) (byte) 1);
        int[] intArray48 = new int[] { (short) 1, (short) 10, (byte) -1, (byte) 0, (short) 1, '#' };
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.clone(intArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray37, intArray48);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.subarray(intArray37, (int) (byte) 1, (int) (byte) 100);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray53, 0);
        int[] intArray56 = org.apache.commons.lang3.ArrayUtils.addAll(intArray30, intArray53);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray56);
        java.lang.CharSequence[][][] charSequenceArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(charSequenceArray29, (java.lang.Object) intArray56);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) charSequenceArray58);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertNotNull(charSequenceArray18);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(charSequenceArray25);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, -1, 0, 1, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[35, 1, 0, -1, 10]");
        org.junit.Assert.assertNotNull(charSequenceArray58);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.lang.Float[] floatArray1 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray3 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray4 = new java.lang.Float[][] { floatArray1, floatArray3 };
        java.lang.Float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, floatArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray6);
        java.lang.Float[] floatArray9 = new java.lang.Float[] { 10.0f };
        java.lang.Float[] floatArray11 = new java.lang.Float[] { 10.0f };
        java.lang.Float[][] floatArray12 = new java.lang.Float[][] { floatArray9, floatArray11 };
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[][] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, floatArray13);
        java.lang.Float[][] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray12);
        float[] floatArray22 = new float[] { 1, (-1), (byte) 0, '#', (-1) };
        java.lang.Float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray23, (float) (short) -1);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray23, (float) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Float[][] floatArray28 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 6, floatArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[1.0, -1.0, 0.0, 35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[1.0, -1.0, 0.0, 35.0, -1.0]");
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.lang.Boolean[] booleanArray3 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[][] booleanArray8 = new java.lang.Boolean[][] { booleanArray3, booleanArray7 };
        java.lang.Boolean[] booleanArray12 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[] booleanArray16 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[][] booleanArray17 = new java.lang.Boolean[][] { booleanArray12, booleanArray16 };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[] booleanArray25 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[][] booleanArray26 = new java.lang.Boolean[][] { booleanArray21, booleanArray25 };
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[] booleanArray34 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[][] booleanArray35 = new java.lang.Boolean[][] { booleanArray30, booleanArray34 };
        java.lang.Boolean[] booleanArray39 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[] booleanArray43 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[][] booleanArray44 = new java.lang.Boolean[][] { booleanArray39, booleanArray43 };
        java.lang.Boolean[] booleanArray48 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[] booleanArray52 = new java.lang.Boolean[] { false, true, true };
        java.lang.Boolean[][] booleanArray53 = new java.lang.Boolean[][] { booleanArray48, booleanArray52 };
        java.lang.Boolean[][][] booleanArray54 = new java.lang.Boolean[][][] { booleanArray8, booleanArray17, booleanArray26, booleanArray35, booleanArray44, booleanArray53 };
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0d };
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 10.0f);
        double[] doubleArray7 = new double[] { 3, 4 };
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) 10.0f, 0, 0.0d);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray0, doubleArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[3.0, 4.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        short[] shortArray0 = null;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray0, (short) (byte) 100);
        org.junit.Assert.assertNull(shortArray2);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 0.0f);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (byte) -1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray0, 0.0f);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) 0L, 5);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, (float) 10L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.lang.Float[] floatArray0 = new java.lang.Float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 0.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray6 = new float[] {};
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, 0.0f);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) (byte) 1);
        float[] floatArray16 = new float[] { (byte) 0, 0.0f, 100.0f, (-1L), '#' };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray16);
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, 0.0f);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray18, (float) (byte) -1);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray18, 0.0f);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.clone(floatArray18);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray18);
        int int27 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray26);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray26);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[0.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[0.0, 0.0, 100.0, -1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 0.0, 100.0, -1.0, 35.0]");
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        byte[] byteArray0 = null;
        java.lang.Byte[] byteArray5 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 100, (byte) -1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5, (byte) -1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray5);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray9);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 1, 100, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 1, 100, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 1, 100, -1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 100, -1]");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.AnnotatedElement[] annotatedElementArray1 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.reflect.AnnotatedElement[]) wildcardClassArray0);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray4 = org.apache.commons.lang3.ArrayUtils.subarray(annotatedElementArray1, 0, 10);
        java.lang.Object[] objArray5 = null;
        java.lang.Short[] shortArray9 = new java.lang.Short[] { (short) 10, (short) -1, (short) 10 };
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] {};
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray11, (double) 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray9, (java.lang.Object[]) doubleArray11);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray5, (java.lang.Object[]) shortArray9);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) annotatedElementArray1, (java.lang.Object[]) shortArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(annotatedElementArray1);
        org.junit.Assert.assertNotNull(annotatedElementArray4);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, -1, 10]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        java.lang.Long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray0, (long) (byte) -1, 0);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.subarray(longArray0, 3, 0);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray8);
        long[] longArray10 = null;
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.lang.Short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray0, (short) -1);
        double[] doubleArray4 = new double[] { 100.0d };
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray4, (double) 10.0f);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] {};
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray4, doubleArray8);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) 1, (-1));
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, 7, (double) 10L);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray0, (java.lang.Object) 10L, 10);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        double[] doubleArray1 = new double[] { 100.0d };
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, (double) 10.0f);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] {};
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 1, (-1));
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray5);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10, (double) 1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        long[] longArray0 = new long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray1, 0, (long) (byte) 1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray1);
        long[] longArray6 = new long[] {};
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) '#');
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray1, longArray7);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 0);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray7);
        java.lang.Long[] longArray18 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray22 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray26 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray30 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[] longArray34 = new java.lang.Long[] { 10L, 100L, (-1L) };
        java.lang.Long[][] longArray35 = new java.lang.Long[][] { longArray18, longArray22, longArray26, longArray30, longArray34 };
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[][] longArray37 = org.apache.commons.lang3.ArrayUtils.add(longArray35, longArray36);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray36);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray39, (long) (-1));
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray14, longArray41);
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray41, (long) (short) -1);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray41, 0L);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray48 = org.apache.commons.lang3.ArrayUtils.remove(longArray41, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray2);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] {};
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray11, (double) 2);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray11);
        java.io.Serializable[] serializableArray15 = org.apache.commons.lang3.ArrayUtils.removeElement((java.io.Serializable[]) shortArray10, (java.lang.Object) doubleArray11);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray11, (double) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(serializableArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        short[] shortArray2 = new short[] { (short) 1, (short) 100 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray2);
        short[] shortArray4 = null;
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) -1);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, (int) (byte) 1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) 10);
        short[] shortArray14 = new short[] { (byte) 1, (short) 0 };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray14, (short) (byte) 10);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray14, (short) 0);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, (short) (byte) 1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray2, shortArray18);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray18, (int) '4', (int) (byte) 0);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray18, (short) (byte) -1, (int) (short) 100);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray18, (int) (short) 100, 2);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[]");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        double[] doubleArray3 = new double[] { 'a', 10, 1.0d };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (short) 0, (double) 10.0f);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 0.0d);
        double[] doubleArray12 = new double[] { 'a', 10, 1.0d };
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) 0, (double) 10.0f);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, 0.0d);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, 0.0d);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) 100.0f, (int) '#', (double) (-1));
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray18, (double) 100.0f);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[97.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0, 97.0, 1.0, 10.0, 97.0]");
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        char[] charArray3 = new char[] { '4', '#', 'a' };
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) 1);
        char[] charArray12 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.addAll(charArray6, charArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#', (int) 'a');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray14);
        char[] charArray26 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, (int) (short) 0, '4');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 2, '#');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray26);
        char[] charArray40 = new char[] { 'a', '#', '#', '4', '#' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.clone(charArray40);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray40, (int) (short) 0, '4');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 2, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray14, charArray47);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, 'a');
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray14, '#');
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY;
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray53, 'a');
        char[] charArray56 = null;
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.addAll(charArray53, charArray56);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray53);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray58, '4', (int) (short) 0);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[4, #, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#4##a4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, 4, #, #, a, 4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4a##4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, a, #, #, 4, #]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a###4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #, #, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#4##4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#, 4, #, #, 4]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "#4##a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "#4##a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, 4, #, #, a, 4]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }
}

